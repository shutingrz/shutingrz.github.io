<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>car-security on Shooting!!!</title>
    <link>https://www.shutingrz.com/tags/car-security/</link>
    <description>Recent content in car-security on Shooting!!!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>shutingrz - All rights reserved.</copyright>
    <lastBuildDate>Thu, 03 Oct 2019 04:34:00 +0900</lastBuildDate>
    <atom:link href="https://www.shutingrz.com/tags/car-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>アクアのスピードメーターを解析してPS3のコントローラで動かす</title>
      <link>https://www.shutingrz.com/post/aqua-meter-hack/</link>
      <pubDate>Thu, 03 Oct 2019 04:34:00 +0900</pubDate>
      <guid>https://www.shutingrz.com/post/aqua-meter-hack/</guid>
      <description>しゅーとです。 リアルECUシリーズ第二作目。 ヤフオクにてアクアのコンビネーションメータを手に入れたので色々いじってみた。 要約 スピードメーターが反応するCANIDを特定できた。 そしてその情報を使ってPS3コントローラでスピードメーターを操作してみたよ。 コントローラで動いているのだけ見たい人はこの動画を見てください。 検証環境 DC安定化電源 メーターへの給電用 Canable CAN通信ができるUSB機器。(ファームウェ</description>
    </item>
    <item>
      <title>リアルECUを召喚して本物のCAN通信の雰囲気を知る</title>
      <link>https://www.shutingrz.com/post/summon-real-ecu/</link>
      <pubDate>Sun, 04 Aug 2019 00:47:55 +0900</pubDate>
      <guid>https://www.shutingrz.com/post/summon-real-ecu/</guid>
      <description>これまでシミュレーション環境でカーセキュリティの勉強をしていて、その成果は妄想CAN三部作ということで以下の記事にまとめている。 シミュレーション環境でCAN通信を試す ドア開錠を行うCAN通信を特定する ECUの車速に関するCANメッセージを特定して騙す 車をいじったこともないし持ってすらないのによくここまで続いたなと我ながら思うが、さすがにネタ切れ感もありモチベが保てない。 そこで実際に車で使われている</description>
    </item>
    <item>
      <title>ECUの車速に関するCANメッセージを特定して騙す</title>
      <link>https://www.shutingrz.com/post/can-training3/</link>
      <pubDate>Thu, 25 Jul 2019 04:38:22 +0900</pubDate>
      <guid>https://www.shutingrz.com/post/can-training3/</guid>
      <description>CANの記事も3回目。引き続きシミュレーション環境のICSimでCAN通信の勉強。 前回はドア開錠メッセージをSavvyCANのOverwrite Modeで特定した。 しかしあの程度ならわざわざSavvyCANを使わずともcansnifferなどでも十分見つけることができる。 今回は、常に膨大なデータが流れていて普通のCUIでは見つけることが難しそうな車速に関するメッセージを、GUIモニタのSavvyC</description>
    </item>
    <item>
      <title>ドア開錠を行うCAN通信を特定する</title>
      <link>https://www.shutingrz.com/post/can-training2/</link>
      <pubDate>Mon, 22 Jul 2019 03:37:54 +0900</pubDate>
      <guid>https://www.shutingrz.com/post/can-training2/</guid>
      <description>今回も引き続きシミュレーション環境のICSimでCAN通信の勉強。 前回 はどのCANメッセージがドアをあけるものなのかわからないながらも、通信そのままリプレイさせることでドアの開錠を成功させた。 今回は、どのCANメッセージがドアをあける通信なのか特定を試みる。 環境 Ubuntu 18.04 Desktop CAN通信をモニターしてフィルタするソフトウェアはいくつか存在する。 が、色々試していくうちに現時点においてはSavvyCANがOSS</description>
    </item>
    <item>
      <title>シミュレーション環境でCAN通信を試す</title>
      <link>https://www.shutingrz.com/post/can-training-first/</link>
      <pubDate>Tue, 16 Jul 2019 00:02:39 +0900</pubDate>
      <guid>https://www.shutingrz.com/post/can-training-first/</guid>
      <description>車がなくてもカーセキュリティの勉強がしたい！ ということでカーハッカーズハンドブックを読みつつICSimを使ってCAN通信を試してみる。 環境 Ubuntu 18.04.2 LTS Desktop 参考 カーハッカーズハンドブック https://www.amazon.co.jp/dp/4873118239 Playing with SocketCan using can-utils https://dayba.wordpress.com/2017/05/25/playing-with-socketcan-using-can-utils/ CANを使えるようにする can-utilsのインストール sudo apt install can-utils 仮想CANデバイス機能の有効化 modprobe vcan 仮想CANインターフェイス vcanの設定 ip link add dev vcan0 type vcan ip link set up vcan0 vcan0があることを確認 $ ip link show dev vcan0 3: vcan0: &amp;lt;NOARP,UP,LOWER_UP&amp;gt; mtu 72</description>
    </item>
  </channel>
</rss>
